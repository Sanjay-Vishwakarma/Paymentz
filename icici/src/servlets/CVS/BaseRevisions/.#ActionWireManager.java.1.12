import com.directi.pg.Admin;
import com.directi.pg.Database;
import com.directi.pg.Logger;
import com.directi.pg.SystemError;
import com.logicboxes.util.ApplicationProperties;
import org.owasp.esapi.User;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Hashtable;

/**
 * Created with IntelliJ IDEA.
 * User: NISHANT
 * Date: 6/4/14
 * Time: 1:13 PM
 * To change this template use File | Settings | File Templates.
 */
public class ActionWireManager extends HttpServlet
{
    private final static String PAYOUT_REPORT_FILE_PATH = ApplicationProperties.getProperty("PAYOUT_REPORT_FILE_PATH");
    private final static String SETTLEMENT_FILE_PATH = ApplicationProperties.getProperty("SETTLEMENT_FILE_PATH");

    private static Logger log = new Logger(ActionWireManager.class.getName());

    public static boolean sendFile(String filepath,String filename,File f,HttpServletResponse response)throws Exception
    {


        int length = 0;
        // Set browser download related headers
        response.setContentType("application/octat-stream");
        response.setContentLength((int) f.length());
        response.setHeader("Content-Disposition", "attachment; filename=\"" + filename + "\"");
        javax.servlet.ServletOutputStream op = response.getOutputStream();

        byte[] bbuf = new byte[1024];
        DataInputStream in = new DataInputStream(new FileInputStream(f));

        while ((in != null) && ((length = in.read(bbuf)) != -1))
        {
            op.write(bbuf, 0, length);
        }

        in.close();
        op.flush();
        op.close();

        log.info("Successfully donloaded  file======"+filename);
        return true;

    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request, response);
    }

    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        log.debug("Entering in WireList");
        HttpSession session = req.getSession();
        User user =  (User)session.getAttribute("ESAPIUserSessionKey");

        if (!Admin.isLoggedIn(session))
        {   log.debug("Admin is logout ");
            res.sendRedirect("/icici/logout.jsp");
            return;
        }
        Connection conn = null;
        PreparedStatement preparedStatement=null;
        ResultSet resultSet=null;
        String errormsg = "";
        String EOL = "<BR>";
        Hashtable data=new Hashtable();
        String action=req.getParameter("action");
        String wireId=req.getParameter("mappingid");
        try
        {
            if(action.equals("") || wireId.equals(""))
            {
                errormsg += "<center><font class=\"text\" face=\"arial\"><b>Action Or mapping ID is not provided." + EOL + "</b></font></center>";
                req.setAttribute("message",errormsg);
                RequestDispatcher rd = req.getRequestDispatcher("/actionwiremanager.jsp?ctoken="+user.getCSRFToken());
                rd.forward(req, res);
                return;
            }
            else
            {
                if(action.equalsIgnoreCase("view"))
                {
                    data=getRecords(wireId);
                    req.setAttribute("readonly","readonly");

                    req.setAttribute("action",action);
                    req.setAttribute("data",data);
                    RequestDispatcher rd = req.getRequestDispatcher("/actionwiremanager.jsp?ctoken="+user.getCSRFToken());
                    rd.forward(req, res);
                }
                else if(action.equalsIgnoreCase("update"))
                {
                    data=getRecords(wireId);
                    req.setAttribute("readonly","readonly");

                    req.setAttribute("action",action);
                    req.setAttribute("data",data);
                    RequestDispatcher rd = req.getRequestDispatcher("/actionwiremanager.jsp?ctoken="+user.getCSRFToken());
                    rd.forward(req, res);
                }
                else if(action.equalsIgnoreCase("delete"))
                {
                    boolean isMarkForDelete=setMarkForDelete(wireId);
                    if(isMarkForDelete)
                    {
                        errormsg += "<center><font class=\"text\" face=\"arial\"><b>Record delete successful." + EOL + "</b></font></center>";
                    }
                    else
                    {
                        errormsg += "<center><font class=\"text\" face=\"arial\"><b>Record delete Failed." + EOL + "</b></font></center>";
                    }
                    req.setAttribute("message",errormsg);
                    RequestDispatcher rd = req.getRequestDispatcher("/wirelist.jsp?ctoken="+user.getCSRFToken());
                    rd.forward(req, res);
                }
                else if(action.equalsIgnoreCase("conform"))
                {
                    boolean setRR=setRollingReserveWire(wireId);
                    if(setRR)
                    {
                        errormsg += "<center><font class=\"text\" face=\"arial\"><b>Rolling Reserve Update successful." + EOL + "</b></font></center>";
                    }
                    else
                    {
                        errormsg += "<center><font class=\"text\" face=\"arial\"><b>Rolling Reserve Update failed." + EOL + "</b></font></center>";
                    }
                    req.setAttribute("message",errormsg);
                    RequestDispatcher rd = req.getRequestDispatcher("/wirelist.jsp?ctoken="+user.getCSRFToken());
                    rd.forward(req, res);
                }
                else if(action.equalsIgnoreCase("sendExcelFile"))
                {
                    String exportPath =null;// ApplicationProperties.getProperty("SETTLEMENT_FILE_PATH");
                    try
                    {
                        conn= Database.getRDBConnection();
                        String qry="SELECT settledtransactionfilepath FROM merchant_wiremanager WHERE settledid=?";
                        preparedStatement=conn.prepareStatement(qry);
                        preparedStatement.setString(1,wireId);
                        ResultSet rs=null;
                        rs=preparedStatement.executeQuery();
                        rs.next();
                        exportPath=rs.getString("settledtransactionfilepath");
                        if(exportPath==null || exportPath.isEmpty())
                        {
                            errormsg += "<center><font class=\"text\" face=\"arial\"><b>File Is Not Available." + EOL + "</b></font></center>";
                            req.setAttribute("message",errormsg);
                            RequestDispatcher rd = req.getRequestDispatcher("/wirelist.jsp?ctoken="+user.getCSRFToken());
                            rd.forward(req, res);
                        }

                        File f = new File(SETTLEMENT_FILE_PATH+exportPath);
                        String filename=f.getName();
                        if(filename==null || filename.isEmpty())
                        {
                            errormsg += "<center><font class=\"text\" face=\"arial\"><b>File Is Not Available." + EOL + "</b></font></center>";
                            req.setAttribute("message",errormsg);
                            RequestDispatcher rd = req.getRequestDispatcher("/wirelist.jsp?ctoken="+user.getCSRFToken());
                            rd.forward(req, res);
                        }

                        sendFile(exportPath,filename,f,res);

                    }
                    catch (SystemError systemError)
                    {
                        log.error("Error while fetching data from wiremanager",systemError);
                    }
                    catch (SQLException e)
                    {
                        log.error("SQL error while fetching data from wiremanager", e);
                    }
                    catch (Exception e)
                    {
                        log.error("Error while fetching data from wiremanager",e);
                    }


                }
                else if(action.equalsIgnoreCase("sendPdfFile"))
                {
                    String exportPath =null;// ApplicationProperties.getProperty("SETTLEMENT_FILE_PATH");
                    try
                    {
                        conn= Database.getRDBConnection();
                        String qry="SELECT settlementreportfilepath FROM merchant_wiremanager WHERE settledid=?";
                        preparedStatement=conn.prepareStatement(qry);
                        preparedStatement.setString(1,wireId);
                        resultSet=null;
                        resultSet=preparedStatement.executeQuery();
                        resultSet.next();
                        exportPath=resultSet.getString("settlementreportfilepath");
                        if(exportPath==null || exportPath.isEmpty())
                        {
                            errormsg += "<center><font class=\"text\" face=\"arial\"><b>File Is Not Available." + EOL + "</b></font></center>";
                            req.setAttribute("message",errormsg);
                            RequestDispatcher rd = req.getRequestDispatcher("/wirelist.jsp?ctoken="+user.getCSRFToken());
                            rd.forward(req, res);
                        }

                        File f = new File(PAYOUT_REPORT_FILE_PATH+exportPath);
                        String filename=f.getName();
                        if(filename==null || filename.isEmpty())
                        {
                            errormsg += "<center><font class=\"text\" face=\"arial\"><b>File Is Not Available." + EOL + "</b></font></center>";
                            req.setAttribute("message",errormsg);
                            RequestDispatcher rd = req.getRequestDispatcher("/wirelist.jsp?ctoken="+user.getCSRFToken());
                            rd.forward(req, res);
                        }

                        sendFile(exportPath,filename,f,res);

                    }
                    catch (SystemError systemError)
                    {
                        log.error("Error while fetching data from wiremanager",systemError);
                    }
                    catch (SQLException e)
                    {
                        log.error("SQL error while fetching data from wiremanager", e);
                    }
                    catch (Exception e)
                    {
                        log.error("Error while fetching data from wiremanager",e);
                    }
                }
            }
        }
        catch (Exception e)
        {
            log.error("main exception ::",e);
        }
        finally {
            Database.closeResultSet(resultSet);
            Database.closePreparedStatement(preparedStatement);
            Database.closeConnection(conn);
        }
    }

    public Hashtable getRecords(String mappingid)
    {
        Hashtable wireData=new Hashtable();
        Connection connection=null;
        PreparedStatement preparedStatement=null;
        try
        {
            connection= Database.getRDBConnection();
            String qry="SELECT settledid,settledate,firstdate,lastdate,amount,balanceamount,netfinalamount,unpaidamount,currency,status,settlementreportfilepath,settledtransactionfilepath,markedfordeletion,TIMESTAMP,toid,terminalid,accountid,paymodeid,cardtypeid,isrollingreserveincluded,rollingreservereleasedateupto,settlementcycle_no,declinedcoverdateupto,reversedcoverdateupto,chargebackcoverdateupto,payoutCurrency,payoutAmount,payerBankDetails,receiverBankDetails,paymentConfirmation,FROM_UNIXTIME(wirecreationtime) AS 'wirecreationdate' FROM merchant_wiremanager WHERE settledid=?";
            preparedStatement=connection.prepareStatement(qry);
            preparedStatement.setString(1,mappingid);
            wireData=Database.getHashFromResultSet(preparedStatement.executeQuery());
        }
        catch (SystemError systemError)
        {
            log.error("Error while fetching data from merchant_wiremanager",systemError);
        }
        catch (SQLException e)
        {
            log.error("SQL error while fetching data from merchant_wiremanager", e);
        }
        finally {
            Database.closePreparedStatement(preparedStatement);
            Database.closeConnection(connection);
        }
        return wireData;
    }

    public boolean setMarkForDelete(String mappingid)
    {
        boolean flag=false;
        Connection connection=null;
        PreparedStatement preparedStatement=null;
        try
        {
            connection= Database.getConnection();
            String qry="DELETE FROM merchant_wiremanager WHERE settledid=?";
            preparedStatement=connection.prepareStatement(qry);
            preparedStatement.setString(1,mappingid);
            int i=preparedStatement.executeUpdate();
            if(i==1)
            {
                flag=true;
            }
        }
        catch (SystemError systemError)
        {
            log.error("Error while fetching data from merchant_wiremanager",systemError);
        }
        catch (SQLException e)
        {
            log.error("SQL error while fetching data from merchant_wiremanager", e);
        }
        finally {
            Database.closePreparedStatement(preparedStatement);
            Database.closeConnection(connection);
        }
        return flag;
    }

    public boolean setRollingReserveWire(String mappingid)
    {
        boolean flag=false;
        Connection connection=null;
        PreparedStatement preparedStatement=null;
        try
        {
            connection= Database.getConnection();
            String qry="UPDATE merchant_wiremanager SET isrollingreserveincluded='Y' WHERE settledid=?";
            preparedStatement=connection.prepareStatement(qry);
            preparedStatement.setString(1,mappingid);
            int i=preparedStatement.executeUpdate();
            if(i==1)
            {
                flag=true;
            }
        }
        catch (SystemError systemError)
        {
            log.error("Error while fetching data from wiremanager",systemError);
        }
        catch (SQLException e)
        {
            log.error("SQL error while fetching data from wiremanager", e);
        }
        finally {
            Database.closePreparedStatement(preparedStatement);
            Database.closeConnection(connection);
        }
        return flag;
    }
}
