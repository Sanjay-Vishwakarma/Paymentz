import com.directi.pg.*;
import com.manager.BlacklistManager;
import com.manager.TransactionManager;
import com.manager.WhiteListManager;
import com.manager.dao.MerchantDAO;
import com.manager.dao.TransactionDAO;
import com.manager.vo.MerchantDetailsVO;
import com.manager.vo.TransactionDetailsVO;
import com.payment.AbstractPaymentProcess;
import com.payment.Mail.MailEventEnum;
import com.payment.Mail.SendTransactionEventMailUtil;
import com.payment.PaymentProcessFactory;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.exceptionHandler.PZExceptionHandler;
import com.payment.exceptionHandler.operations.PZOperations;
import com.payment.request.PZChargebackRequest;
import com.payment.response.PZChargebackResponse;
import com.payment.response.PZResponseStatus;
import org.apache.commons.lang.ArrayUtils;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.User;
import org.owasp.esapi.errors.ValidationException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created with IntelliJ IDEA.
 * User: admin
 * Date: 4/10/13
 * Time: 1:35 PM
 * To change this template use File | Settings | File Templates.
 */
public class CommonDoChargeback extends HttpServlet
{
    private static Logger logger = new Logger(CommonDoChargeback.class.getName());
    ResourceBundle rb=LoadProperties.getProperty("com.directi.pg.chargebackFraud");
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request, response);
    }
    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        HttpSession session = req.getSession();
        User user =  (User)session.getAttribute("ESAPIUserSessionKey");
        if (!Admin.isLoggedIn(session))
        {   logger.debug("invalid user");
            res.sendRedirect("/icici/logout.jsp");
            return;
        }
        String action=req.getParameter("submitbutton");
        StringBuilder sSuccessMessage = new StringBuilder();
        StringBuilder sErrorMessage = new StringBuilder();

        sErrorMessage.append("<center><table border=2>");
        sErrorMessage.append("<tr colspan=8 class=texthead>");
        sErrorMessage.append("<td colspan=2 align=center>Tracking Id </td>");
        sErrorMessage.append("<td colspan=2 align=center>Status</td>");
        sErrorMessage.append("<td colspan=4 align=center>Description</td>");
        sErrorMessage.append("</tr>");

        String cbamount = null;
        String cbreason=null;
        String toid = null;
        String accountId = null;
        String mailStatus="Fail";
        String[] icicitransidStr =null;
        String isFraudRequest = "";
        String captureAmount=null;
        String refundAmount =null;
        System.out.println("refundAmount::::"+refundAmount);

        PZChargebackRequest cbRequest = new PZChargebackRequest();
        PZChargebackResponse response = new PZChargebackResponse();
        MerchantDAO merchantDAO = new MerchantDAO();

        if (req.getParameterValues("trackingid")!= null)
        {
            icicitransidStr = req.getParameterValues("trackingid");
        }
        else
        {
            sErrorMessage.append("Invalid TransactionID.");
            req.setAttribute("cbmessage", sErrorMessage.toString());
            logger.debug("forwarding to CommonDoChargeback");
            RequestDispatcher rd = req.getRequestDispatcher("/servlet/CommonChargebackList?ctoken="+user.getCSRFToken());
            rd.forward(req, res);
            return;
        }

        if (Functions.checkArrayNull(icicitransidStr) == null)
        {
            sErrorMessage.append("Select at least one transaction.");
            req.setAttribute("cbmessage", sErrorMessage.toString());
            logger.debug("forwarding to CommonDoChargeback");
            RequestDispatcher rd = req.getRequestDispatcher("/servlet/CommonChargebackList?ctoken="+user.getCSRFToken());
            rd.forward(req, res);
            return;
        }
        if("RetrivalRequest Selected".equalsIgnoreCase(action))
        {
            TransactionDAO transactionDAO=new TransactionDAO();
            for (String icicitransid : icicitransidStr)
            {
                String retrivalRequestFlag=req.getParameter("isRetrivalRequest_"+icicitransid);
                boolean status=transactionDAO.updateTransactionRetrialRequest(icicitransid,retrivalRequestFlag);
                if(status)
                {
                    sErrorMessage.append(getMessage(icicitransid,"Success","Record Updated Successfully."));
                }
                else
                {
                    sErrorMessage.append(getMessage(icicitransid,"Success","Failed During Updation."));
                }
            }
        }
        else
        {
            HashMap<String,Collection> membersMap = new HashMap<String,Collection>();
            Collection<Hashtable> listOfRefunds = null;
            Hashtable refundDetails = null;
            Functions functions = new Functions();
            for (String icicitransid : icicitransidStr)
            {
                boolean refunded = false;
                StringBuffer mailbody = null;
                MerchantDetailsVO merchantDetailsVO = null;
                if (req.getParameter("toid_" + icicitransid) != null && !req.getParameter("toid_" + icicitransid).equals(""))
                {
                    toid = req.getParameter("toid_" + icicitransid);
                }
                else
                {
                    sErrorMessage.append(getMessage(icicitransid, "Failed", "ToId is missing."));
                    continue;
                }

                try
                {
                    merchantDetailsVO = merchantDAO.getMemberDetails(toid);
                }
                catch (PZDBViolationException e)
                {
                    sErrorMessage.append(getMessage(icicitransid, "Failed", "Error while fetching member details"));
                    continue;
                }

                try
                {
                    cbamount = ESAPI.validator().getValidInput("cbamount_" + icicitransid, req.getParameter("cbamount_" + icicitransid), "AmountStr", 20, false);
                }
                catch (ValidationException e)
                {
                    PZExceptionHandler.raiseAndHandleGenericViolationException("CommonDoChargeback.java", "doPost()", null, "admin", sErrorMessage.toString(), null, e.getMessage(), e.getCause(), toid, PZOperations.ADMIN_CHARGEBACK);
                    sErrorMessage.append(getMessage(icicitransid, "Failed", "chargeback amount should not be empty"));
                    continue;
                }

                if (req.getParameter("captureamount_" + icicitransid) != null && !req.getParameter("captureamount_" + icicitransid).equals(""))
                {
                    captureAmount = req.getParameter("captureamount_" + icicitransid);
                }
                if (req.getParameter("refundamount_" + icicitransid) != null && !req.getParameter("refundamount_" + icicitransid).equals(""))
                {
                    refundAmount = req.getParameter("refundamount_" + icicitransid);
                }

                if (req.getParameter("accountid_" + icicitransid) != null && !req.getParameter("accountid_" + icicitransid).equals(""))
                {
                    accountId = req.getParameter("accountid_" + icicitransid);
                }
                else
                {
                    sErrorMessage.append(getMessage(icicitransid, "Failed", "AccountId is missing."));
                    continue;
                }

                if (req.getParameter("chargebackreason_" + icicitransid) != null && !req.getParameter("chargebackreason_" + icicitransid).equals(""))
                {
                    cbreason = req.getParameter("chargebackreason_" + icicitransid);
                }
                else
                {
                    sErrorMessage.append(getMessage(icicitransid, "Failed", "Chargeback reason not provided"));
                    continue;
                }
                if (merchantDetailsVO != null && functions.isValueNull(merchantDetailsVO.getMemberId()))
                {
                    Hashtable transDetails = TransactionEntry.getTransDetails(icicitransid);
                    String transactionDate = (String) transDetails.get("transactiondate");
                    SimpleDateFormat targetFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    long d = Functions.DATEDIFF(transactionDate, targetFormat.format(new Date()));
                    int chargebackAllowedDays = Integer.parseInt(merchantDetailsVO.getChargebackAllowedDays());
                    if (d > chargebackAllowedDays)
                    {
                        sErrorMessage.append(getMessage(icicitransid, "Failed", "Transaction has exceeds refund expiry"));
                        continue;
                    }
                }
                //Process refund
                AbstractPaymentProcess process = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(icicitransid), Integer.parseInt(accountId));
                cbRequest.setMemberId(Integer.valueOf(toid));
                cbRequest.setAccountId(Integer.parseInt(accountId));
                cbRequest.setTrackingId(Integer.parseInt(icicitransid));
                cbRequest.setCbAmount(cbamount);
                cbRequest.setCbReason(cbreason);
                cbRequest.setCaptureAmount(captureAmount);
                cbRequest.setRefundAmount(refundAmount);
                cbRequest.setAdmin(true);

                AuditTrailVO auditTrailVO = new AuditTrailVO();
                auditTrailVO.setActionExecutorId(toid);
                auditTrailVO.setActionExecutorName("Admin");
                cbRequest.setAuditTrailVO(auditTrailVO);
                response = process.chargeback(cbRequest);
                if (response != null && (response.getStatus()).equals(PZResponseStatus.SUCCESS))
                {
                    refundDetails = new Hashtable();
                    refundDetails.put("icicitransid", response.getTrackingId());
                    mailStatus = "Successful";
                    refundDetails.put("description", response.getResponseDesceiption());

                    sErrorMessage.append(getMessage(response.getTrackingId(), response.getStatus().toString(), response.getResponseDesceiption()));
                    if (membersMap.get(toid) == null)
                    {
                        listOfRefunds = new ArrayList<Hashtable>();
                        listOfRefunds.add(refundDetails);
                        membersMap.put(toid, listOfRefunds);
                    }
                    else
                    {
                        listOfRefunds = membersMap.get(toid);
                        listOfRefunds.add(refundDetails);
                        membersMap.put(toid, listOfRefunds);
                    }
                }
                else
                {
                    sErrorMessage.append(getMessage(icicitransid, "Failed", response.getResponseDesceiption()));
                    continue;
                }
                if ("Y".equalsIgnoreCase(merchantDetailsVO.getChargebackMailsend()))
                {
                    SendTransactionEventMailUtil sendTransactionEventMail = new SendTransactionEventMailUtil();
                    sendTransactionEventMail.sendTransactionEventMail(MailEventEnum.CHARGEBACK_TRANSACTION, icicitransid, mailStatus, cbreason, null);
                }
                String reason = rb.getString("reason");
                String reason1[] = reason.split("\\|");
                TransactionDAO transactionDAO = new TransactionDAO();

                if (ArrayUtils.contains(reason1, cbreason))
                {
                    boolean status = transactionDAO.getUploadBulkFraudFile(icicitransid);
                    BlacklistManager blacklistManager = new BlacklistManager();
                    WhiteListManager whiteListManager = new WhiteListManager();
                    TransactionManager transactionManager = new TransactionManager();
                    TransactionDetailsVO transactionDetailsVO = transactionManager.getTransDetailFromCommon(icicitransid);
                    String blacklistReason = (cbreason +" (Chargeback by Admin) "+"(" + icicitransid + ")");
                    try
                    {
                        blacklistManager.blacklistEntities(icicitransid, blacklistReason);
                        whiteListManager.whiteListEntities(icicitransid);
                        Set<String> cardNum = new HashSet<>();
                        Set<String> emailAddr = new HashSet<>();
                        transactionManager.addCustomerName(transactionDetailsVO.getName(), cardNum, emailAddr);
                        try
                        {
                            blacklistManager.addCustomerEmailBatch(emailAddr, reason);
                        }catch (PZDBViolationException e){
                            logger.info("Duplicate Entry:::" + e);
                        }
                        try{
                            blacklistManager.addCustomerCardBatch(cardNum, reason);
                        }
                        catch (PZDBViolationException e){
                            logger.info("Duplicate Entry:::" + e);
                        }
                        try{
                            whiteListManager.removeCardEmailEntry(emailAddr, cardNum);
                        }
                        catch (PZDBViolationException e){
                            logger.info("Duplicate Entry:::" + e);
                        }
                    }
                    catch (PZDBViolationException e)
                    {
                        logger.info("Duplicate Entry:::::"+e);
                    }
                }
                SendTransactionEventMailUtil sendTransactionEventMail=new SendTransactionEventMailUtil();
                sendTransactionEventMail.sendTransactionEventMail(MailEventEnum.CHARGEBACK_TRANSACTION, icicitransid, mailStatus, cbreason, null);
            }
            sErrorMessage.append("</table>");
        }
        StringBuilder chargeBackMessage = new StringBuilder();
        chargeBackMessage.append(sSuccessMessage.toString());
        chargeBackMessage.append("<BR/>");
        chargeBackMessage.append(sErrorMessage.toString());
        req.setAttribute("cbmessage", chargeBackMessage.toString());
        RequestDispatcher rd = req.getRequestDispatcher("/commonchargeback.jsp?ctoken="+user.getCSRFToken());
        rd.forward(req, res);
    }
    public String getMessage(String trackingId,String status,String description)
    {
        StringBuffer stringBuffer=new StringBuffer();
        stringBuffer.append("<tr colspan=8>");
        stringBuffer.append("<td colspan=2>"+trackingId+"</td>");
        stringBuffer.append("<td colspan=2>"+status+"</td>");
        stringBuffer.append("<td colspan=4>"+description+"</td>");
        stringBuffer.append("</tr>");
        return stringBuffer.toString();
    }
}