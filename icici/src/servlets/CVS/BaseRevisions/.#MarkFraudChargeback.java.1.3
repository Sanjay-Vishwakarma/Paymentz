import com.directi.pg.Admin;
import com.directi.pg.Functions;
import com.directi.pg.Logger;
import com.manager.BlacklistManager;
import com.manager.TransactionManager;
import com.manager.WhiteListManager;
import com.manager.dao.TransactionDAO;
import com.manager.vo.TransactionDetailsVO;
import com.payment.exceptionHandler.PZDBViolationException;
import org.owasp.esapi.User;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
/**
 * Created with IntelliJ IDEA.
 * User: Mahima
 * Date: 4/10/18
 * Time: 1:35 PM
 * To change this template use File | Settings | File Templates.
 */
public class MarkFraudChargeback extends HttpServlet
{
    private static Logger logger = new Logger(MarkFraudChargeback.class.getName());
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request, response);
    }
    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("ESAPIUserSessionKey");
        if (!Admin.isLoggedIn(session))
        {
            logger.debug("invalid user");
            res.sendRedirect("/icici/logout.jsp");
            return;
        }
        String action = req.getParameter("submitbutton");
        StringBuilder sErrorMessage = new StringBuilder();
        Functions functions=new Functions();
        String fraudReason=null;
        String remark=null;

        sErrorMessage.append("<center><table border=2>");
        sErrorMessage.append("<tr colspan=8 class=texthead>");
        sErrorMessage.append("<td colspan=2 align=center> Tracking Id </td>");
        sErrorMessage.append("<td colspan=2 align=center> Status </td>");
        sErrorMessage.append("<td colspan=4 align=center> Description </td>");
        sErrorMessage.append("</tr>");

        String[] icicitransidStr = null;

        if (req.getParameterValues("trackingid") != null)
        {
            icicitransidStr = req.getParameterValues("trackingid");
        }
        else
        {
            sErrorMessage.append("Invalid TransactionID.");
            req.setAttribute("error", sErrorMessage.toString());
            RequestDispatcher rd = req.getRequestDispatcher("/servlet/MarkFraudTransaction?ctoken=" + user.getCSRFToken());
            rd.forward(req, res);
            return;
        }
        if (Functions.checkArrayNull(icicitransidStr) == null)
        {
            sErrorMessage.append("Select at least one transaction.");
            req.setAttribute("error", sErrorMessage.toString());
            RequestDispatcher rd = req.getRequestDispatcher("/servlet/MarkFraudTransaction?ctoken=" + user.getCSRFToken());
            rd.forward(req, res);
            return;
        }

        if ("Submit".equalsIgnoreCase(action))
        {
            TransactionDAO transactionDAO = new TransactionDAO();
            BlacklistManager blacklistManager = new BlacklistManager();
            WhiteListManager whiteListManager = new WhiteListManager();
            TransactionManager transactionManager = new TransactionManager();

            for (String icicitransId : icicitransidStr)
            {
                if (req.getParameter("reason_" + icicitransId) != null && !req.getParameter("reason_" + icicitransId).equals(""))
                {
                    remark  = req.getParameter("reason_" + icicitransId);
                }
                if (req.getParameter("fraudreason" + icicitransId) != null && !req.getParameter("fraudreason" + icicitransId).equals(""))
                {
                    fraudReason = req.getParameter("fraudreason" + icicitransId);
                }
                boolean status = transactionDAO.updateIsFraudRequest(icicitransId,remark, fraudReason);
                TransactionDetailsVO transactionDetailsVO = transactionManager.getTransDetailFromCommon(icicitransId);
                String reason = "Fraudulent Transaction Uploaded by Admin" + "(" + (icicitransId) + ")";
                try
                {
                    blacklistManager.blacklistEntities(icicitransId, reason);
                    whiteListManager.whiteListEntities(icicitransId);
                    Set<String> cardNum = new HashSet<>();
                    Set<String> emailAddr = new HashSet<>();
                    transactionManager.addCustomerName(transactionDetailsVO.getName(), cardNum, emailAddr);
                    try
                    {
                        blacklistManager.addCustomerEmailBatch(emailAddr, reason);
                    }catch (PZDBViolationException e){
                        logger.info("Duplicate Entry:::" + e);
                    }
                    try{
                        blacklistManager.addCustomerCardBatch(cardNum, reason);
                    }
                    catch (PZDBViolationException e){
                        logger.info("Duplicate Entry:::" + e);
                    }
                    try{
                        whiteListManager.removeCardEmailEntry(emailAddr, cardNum);
                    }
                    catch (PZDBViolationException e){
                        logger.info("Duplicate Entry:::" + e);
                    }
                }
                catch (PZDBViolationException e)
                {
                    logger.info("Duplicate Entry:::" + e);
                }
                sErrorMessage.append(getMessage(icicitransId, "Success", "Record Updated Successfully."));
            }
        }
        sErrorMessage.append("</table>");
        StringBuilder chargeBackMessage = new StringBuilder();
        chargeBackMessage.append("<BR/>");
        chargeBackMessage.append(sErrorMessage.toString());
        req.setAttribute("error", chargeBackMessage.toString());
        RequestDispatcher rd = req.getRequestDispatcher("/markFraudTransaction.jsp?ctoken="+user.getCSRFToken());
        rd.forward(req, res);
    }

    public String getMessage(String trackingId,String status,String description)
    {
        StringBuffer stringBuffer=new StringBuffer();
        stringBuffer.append("<tr colspan=8>");
        stringBuffer.append("<td colspan=2>"+trackingId+"</td>");
        stringBuffer.append("<td colspan=2>"+status+"</td>");
        stringBuffer.append("<td colspan=4>"+description+"</td>");
        stringBuffer.append("</tr>");
        return stringBuffer.toString();
    }
}