import com.directi.pg.ActionEntry;
import com.directi.pg.Admin;
import com.directi.pg.Functions;
import com.directi.pg.Logger;
import com.directi.pg.core.GatewayTypeService;
import com.manager.TransactionManager;
import com.payment.validators.InputFields;
import com.payment.validators.InputValidator;
import org.owasp.esapi.User;
import org.owasp.esapi.errors.ValidationException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;
public class TransactionDetails extends HttpServlet
{
    private static Logger log = new Logger(TransactionDetails.class.getName());
    Functions functions = new Functions();
    ServletContext ctx = null;
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        doPost(req, res);
    }
    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        HttpSession session = req.getSession();
        Date date1=new Date();
        log.error("TransactionDetails startTime---" + date1.getTime());
        User user =  (User)session.getAttribute("ESAPIUserSessionKey");
        if (!Admin.isLoggedIn(session))
        {   log.debug("Admin is logout ");
            res.sendRedirect("/icici/logout.jsp");
            return;
        }

        if(req.getParameter("doget")!=null && !req.getParameter("doget").equals("") && req.getParameter("doget").equals("true"))
        {
            doGet(req,res);
            return;
        }
        if (ctx == null) ctx = getServletContext();
        int start = 0; // start index
        int end = 0; // end index
        String str = null;
        String perfectmatch=null;
        perfectmatch = Functions.checkStringNull(req.getParameter("perfectmatch"));
        boolean flag=false;
        String errormsg="";
        Hashtable actionhash=null;
        String iciciTransId=null;
        String gateway=null;
        String status = req.getParameter("status");
        String accountid = req.getParameter("accountid");
        String cardpresent = req.getParameter("cardpresent");
        String EOL = "<BR>";
        Hashtable hash = null;
        //Hashtable childhash=null;
        //Hashtable hash = new Hashtable();
        TransactionManager transactionManager = new TransactionManager();
        ActionEntry entry = new ActionEntry();
        /*if (!req.getParameter("accountid").equalsIgnoreCase("0") && !req.getParameter("accountid").equals(""))*/
       /* if (functions.isValueNull(req.getParameter("accountid")))
        {
            accountid = req.getParameter("accountid");
        }*/

        try
        {
            validateOptionalParameter(req);
        }
        catch(ValidationException e)
        {
            log.error("Invalid Input",e);
            errormsg += "<center><font class=\"text\" face=\"arial\"><b>"+ errormsg + e.getMessage() + EOL + "</b></font></center>";
            flag = false;
            log.debug("message..." + e.getMessage());
            req.setAttribute("errormessage",errormsg);
            RequestDispatcher rd = req.getRequestDispatcher("/transactions.jsp?ctoken="+user.getCSRFToken());
            rd.forward(req, res);
        }
        //This condition is for transaction details doGet code shifted to doPost
        if(functions.isValueNull(req.getParameter("action")) && "TransactionDetails".equals(req.getParameter("action")) && functions.isValueNull(req.getParameter("STrackingid")) && !req.getParameter("accountid").equalsIgnoreCase("0") )
        {
            String icicitransid = req.getParameter("STrackingid");

            boolean archive = false;
            if(functions.isValueNull(req.getParameter("archive")))
            {
                archive=Boolean.valueOf(req.getParameter("archive")).booleanValue();
            }
            try
            {
                if (cardpresent.equals("CP"))
                {
                    Date date2=new Date();
                    log.error("getCardPresentTransactionDetails startTime---" + date2.getTime());
                    hash = transactionManager.getCardPresentTransactionDetails(icicitransid, archive, accountid);
                    //childhash=transactionManager.getChildDetailscardPresent(iciciTransId, status);
                    hash.put("CP","CP");
                    log.error("getCardPresentTransactionDetails End time--->" + (new Date()).getTime());
                    log.error("getCardPresentTransactionDetails Diff time--->" + ((new Date()).getTime() - date2.getTime()));

                    Date date3=new Date();
                    log.error("getActionHistoryByTrackingIdAndGatewayCP startTime---" + date3.getTime());
                    actionhash = entry.getActionHistoryByTrackingIdAndGatewayCP(iciciTransId,gateway);
                    log.error("getActionHistoryByTrackingIdAndGatewayCP End time--->" + (new Date()).getTime());
                    log.error("getActionHistoryByTrackingIdAndGatewayCP Diff time--->" + ((new Date()).getTime() - date3.getTime()));
                }
                else
                {
                    Date date4=new Date();
                    log.error("getTransactionDetails startTime---" + date4.getTime());

                    hash = transactionManager.getTransactionDetails(icicitransid, archive,accountid);
                   // childhash=transactionManager.getChildDetails(iciciTransId, status);
                    log.error("getTransactionDetails End time--->" + (new Date()).getTime());
                    log.error("getTransactionDetails Diff time--->" + ((new Date()).getTime() - date4.getTime()));//After clicking on trackingId

                    Date date5=new Date();
                    log.error("getActionHistoryByTrackingIdAndGateway startTime---" + date5.getTime());

                    actionhash = entry.getActionHistoryByTrackingIdAndGateway(iciciTransId,gateway);
                    log.error("getActionHistoryByTrackingIdAndGateway End time--->" + (new Date()).getTime());
                    log.error("getActionHistoryByTrackingIdAndGateway Diff time--->" + ((new Date()).getTime() - date5.getTime()));//After clicking on trackingId
                }

                log.debug("fetch record through getTransactionDetails");
                req.setAttribute("transactionsdetails", hash);
                //req.setAttribute("childhash",childhash);
                entry.closeConnection();
                req.setAttribute("actionHistory", actionhash);
                log.debug("forwarding to transactionDetails.jsp");
                //hash=null;
                RequestDispatcher rd = req.getRequestDispatcher("/transactionDetails.jsp?ctoken="+user.getCSRFToken());
                rd.forward(req, res);

            }
            catch (Exception e)
            {   log.error("Exception in doGet method",e);
                errormsg += "<center><font class=\"text\" face=\"arial\"><b>"+ errormsg + e.getMessage() + EOL + "</b></font></center>";
                flag = false;
                log.debug("message..." + e.getMessage());
                req.setAttribute("errormessage",errormsg);
                RequestDispatcher rd = req.getRequestDispatcher("/transactions.jsp?ctoken="+user.getCSRFToken());
                rd.forward(req, res);
            }
            return;
        }
        String name = req.getParameter("name");
        String desc = req.getParameter("desc");
        String amount = req.getParameter("amount");
        String refundamount = req.getParameter("refundamount");
        String firstfourofccnum = req.getParameter("firstfourofccnum");
        String lastfourofccnum = req.getParameter("lastfourofccnum");
        String emailaddr = req.getParameter("emailaddr");
        String orderdesc = req.getParameter("orderdesc");
        //String status = req.getParameter("status");
        String statusflag=req.getParameter("statusflag");
        String trackingid = req.getParameter("STrackingid");
        String auth = req.getParameter("authorization_code");
        String arn = req.getParameter("arn");
        String rrn = req.getParameter("rrn");
        String toid = "";
        if (!req.getParameter("toid").equalsIgnoreCase("0"))
        {
            toid = req.getParameter("toid");
        }
        String fdate = req.getParameter("fdate");
        String tdate = req.getParameter("tdate");
        String fmonth = req.getParameter("fmonth");
        String tmonth = req.getParameter("tmonth");
        String fyear = req.getParameter("fyear");
        String tyear = req.getParameter("tyear");
        String remark = req.getParameter("remark");
        String pgtypeid = req.getParameter("pgtypeid");
        String startTime =req.getParameter("starttime");
        String endTime =req.getParameter("endtime");
        String dateType = req.getParameter("datetype");
        String issuing_bank = req.getParameter("issuing_bank");
        String cardtype = req.getParameter("cardtype");
        String paymentid = req.getParameter("paymentid");

        //String gateway = "";
        String currency = "";
        String gateway_name = "";

        if (req.getParameter("pgtypeid")!=null && req.getParameter("pgtypeid").split("-").length == 3 && !req.getParameter("pgtypeid").equalsIgnoreCase(""))
        {
            gateway = req.getParameter("pgtypeid").split("-")[2];
            currency = req.getParameter("pgtypeid").split("-")[1];
            gateway_name = req.getParameter("pgtypeid").split("-")[0];
        }
        if (!(req.getParameter("pgtypeid").split("-").length == 3))
        {
            gateway_name = req.getParameter("pgtypeid");
        }

        Calendar rightNow = Calendar.getInstance();

        if (fdate == null) fdate = "" + 1;
        if (tdate == null) tdate = "" + rightNow.get(Calendar.DATE);

        if (fmonth == null) fmonth = "" + (rightNow.get(Calendar.MONTH));
        if (tmonth == null) tmonth = "" + (rightNow.get(Calendar.MONTH));

        if (fyear == null) fyear = "" + rightNow.get(Calendar.YEAR);
        if (tyear == null) tyear = "" + rightNow.get(Calendar.YEAR);

        startTime=startTime.trim();
        endTime=endTime.trim();

        if (!functions.isValueNull(startTime))
        {
            startTime="00:00:00";
        }
        if (!functions.isValueNull(endTime))
        {
            endTime="23:59:59";
        }

        String startTimeArr[]=startTime.split(":");
        String endTimeArr[]=endTime.split(":");

        String fdtstamp=  Functions.converttomillisec(fmonth, fdate, fyear, startTimeArr[0], startTimeArr[1], startTimeArr[2]);
        String tdtstamp= Functions.converttomillisec(tmonth, tdate, tyear, endTimeArr[0], endTimeArr[1], endTimeArr[2]);

        boolean archive = Boolean.valueOf(req.getParameter("archive")).booleanValue();
        res.setContentType("text/html");
        req.setAttribute("fdtstamp", fdtstamp);
        req.setAttribute("tdtstamp", tdtstamp);
        req.setAttribute("pgtypeid",gateway);
        req.setAttribute("toid",toid);
        req.setAttribute("accountid",accountid);

        PrintWriter out = res.getWriter();

        //Functions fn=new Functions();
        int pageno = Functions.convertStringtoInt(req.getParameter("SPageno"), 1);
        int records = Functions.convertStringtoInt(req.getParameter("SRecords"), 30);

        StringBuffer trackingIds = new StringBuffer();
        if (functions.isValueNull(trackingid))
        {
            List<String> trackingidList=null;
            if(trackingid.contains(","))
            {
                trackingidList  = Arrays.asList(trackingid.split(","));
            }
            else
            {
                trackingidList= Arrays.asList(trackingid.split(" "));
            }

            int i = 0;
            Iterator itr = trackingidList.iterator();
            while (itr.hasNext())
            {
                if (i != 0)
                {
                    trackingIds.append(",");
                }
                trackingIds.append("" + itr.next() + "");
                i++;
            }
        }
        try
        {
            Set<String> gatewayTypeSet = GatewayTypeService.getGatewayHash(gateway);
            if (cardpresent.equals("CP"))
            {
                Date date6=new Date();
                log.error("cardPresentlistTransactions startTime---" + date6.getTime());
                hash = transactionManager.cardPresentlistTransactions(toid, trackingIds.toString(), name, desc, orderdesc, amount, refundamount, firstfourofccnum, lastfourofccnum, emailaddr, tdtstamp, fdtstamp, status, records, pageno, perfectmatch, archive, gatewayTypeSet, remark, cardtype, issuing_bank, statusflag, gateway_name, currency, accountid, paymentid, dateType );
                log.error("cardPresentlistTransactions End time--->" + (new Date()).getTime());
                log.error("cardPresentlistTransactions Diff time--->" + ((new Date()).getTime() - date6.getTime()));
            }
            else
            {
                Date date7=new Date();
                log.error("listTransactions startTime---" + date7.getTime());
                hash = transactionManager.listTransactions(toid, trackingIds.toString(), name, desc, orderdesc, amount, refundamount, firstfourofccnum, lastfourofccnum, emailaddr, tdtstamp, fdtstamp, status, records, pageno, perfectmatch, archive, gatewayTypeSet, remark, cardtype, issuing_bank, statusflag, gateway_name, currency, accountid,paymentid, dateType ,arn,rrn,auth);
                log.error("listTransactions End time--->" + (new Date()).getTime());
                log.error("listTransactions Diff time--->" + ((new Date()).getTime() - date7.getTime()));
            }
            req.setAttribute("transactionsdetails", hash);
        }
        catch (Exception e)
        {   log.error("Exception:::: errror in doPost",e);
            Functions.NewShowConfirmation1("Error", "Internal System Error while getting list of Transactions");
        }
        RequestDispatcher rd = req.getRequestDispatcher("/transactions.jsp?ctoken="+user.getCSRFToken());
        rd.forward(req, res);
        log.error("TransactionDetails End time--->" + (new Date()).getTime());
        log.error("TransactionDetails Diff time--->" + ((new Date()).getTime() - date1.getTime()));//After clicking on search without trackingId
    }

    private void validateOptionalParameter(HttpServletRequest req) throws ValidationException
    {
        InputValidator inputValidator = new InputValidator();
        List<InputFields> inputFieldsListMandatory = new ArrayList<InputFields>();
        inputFieldsListMandatory.add(InputFields.COMMASEPRATED_TRACKINGID_TRA);
        inputFieldsListMandatory.add(InputFields.ACCOUNTID_SMALL);
        inputFieldsListMandatory.add(InputFields.NAME_SMALL);
        inputFieldsListMandatory.add(InputFields.DESC);
        inputFieldsListMandatory.add(InputFields.AMOUNT);
        inputFieldsListMandatory.add(InputFields.FIRSTFOURCCNUM);
        inputFieldsListMandatory.add(InputFields.LASTFOURCCNUM);
        inputFieldsListMandatory.add(InputFields.EMAILADDR);
        inputFieldsListMandatory.add(InputFields.ORDERDESC);
        inputFieldsListMandatory.add(InputFields.STATUS_LIST);
        inputFieldsListMandatory.add(InputFields.TOID);
        inputFieldsListMandatory.add(InputFields.CARD_TYPE);
        inputFieldsListMandatory.add(InputFields.CARD_ISSUING_BANK);
        inputFieldsListMandatory.add(InputFields.FROMDATE);
        inputFieldsListMandatory.add(InputFields.TODATE);
        inputFieldsListMandatory.add(InputFields.FROMMONTH);
        inputFieldsListMandatory.add(InputFields.TOMONTH);
        inputFieldsListMandatory.add(InputFields.FROMYEAR);
        inputFieldsListMandatory.add(InputFields.TOYEAR);
        //inputFieldsListMandatory.add(InputFields.GATEWAY);
        inputFieldsListMandatory.add(InputFields.STARTTIME);
        inputFieldsListMandatory.add(InputFields.ENDTIME);
        inputFieldsListMandatory.add(InputFields.PAGENO);
        inputFieldsListMandatory.add(InputFields.RECORDS);

        inputValidator.InputValidations(req,inputFieldsListMandatory,true);
    }

}