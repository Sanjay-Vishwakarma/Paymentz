import com.directi.pg.Admin;
import com.directi.pg.Logger;
import com.manager.BankManager;
import com.manager.GatewayManager;
import com.manager.vo.ActionVO;
import com.manager.vo.BankWireManagerVO;
import com.manager.vo.gatewayVOs.GatewayAccountVO;
import com.manager.vo.gatewayVOs.GatewayTypeVO;
import com.payment.validators.InputFields;
import com.payment.validators.InputValidator;
import org.owasp.esapi.User;
import org.owasp.esapi.ValidationErrorList;
import org.owasp.esapi.errors.ValidationException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


/**
 * Created with IntelliJ IDEA.
 * User: Administrator
 * Date: 10/10/14
 * Time: 3:10 PM
 * To change this template use File | Settings | File Templates.
 */
public class UpdateBankWireManager extends HttpServlet
{
    private static Logger logger = new Logger(UpdateBankWireManager.class.getName());
    public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException,ServletException
    {
        HttpSession session = request.getSession();

        if (!Admin.isLoggedIn(session))
        {   logger.debug("Admin is logout ");
            response.sendRedirect("/icici/logout.jsp");
            return;
        }

        User user =  (User)session.getAttribute("ESAPIUserSessionKey");
        BankManager bankManager = new BankManager();
        GatewayManager gatewayManager=new GatewayManager();
        BankWireManagerVO bankWireManagerVO = new BankWireManagerVO();
        ActionVO actionVO = new ActionVO();
        ValidationErrorList validationErrorList=null;

        RequestDispatcher rdError = request.getRequestDispatcher("/bankWireManager.jsp?MES=ERR&ctoken="+user.getCSRFToken());
        RequestDispatcher rdSuccess = request.getRequestDispatcher("/bankWireManager.jsp?UPDATE=Success&ctoken="+user.getCSRFToken());

        try
        {
            //validation for the parameters
            validationErrorList=validateMandatoryParameter(request);
            if(request.getParameter("action").contains("_Add"))
            {
                validateAddParameters(request,validationErrorList);
            }
            else
            {
                logger.debug("inside else condition of add action");
                validateUpdateParameter(request,validationErrorList);
            }
            if(!validationErrorList.isEmpty())
            {
                if(session.getAttribute("singleBankWireManagerVO")!=null)
                {
                    actionVO.setEdit();
                    request.setAttribute("actionVO",actionVO);
                    bankWireManagerVO= (BankWireManagerVO) session.getAttribute("singleBankWireManagerVO");
                    request.setAttribute("singleBankWireManagerVO",bankWireManagerVO);
                }

                request.setAttribute("error", validationErrorList);
                rdError.forward(request,response);
                return;
            }

            actionVO.setActionCriteria(request.getParameter("action"));
            actionVO.setYesOrNoCriteria(request.getParameter("isdaylight"));
            bankWireManagerVO.setBankwiremanagerId(request.getParameter("bankwiremangerid"));
            bankWireManagerVO.setSettleddate(request.getParameter("settlementdate"));
            if (!"0".equalsIgnoreCase(request.getParameter("pgtypeid")))
            bankWireManagerVO.setPgtypeId(request.getParameter("pgtypeid"));

            if (!"0".equalsIgnoreCase(request.getParameter("accountid")))
            bankWireManagerVO.setAccountId(request.getParameter("accountid"));

            bankWireManagerVO.setBank_start_date(request.getParameter("expected_startDate"));
            bankWireManagerVO.setBank_end_date(request.getParameter("expected_endDate"));
            bankWireManagerVO.setServer_start_date(request.getParameter("actual_startDate"));
            System.out.println("actual Start date----------->" + request.getParameter("actual_startDate"));
            System.out.println("actual End date----------->" + request.getParameter("actual_endDate"));
            bankWireManagerVO.setServer_end_date(request.getParameter("actual_endDate"));
            bankWireManagerVO.setProcessing_amount(request.getParameter("processingamount"));
            bankWireManagerVO.setGrossAmount(request.getParameter("grossamount"));
            bankWireManagerVO.setNetfinal_amount(request.getParameter("netfinalamout"));
            bankWireManagerVO.setUnpaid_amount(request.getParameter("unpaidamount"));
            bankWireManagerVO.setIsrollingreservereleasewire(request.getParameter("isrollingreservereleasewire"));
            bankWireManagerVO.setRollingreservereleasedateupto(request.getParameter("rollingreservedateupto")) ;
            bankWireManagerVO.setDeclinedcoveredupto(request.getParameter("declinedcoveredupto"));
            bankWireManagerVO.setChargebackcoveredupto(request.getParameter("chargebackcoveredupto"));
            bankWireManagerVO.setReversedCoveredUpto(request.getParameter("reversedcoveredupto"));
            bankWireManagerVO.setBanksettlement_report_file(request.getParameter("settlement_report_file"));
            bankWireManagerVO.setBanksettlement_transaction_file(request.getParameter("settlement_transaction_file"));
            bankWireManagerVO.setSettlementCronExceuted(request.getParameter("issettlementcron"));
            bankWireManagerVO.setPayoutCronExcuted(request.getParameter("ispayoutcron"));
            bankWireManagerVO.setIsPartnerCommCronExecuted(request.getParameter("ispartnercommcronexecuted"));
            bankWireManagerVO.setIsAgentCommCronExecuted(request.getParameter("isagentcommcronexecuted"));
            bankWireManagerVO.setIspaid(request.getParameter("isPaid"));
            bankWireManagerVO.setBank_start_timestamp(request.getParameter("expected_startTime"));
            bankWireManagerVO.setBank_end_timestamp(request.getParameter("expected_endTime"));
            bankWireManagerVO.setServer_start_timestamp(request.getParameter("actual_startTime"));
            bankWireManagerVO.setServer_end_timestamp(request.getParameter("actual_endTime"));
            bankWireManagerVO.setSettled_timestamp(request.getParameter("settlementtime"));
            bankWireManagerVO.setDeclinedcoveredtime(request.getParameter("declinedcoveredtime"));
            bankWireManagerVO.setChargebackcoveredtime(request.getParameter("chargebackcoveredtime"));
            bankWireManagerVO.setReversedcoveredtime(request.getParameter("reversedcoveredtime"));
            bankWireManagerVO.setRollingreservetime(request.getParameter("rollingRelease_Time"));

            GatewayAccountVO gatewayAccountVO=gatewayManager.getGatewayAccountForAccountId(bankWireManagerVO.getAccountId());
            GatewayTypeVO gatewayTypeVO=gatewayManager.getGatewayTypeForPgTypeId(gatewayAccountVO.getGatewayAccount().getPgTypeId());

            bankWireManagerVO.setPgtypeId(gatewayAccountVO.getGatewayAccount().getPgTypeId());
            bankWireManagerVO.setCurrency(gatewayAccountVO.getGatewayAccount().getCurrency());
            bankWireManagerVO.setMid(gatewayAccountVO.getGatewayAccount().getMerchantId());

            boolean b=bankManager.updateBankWireManager(bankWireManagerVO, actionVO, gatewayTypeVO);
            if(b)
            {
                request.setAttribute("actionVO",actionVO);
                request.setAttribute("singleBankWireManagerVO",bankWireManagerVO);
                rdSuccess.forward(request,response);
            }
            else
            {
                validationErrorList = new ValidationErrorList();
                validationErrorList.addError("System Error",new ValidationException("System Error","Due to internal Issue"));
                request.setAttribute("singleBankWireManagerVO",bankWireManagerVO);
                request.setAttribute("error",validationErrorList);
                rdError.forward(request,response);
            }
        }
        catch (Exception e)
        {
            validationErrorList = new ValidationErrorList();
            validationErrorList.addError("Generic Exception",new ValidationException("Please enter appropriate parameter","Due to internal Issue"));
            request.setAttribute("error",validationErrorList);
            request.setAttribute("actionVO",actionVO);
            request.setAttribute("singleBankWireManagerVO",bankWireManagerVO);
            rdError.forward(request,response);
            logger.error("main class exception ::",e);
        }

    }
    public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException
    {
        doPost(request, response);
    }

    private ValidationErrorList validateMandatoryParameter(HttpServletRequest req)
    {
        InputValidator inputValidator = new InputValidator();
        List<InputFields> inputFieldsListMandatory = new ArrayList<InputFields>();


        /*inputFieldsListMandatory.add(InputFields.PGTYPEID);*/
        inputFieldsListMandatory.add(InputFields.ACCOUNTID_SMALL);
        inputFieldsListMandatory.add(InputFields.EXPECTED_STARTDATE);
        inputFieldsListMandatory.add(InputFields.EXPECTED_ENDDATE);
        inputFieldsListMandatory.add(InputFields.PROCESSINGAMOUNT);
        inputFieldsListMandatory.add(InputFields.GROSSAMOUNT);
        inputFieldsListMandatory.add(InputFields.NETFINALAMOUNT);
        inputFieldsListMandatory.add(InputFields.UNPAIDAMOUNT);
        inputFieldsListMandatory.add(InputFields.ISROLLINGRESERVERELAEASEWIRE);
        inputFieldsListMandatory.add(InputFields.ROLLINGRESERVEDATEUPTO);
        inputFieldsListMandatory.add(InputFields.ROLLINGRELEASETIME);
        inputFieldsListMandatory.add(InputFields.DECLINEDCOVEREDDATEUPTO);
        inputFieldsListMandatory.add(InputFields.DECLINECOVERTIME);
        inputFieldsListMandatory.add(InputFields.CHARGEBACKCOVEREDDATEUPTO);
        inputFieldsListMandatory.add(InputFields.CHARGEBACKCOVEREDTIME);
        inputFieldsListMandatory.add(InputFields.REVERSEDCOVEREDDATEUPTO);
        inputFieldsListMandatory.add(InputFields.REVERSECOVEREDTIME);
        inputFieldsListMandatory.add(InputFields.ISPAID);
        //temporary details
        inputFieldsListMandatory.add(InputFields.EXPECTED_STARTTIME);
        inputFieldsListMandatory.add(InputFields.EXPECTED_ENDTIME);
        //till here
        inputFieldsListMandatory.add(InputFields.SMALL_ACTION);

        ValidationErrorList validationErrorList = new ValidationErrorList();
        inputValidator.InputValidations(req,inputFieldsListMandatory,validationErrorList,false);

        List<InputFields> inputFieldsListOptional = new ArrayList<InputFields>();
        inputFieldsListOptional.add(InputFields.SETTLEMENTREPORTFILE);
        inputFieldsListOptional.add(InputFields.SETTLEMENTTRANSACTIONFILE);
        inputValidator.InputValidations(req,inputFieldsListOptional,validationErrorList,true);
        return validationErrorList;
    }
    private void validateUpdateParameter(HttpServletRequest request,ValidationErrorList validationErrorList)
    {
        InputValidator inputValidator = new InputValidator();

        List<InputFields> inputFieldsListCondition = new ArrayList<InputFields>();
        inputFieldsListCondition.add(InputFields.SETTLEMENTDATE);
        inputFieldsListCondition.add(InputFields.SETTLEMENTIME);
        inputFieldsListCondition.add(InputFields.BANKWIREMANGERID);
        inputFieldsListCondition.add(InputFields.ACTUAL_SARTDATE);
        inputFieldsListCondition.add(InputFields.ACTUAL_ENDDATE);
        inputFieldsListCondition.add(InputFields.ISSETTLEMENTCRONEXECCUTED);
        inputFieldsListCondition.add(InputFields.ISPAYOUCRONEXECUTED);
        //temporary has to be removed
        inputFieldsListCondition.add(InputFields.ACTUAL_STARTTIME);
        inputFieldsListCondition.add(InputFields.ACTUAL_ENDTIME);

        inputValidator.InputValidations(request,inputFieldsListCondition,validationErrorList,false);
        //return validationErrorList;
    }
    private void validateAddParameters(HttpServletRequest request,ValidationErrorList validationErrorList)
    {
        InputValidator inputValidator = new InputValidator();

        List<InputFields> inputFieldsListCondition = new ArrayList<InputFields>();
        inputFieldsListCondition.add(InputFields.ISDAYLIGHT);


        inputValidator.InputValidations(request,inputFieldsListCondition,validationErrorList,false);
        //return validationErrorList;
    }
}
