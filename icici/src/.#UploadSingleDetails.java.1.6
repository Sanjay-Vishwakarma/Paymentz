import com.directi.pg.Admin;
import com.directi.pg.Database;
import com.directi.pg.Functions;
import com.directi.pg.Logger;
import com.directi.pg.core.GatewayAccount;
import com.directi.pg.core.GatewayAccountService;
import com.manager.WhiteListManager;
import com.manager.dao.MerchantDAO;
import com.manager.vo.MerchantDetailsVO;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.User;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
/**
 * Created with IntelliJ IDEA.
 * User:Mahima Rai.
 * Date:07/04/18
 * Time: 1:51 PM
 * To change this template use File | Settings | File Templates.
 */
public class UploadSingleDetails extends HttpServlet
{
    private static Logger log = new Logger(UploadSingleDetails.class.getName());
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request, response);
    }
    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("ESAPIUserSessionKey");
        StringBuffer sf = new StringBuffer();
        StringBuilder sErrorMessage = new StringBuilder();
        StringBuilder sSuccessMessage = new StringBuilder();
        Functions functions = new Functions();
        Connection conn=null;

        boolean isRecordAvailable = false;
        if (!Admin.isLoggedIn(session))
        {
            log.debug("Admin is logout ");
            res.sendRedirect("/icici/logout.jsp");
            return;
        }
        String memberId = "";
        String accountId ="";
        String emailAddress = "";
        String firstSix = "";
        String lastFour = "";
        String EOL = "<br>";

        accountId = req.getParameter("accountid");
        memberId = req.getParameter("toid");
        firstSix = req.getParameter("firstsix");
        lastFour = req.getParameter("lastfour");
        emailAddress = req.getParameter("emailaddr");

        WhiteListManager whiteListManager = new WhiteListManager();
        MerchantDAO merchantDAO = new MerchantDAO();
        try
        {
            if (functions.isValueNull(emailAddress)){

                if (!ESAPI.validator().isValidInput("emailaddr", emailAddress, "Email", 50, false))
                {
                    log.debug("Invalid email address");
                    sErrorMessage.append("Invalid Email or Email should not be empty" + EOL);
                }
            }
            if(functions.isValueNull(firstSix) && functions.isValueNull(lastFour))  {

                if (!ESAPI.validator().isValidInput("firstsix", firstSix, "Numbers", 50, false))
                {
                    log.debug("Invalid firstsix");
                    sErrorMessage.append("Invalid card number firstsix or firstsix should not be empty" + EOL);
                }
                if (!ESAPI.validator().isValidInput("lastfour", lastFour, "Numbers", 50, false))
                {
                    log.debug("Invalid lastfour");
                    sErrorMessage.append("Invalid card number lastfour or lastfour should not be empty" + EOL);
                }
            }
            if (!ESAPI.validator().isValidInput("toid", memberId, "Numbers", 50, false))
            {
                log.debug("Invalid memberid");
                sErrorMessage.append("Invalid memberID or memberID should not be empty" + EOL);
            }
            if (!ESAPI.validator().isValidInput("accountid", accountId, "Numbers", 50, false))
            {
                log.debug("Invalid accountid");
                sErrorMessage.append("Invalid accountID or accountID should not be empty" + EOL);
            }
            if(sErrorMessage.length()>0){
                String redirectpage = "/uploadsingledetail.jsp?ctoken=" + user.getCSRFToken();
                req.setAttribute("sErrorMessage", sErrorMessage.toString());
                RequestDispatcher rd = req.getRequestDispatcher(redirectpage);
                rd.forward(req, res);
                return;
            }

            MerchantDetailsVO merchantDetailsVO = merchantDAO.getMemberDetails(memberId);
            String level = merchantDetailsVO.getCardWhitelistLevel();
            String companyName = merchantDetailsVO.getCompany_name();

            GatewayAccount account = GatewayAccountService.getGatewayAccount(accountId);
            String gateway = account.getGateway();

            if ((functions.isValueNull(firstSix) && functions.isValueNull(lastFour)) || (functions.isValueNull(emailAddress)))
            {
                if ("Member".equals(level))
                {
                    isRecordAvailable = whiteListManager.isRecordAvailableInSystem(firstSix, lastFour, emailAddress);
                }
                else if ("Group".equals(level))
                {
                    if (functions.isValueNull(emailAddress))
                    {
                        isRecordAvailable = whiteListManager.isRecordAvailableOnOtherGroup(firstSix, lastFour, emailAddress, gateway, companyName);
                    }
                    else
                    {
                        isRecordAvailable = whiteListManager.isRecordAvailableOnOtherGroup(firstSix, lastFour, gateway, companyName);
                    }
                }
                else
                {
                    if (functions.isValueNull(emailAddress))
                    {
                        isRecordAvailable = whiteListManager.isRecordAvailableForMember(memberId, accountId, firstSix, lastFour, emailAddress);
                    }
                    else
                    {
                        isRecordAvailable = whiteListManager.isRecordAvailableForMember(memberId, accountId, firstSix, lastFour);
                    }
                }
                if (!isRecordAvailable)
                {
                    boolean isRecordInserted = whiteListManager.addCard(firstSix, lastFour, emailAddress, accountId, memberId,"","","");
                    sSuccessMessage.append("Records Updated Successfully");
                    req.setAttribute("success","Records updated");
                }
                else {
                    sErrorMessage.append("Records Already Available");
                    req.setAttribute("error","not update");
                }
            }
            else
            {
                sErrorMessage.append("Please select the Card Details OR Email Address" + EOL);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            Database.closeConnection(conn);
        }
        StringBuilder chargeBackMessage = new StringBuilder();
        chargeBackMessage.append(sSuccessMessage.toString());
        chargeBackMessage.append("<BR/>");
        chargeBackMessage.append(sErrorMessage.toString());

        String redirectpage = "/uploadsingledetail.jsp?ctoken=" + user.getCSRFToken();
        req.setAttribute("sErrorMessage", sErrorMessage.toString());
        req.setAttribute("sSuccessMessage", chargeBackMessage.toString());
        RequestDispatcher rd = req.getRequestDispatcher(redirectpage);
        rd.forward(req, res);
    }
}