
package payment;

import com.directi.pg.TransactionLogger;
import com.directi.pg.core.GatewayAccountService;
import com.manager.PaymentManager;
import com.manager.TransactionManager;
import com.manager.vo.MerchantDetailsVO;
import com.manager.vo.TransactionDetailsVO;
import com.payment.Ecommpay.EcommpayPaymentGateway;
import com.directi.pg.*;
import com.payment.Enum.PZProcessType;
import com.payment.PZTransactionStatus;
import com.payment.common.core.CommResponseVO;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.statussync.StatusSyncDAO;
import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.util.TreeMap;


/**
 * Created by Sagar on 6/17/2020.
 */




public class EcommpayBackEndServlet extends HttpServlet
{
    TransactionLogger transactionLogger = new TransactionLogger(EcommpayBackEndServlet.class.getName());
    private static Logger logger = new Logger(EcommpayBackEndServlet.class.getName());


    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doService(request, response);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doService(request, response);
    }

    public void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        transactionLogger.error("-----Inside EcommpayBackEndServlet-----");
        Connection con = null;
        Functions functions = new Functions();
        StringBuilder responseMsg = new StringBuilder();
        MerchantDetailsVO merchantDetailsVO = new MerchantDetailsVO();
        StatusSyncDAO statusSyncDAO = new StatusSyncDAO();

        PaymentManager paymentManager = new PaymentManager();
        try
        {
            BufferedReader br = request.getReader();
            String str;
            while ((str = br.readLine()) != null)
            {
                responseMsg.append(str);
            }

            transactionLogger.error("-----responseMsg-----" + responseMsg.toString());

            if (responseMsg != null)
            {
                JSONObject jsonObject = new JSONObject(responseMsg.toString());
                String trackingId = "";
                String transactionId = "";
                String type = "";
                String customer = "";
                String paymentAmount = "";
                String currency = "";
                String status = "";
                String date = "";
                String message = "";
                String toId = "";
                String accountId = "";
                String dbStatus = "";
                String billingDesc = "";
                String confirmStatus = "";
                String notificationUrl = "";
                String updatedStatus = "";
                String code="";
                String eci="";
                String field="";

                if (jsonObject != null)
                {
                    if(jsonObject.has("payment"))
                    {
                        if(jsonObject.getJSONObject("payment").has("id"))
                        {
                           trackingId=jsonObject.getJSONObject("payment").getString("id");
                        }
                        if(jsonObject.getJSONObject("payment").has("status"))
                        {
                            status=jsonObject.getJSONObject("payment").getString("status");
                        }
                        if(jsonObject.getJSONObject("payment").has("date"))
                        {
                            date=jsonObject.getJSONObject("payment").getString("date");
                        }
                    }
                    if(jsonObject.has("operation"))
                    {
                        if(jsonObject.getJSONObject("operation").has("type"))
                        {
                            type=jsonObject.getJSONObject("operation").getString("type");
                        }
                        if(jsonObject.getJSONObject("operation").has("code"))
                        {
                            code=jsonObject.getJSONObject("operation").getString("code");
                        }
                        if(jsonObject.getJSONObject("operation").has("message"))
                        {
                            message=jsonObject.getJSONObject("operation").getString("message");
                        }
                        if(jsonObject.getJSONObject("operation").has("eci"))
                        {
                            eci=jsonObject.getJSONObject("operation").getString("eci");
                        }
                        if (jsonObject.getJSONObject("operation").getJSONObject("provider").has("payment_id"))
                        {
                            transactionId = jsonObject.getJSONObject("operation").getJSONObject("provider").getString("payment_id");
                        }
                    }

                    if(jsonObject.has("errors"))
                    {
                        JSONArray jsonArray = jsonObject.getJSONArray("errors");
                        if(jsonArray!=null)
                        {
                            for(int i=0;i<jsonArray.length();i++)
                            {
                                JSONObject errors=jsonArray.getJSONObject(i);
                                if(i!=0)
                                {
                                    message = message + "|" + errors.getString("field") + " " + errors.getString("message");
                                }
                                else
                                {
                                    message=errors.getString("field")+" "+errors.getString("message");
                                }
                            }
                        }
                    }
                    transactionLogger.error("trackingId-->" + trackingId);
                    transactionLogger.error("transactionId-->" + transactionId);
                    transactionLogger.error("status-->" + status);

                    if (functions.isValueNull(trackingId))
                    {
                        TransactionManager transactionManager = new TransactionManager();
                        ActionEntry entry = new ActionEntry();
                        CommResponseVO commResponseVO = new CommResponseVO();
                        AuditTrailVO auditTrailVO = new AuditTrailVO();
                        PrintWriter pWriter = response.getWriter();
                        TransactionDetailsVO transactionDetailsVO = transactionManager.getTransDetailFromCommon(trackingId);
                        if (transactionDetailsVO != null)
                        {
                            toId = transactionDetailsVO.getToid();
                            accountId = transactionDetailsVO.getAccountId();
                            dbStatus = transactionDetailsVO.getStatus();
                            paymentAmount = transactionDetailsVO.getAmount();

                            if (functions.isValueNull(transactionDetailsVO.getCcnum()))
                                transactionDetailsVO.setCcnum(PzEncryptor.decryptPAN(transactionDetailsVO.getCcnum()));
                            if (functions.isValueNull(transactionDetailsVO.getExpdate()))
                            {
                                transactionDetailsVO.setExpdate(PzEncryptor.decryptExpiryDate(transactionDetailsVO.getExpdate()));
                            }


                            transactionLogger.error("DbStatus------" + dbStatus);
                            if (PZTransactionStatus.AUTH_STARTED.toString().equalsIgnoreCase(dbStatus))
                            {

                                if (functions.isValueNull(status)&& !"awaiting 3ds result".equalsIgnoreCase(status) &&!"awaiting capture".equalsIgnoreCase(status) &&!"processing".equalsIgnoreCase(status))
                                {
                                    auditTrailVO.setActionExecutorName("AcquirerBackEnd");
                                    auditTrailVO.setActionExecutorId(toId);
                                    StringBuffer dbBuffer = new StringBuffer();
                                    con = Database.getConnection();

                                    if (type.equalsIgnoreCase("sale"))
                                    {
                                        if ("success".equalsIgnoreCase(status))
                                        {
                                            status = "success";
                                            billingDesc = GatewayAccountService.getGatewayAccount(accountId).getDisplayName();

                                            commResponseVO.setDescription(message);
                                            commResponseVO.setStatus(status);
                                            commResponseVO.setRemark(message);
                                            commResponseVO.setDescriptor(billingDesc);
                                            commResponseVO.setCurrency(currency);
                                            commResponseVO.setTmpl_Amount(paymentAmount);
                                            commResponseVO.setTmpl_Currency(transactionDetailsVO.getCurrency());
                                            commResponseVO.setTransactionType(type);
                                            commResponseVO.setTransactionId(transactionId);
                                            commResponseVO.setEci(eci);
                                            commResponseVO.setBankTransactionDate(date);
                                            commResponseVO.setErrorCode(code);

                                            confirmStatus = "Y";
                                            dbStatus = PZTransactionStatus.CAPTURE_SUCCESS.toString();

                                            transactionLogger.error("dbBuffer->"+dbBuffer);
                                            dbBuffer.append("update transaction_common set captureamount='" + paymentAmount + "',currency='" + currency + "' ,paymentid='" + transactionId + "',status='capturesuccess'");
                                            entry.actionEntryForCommon(trackingId, paymentAmount, ActionEntry.ACTION_CAPTURE_SUCCESSFUL, ActionEntry.STATUS_CAPTURE_SUCCESSFUL, commResponseVO, auditTrailVO, null);
                                            updatedStatus = PZTransactionStatus.CAPTURE_SUCCESS.toString();
                                        }
                                        else
                                        {
                                            confirmStatus = "N";
                                            status = "failed";
                                            commResponseVO.setStatus(status);
                                            commResponseVO.setDescription(message);
                                            commResponseVO.setRemark(message);
                                            commResponseVO.setCurrency(currency);
                                            commResponseVO.setTmpl_Amount(paymentAmount);
                                            commResponseVO.setTmpl_Currency(transactionDetailsVO.getCurrency());
                                            commResponseVO.setTransactionType(type);
                                            commResponseVO.setTransactionId(transactionId);
                                            commResponseVO.setEci(eci);
                                            commResponseVO.setBankTransactionDate(date);
                                            commResponseVO.setErrorCode(code);


                                            dbStatus = PZTransactionStatus.AUTH_FAILED.toString();
                                            transactionLogger.error("dbBuffer->"+dbBuffer);
                                            dbBuffer.append("update transaction_common set status='authfailed',paymentid='" + transactionId + "'");
                                            entry.actionEntryForCommon(trackingId, paymentAmount, ActionEntry.ACTION_AUTHORISTION_FAILED, ActionEntry.STATUS_AUTHORISTION_FAILED, commResponseVO, auditTrailVO, null);
                                            updatedStatus = PZTransactionStatus.AUTH_FAILED.toString();
                                        }
                                    }
                                       else if (type.equalsIgnoreCase("auth"))
                                        {
                                            if ("success".equalsIgnoreCase(status))
                                            {
                                                status = "success";
                                                billingDesc = GatewayAccountService.getGatewayAccount(accountId).getDisplayName();

                                                commResponseVO.setDescription(message);
                                                commResponseVO.setStatus(status);
                                                commResponseVO.setRemark(message);
                                                commResponseVO.setDescriptor(billingDesc);
                                                commResponseVO.setCurrency(currency);
                                                commResponseVO.setTmpl_Amount(paymentAmount);
                                                commResponseVO.setTmpl_Currency(transactionDetailsVO.getCurrency());
                                                commResponseVO.setTransactionType(type);
                                                commResponseVO.setTransactionId(transactionId);
                                                commResponseVO.setEci(eci);
                                                commResponseVO.setBankTransactionDate(date);
                                                commResponseVO.setErrorCode(code);


                                                confirmStatus = "Y";
                                                dbStatus = PZTransactionStatus.AUTH_SUCCESS.toString();
                                                transactionLogger.error("dbBuffer->"+dbBuffer);
                                                dbBuffer.append("update transaction_common set currency='" + currency + "' ,paymentid='" + transactionId + "',status='authsuccessful'");
                                                entry.actionEntryForCommon(trackingId, paymentAmount, ActionEntry.ACTION_AUTHORISTION_SUCCESSFUL, ActionEntry.STATUS_AUTHORISTION_SUCCESSFUL, commResponseVO, auditTrailVO, null);
                                                updatedStatus = PZTransactionStatus.AUTH_SUCCESS.toString();
                                            }
                                            else
                                            {
                                                confirmStatus = "N";
                                                status = "failed";
                                                commResponseVO.setStatus(status);
                                                commResponseVO.setDescription(message);
                                                commResponseVO.setRemark(message);
                                                commResponseVO.setCurrency(currency);
                                                commResponseVO.setTmpl_Amount(paymentAmount);
                                                commResponseVO.setTmpl_Currency(transactionDetailsVO.getCurrency());
                                                commResponseVO.setTransactionType(type);
                                                commResponseVO.setTransactionId(transactionId);
                                                commResponseVO.setEci(eci);
                                                commResponseVO.setBankTransactionDate(date);
                                                commResponseVO.setErrorCode(code);

                                                dbStatus = PZTransactionStatus.AUTH_FAILED.toString();
                                                transactionLogger.error("dbBuffer->"+dbBuffer);
                                                dbBuffer.append("update transaction_common set status='authfailed',paymentid='" + transactionId + "'");

                                                entry.actionEntryForCommon(trackingId, paymentAmount, ActionEntry.ACTION_AUTHORISTION_FAILED, ActionEntry.STATUS_AUTHORISTION_FAILED, commResponseVO, auditTrailVO, null);
                                                updatedStatus = PZTransactionStatus.AUTH_FAILED.toString();
                                            }

                                        }
                                        dbBuffer.append(" ,remark='" + message + "' where trackingid = " + trackingId);
                                        Database.executeUpdate(dbBuffer.toString(), con);
                                        statusSyncDAO.updateAllTransactionFlowFlag(trackingId, dbStatus);
                                    }
                                if (!functions.isValueNull(updatedStatus))
                                {
                                    updatedStatus = dbStatus;
                                }
                                if (functions.isValueNull(notificationUrl))
                                {
                                    transactionLogger.error("Inside sending notification---" + notificationUrl);
                                    AsyncNotificationService asyncNotificationService = AsyncNotificationService.getInstance();
                                    transactionDetailsVO.setBillingDesc(billingDesc);
                                    asyncNotificationService.sendNotification(transactionDetailsVO, trackingId, updatedStatus, message, "");
                                }
                                }

                            else if(type.equalsIgnoreCase("refund"))
                            {
                                if("partially refunded".equalsIgnoreCase(status)||"refunded".equalsIgnoreCase(status))
                                {

                                }

                            }

                                response.setStatus(200);
                                return;
                            }
                        }
                    }
                }

        }

        catch (PZDBViolationException e)
        {
            transactionLogger.error("PZDBViolationException--", e);
        }
        catch (SystemError systemError)
        {
            transactionLogger.error("SystemError--", systemError);
        }
        catch (JSONException e)
        {
            transactionLogger.error("JSONException--" , e);
        }
    }
}