package payment;

import com.directi.pg.*;
import com.directi.pg.core.GatewayAccountService;
import com.directi.pg.core.valueObjects.GenericAddressDetailsVO;
import com.directi.pg.core.valueObjects.GenericCardDetailsVO;
import com.directi.pg.core.valueObjects.GenericTransDetailsVO;
import com.manager.TransactionManager;
import com.manager.dao.MerchantDAO;
import com.manager.vo.MerchantDetailsVO;
import com.manager.vo.TransactionDetailsVO;
import com.payment.Mail.AsynchronousMailService;
import com.payment.Mail.MailEventEnum;
import com.payment.PZTransactionStatus;
import com.payment.common.core.CommResponseVO;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.phoneix.PhoneixUtils;
import com.payment.sms.AsynchronousSmsService;
import com.payment.statussync.StatusSyncDAO;
import com.payment.validators.vo.CommonValidatorVO;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.reference.DefaultEncoder;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.util.Enumeration;

/**
 * Created by Admin on 11/27/2019.
 */
public class PhoneixFrontEndServlet extends HttpServlet
{
    private static TransactionLogger transactionLogger = new TransactionLogger(PhoneixFrontEndServlet.class.getName());
    String ctoken = ESAPI.randomizer().getRandomString(32, DefaultEncoder.CHAR_ALPHANUMERICS);
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doService(request, response);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doService(request, response);
    }

    public void doService(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        transactionLogger.error("-----Inside PhoneixFrontEndServlet---");
        Enumeration enumeration = req.getParameterNames();
        while (enumeration.hasMoreElements())
        {
            String key = (String) enumeration.nextElement();
            String value = req.getParameter(key);

            transactionLogger.error("Name=" + key + "-----Value=" + value);
        }
        HttpSession session=req.getSession();
        Functions functions=new Functions();
        TransactionManager transactionManager=new TransactionManager();
        MerchantDAO merchantDAO=new MerchantDAO();
        MerchantDetailsVO merchantDetailsVO=new MerchantDetailsVO();
        AuditTrailVO auditTrailVO=new AuditTrailVO();
        CommResponseVO commResponseVO=new CommResponseVO();
        ActionEntry entry=new ActionEntry();
        StatusSyncDAO statusSyncDAO = new StatusSyncDAO();
        CommonValidatorVO commonValidatorVO=new CommonValidatorVO();
        GenericTransDetailsVO genericTransDetailsVO=new GenericTransDetailsVO();
        GenericAddressDetailsVO addressDetailsVO=new GenericAddressDetailsVO();
        GenericCardDetailsVO cardDetailsVO=new GenericCardDetailsVO();
        TransactionUtility transactionUtility=new TransactionUtility();
        Connection con=null;
        String trackingId = req.getParameter("trackingId");
        String replyCode = req.getParameter("Reply");
        String replyDesc= req.getParameter("ReplyDesc");
        String replyMessage = PhoneixUtils.getDescription(replyCode);
        String ipAddress = Functions.getIpAddress(req);
        String toId="",accountId="",amount="",orderId="",orderDesc="",redirectUrl="",tmpl_amt="",tmpl_currency="",dbStatus="",payModeId="",cardTypeId="",customerId="",custEmail="",version="",notificationUrl="",
                terminalId="",firstName="",lastName="",ccnum="",expDate="",expMonth="",expYear="",currency="",autoRedirect="",logoName="",partnerName="",isService="",confirmStatus="",status="",billingDesc="",
                message="",updatedStatus="",remark="";

        if(!functions.isValueNull(replyMessage))
            replyMessage=replyDesc;

        try
        {
        TransactionDetailsVO transactionDetailsVO = transactionManager.getTransDetailFromCommon(trackingId);
        if (transactionDetailsVO != null)
        {
            toId = transactionDetailsVO.getToid();
            accountId = transactionDetailsVO.getAccountId();
            amount = transactionDetailsVO.getAmount();
            transactionLogger.debug("amount -------" + amount);
            orderId = transactionDetailsVO.getDescription();
            orderDesc = transactionDetailsVO.getOrderDescription();
            redirectUrl = transactionDetailsVO.getRedirectURL();
            tmpl_amt = transactionDetailsVO.getTemplateamount();
            tmpl_currency = transactionDetailsVO.getTemplatecurrency();
            dbStatus = transactionDetailsVO.getStatus();
            payModeId = transactionDetailsVO.getPaymodeId();
            cardTypeId = transactionDetailsVO.getCardTypeId();
            custEmail = transactionDetailsVO.getEmailaddr();
            customerId = transactionDetailsVO.getCustomerId();
            version = transactionDetailsVO.getVersion();
            notificationUrl = transactionDetailsVO.getNotificationUrl();
            terminalId = transactionDetailsVO.getTerminalId();
            firstName = transactionDetailsVO.getFirstName();
            lastName = transactionDetailsVO.getLastName();
            remark = transactionDetailsVO.getDescription();
            billingDesc = GatewayAccountService.getGatewayAccount(accountId).getDisplayName();
            if (functions.isValueNull(transactionDetailsVO.getCcnum()))
            {
                ccnum = PzEncryptor.decryptPAN(transactionDetailsVO.getCcnum());
            }
            if (functions.isValueNull(transactionDetailsVO.getExpdate()))
            {
                expDate = PzEncryptor.decryptExpiryDate(transactionDetailsVO.getExpdate());
                String temp[] = expDate.split("/");

                if (functions.isValueNull(temp[0]))
                {
                    expMonth = temp[0];
                }
                if (functions.isValueNull(temp[1]))
                {
                    expYear = temp[1];
                }
            }
            merchantDetailsVO = merchantDAO.getMemberDetails(toId);
            if (merchantDetailsVO != null)
            {
                autoRedirect = merchantDetailsVO.getAutoRedirect();
                logoName = merchantDetailsVO.getLogoName();
                partnerName = merchantDetailsVO.getPartnerName();
                isService=merchantDetailsVO.getIsService();
            }
            auditTrailVO.setActionExecutorName("AcquirerFrontEnd");
            auditTrailVO.setActionExecutorId(toId);
            currency = transactionDetailsVO.getCurrency();
            transactionLogger.error("dbStatus-----" + dbStatus);

            if (PZTransactionStatus.AUTH_STARTED.toString().equals(dbStatus) || PZTransactionStatus.AUTHSTARTED_3D.toString().equalsIgnoreCase(dbStatus))
            {
                StringBuffer dbBuffer = new StringBuffer();
                commResponseVO.setErrorCode(replyCode);
                commResponseVO.setIpaddress(ipAddress);
                commResponseVO.setCurrency(currency);
                if ("000".equalsIgnoreCase(replyCode) && "SUCCESS".equalsIgnoreCase(replyDesc))
                {
                    if(functions.isValueNull(PhoneixUtils.getDescription(replyCode)))
                        status="Successful("+PhoneixUtils.getDescription(replyCode)+")";
                    else
                        status = "Successful";
                    billingDesc = GatewayAccountService.getGatewayAccount(accountId).getDisplayName();
                    message=PhoneixUtils.getDescription(replyCode);
                    if ("N".equalsIgnoreCase(isService) || "PA".equalsIgnoreCase(transactionDetailsVO.getTransactionType()))
                    {
                        commResponseVO.setDescription(message);
                        commResponseVO.setStatus(status);
                        commResponseVO.setRemark(message);
                        commResponseVO.setDescriptor(billingDesc);

                        confirmStatus = "Y";
                        dbStatus = "authsuccessful";
                        updatedStatus = "authsuccessful";
                        dbBuffer.append("update transaction_common set captureamount='" + amount + "',status='authsuccessful'");
                        entry.actionEntryForCommon(trackingId, amount, ActionEntry.ACTION_AUTHORISTION_SUCCESSFUL, ActionEntry.STATUS_AUTHORISTION_SUCCESSFUL, commResponseVO, auditTrailVO, ipAddress);
                    }else
                    {
                        commResponseVO.setDescription(message);
                        commResponseVO.setStatus(status);
                        commResponseVO.setRemark(message);
                        commResponseVO.setDescriptor(billingDesc);

                        confirmStatus = "Y";
                        dbStatus = "capturesuccess";
                        updatedStatus = "capturesuccess";
                        dbBuffer.append("update transaction_common set captureamount='" + amount + "',status='capturesuccess'");
                        entry.actionEntryForCommon(trackingId, amount, ActionEntry.ACTION_CAPTURE_SUCCESSFUL, ActionEntry.STATUS_CAPTURE_SUCCESSFUL, commResponseVO, auditTrailVO, ipAddress);
                    }
                }
                else
                {
                    confirmStatus = "N";
                    message=PhoneixUtils.getDescription(replyCode);
                    status = "Failed("+message+")";
                    commResponseVO.setStatus(status);
                    commResponseVO.setDescription(replyMessage);
                    commResponseVO.setRemark(replyMessage);
                    dbStatus = "authfailed";
                    updatedStatus="authfailed";
                    dbBuffer.append("update transaction_common set status='authfailed'");
                    entry.actionEntryForCommon(trackingId, amount, ActionEntry.ACTION_AUTHORISTION_FAILED, ActionEntry.STATUS_AUTHORISTION_FAILED, commResponseVO, auditTrailVO, ipAddress);
                }
                dbBuffer.append(",customerIp='" + ipAddress + "',customerIpCountry='" + functions.getIPCountryShort(ipAddress) + "',remark='" + message + "' where trackingid = " + trackingId);
                transactionLogger.error("Update transaction --->"+dbBuffer.toString());
                con = Database.getConnection();
                Database.executeUpdate(dbBuffer.toString(), con);
                statusSyncDAO.updateAllTransactionFlowFlag(trackingId, dbStatus);

                AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                asynchronousMailService.sendEmail(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingId), status, message, billingDesc);

                AsynchronousSmsService smsService = new AsynchronousSmsService();
                smsService.sendSMS(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingId), status, message, billingDesc);
            }
            else
            {
                if (PZTransactionStatus.CAPTURE_SUCCESS.toString().equals(dbStatus))
                {
                    if(functions.isValueNull(remark))
                        status = "Successful("+remark+")";
                    else
                        status = "Successful";
                    message = "Transaction Successful("+remark+")";
                    updatedStatus=PZTransactionStatus.CAPTURE_SUCCESS.toString();

                }else if(PZTransactionStatus.AUTH_SUCCESS.toString().equals(dbStatus)){
                    if(functions.isValueNull(remark))
                        status = "Successful("+remark+")";
                    else
                        status = "Successful";
                    message = "Transaction Successful("+remark+")";
                    updatedStatus=PZTransactionStatus.AUTH_SUCCESS.toString();
                }else if(PZTransactionStatus.AUTH_FAILED.toString().equals(dbStatus)){
                    if(functions.isValueNull(remark))
                        status = "Failed("+remark+")";
                    else
                        status = "Failed";
                    message = "Transaction Failed("+remark+")";
                    updatedStatus=PZTransactionStatus.AUTH_FAILED.toString();

                }
                else
                {
                    status = "Failed";
                    message = "Transaction Declined";
                    updatedStatus=PZTransactionStatus.FAILED.toString();

                }
            }

            genericTransDetailsVO.setOrderId(orderId);
            genericTransDetailsVO.setAmount(amount);
            genericTransDetailsVO.setCurrency(currency);
            genericTransDetailsVO.setOrderDesc(orderDesc);
            genericTransDetailsVO.setRedirectUrl(redirectUrl);
            genericTransDetailsVO.setNotificationUrl(notificationUrl);
            genericTransDetailsVO.setBillingDiscriptor(billingDesc);

            addressDetailsVO.setEmail(custEmail);
            addressDetailsVO.setTmpl_amount(tmpl_amt);
            addressDetailsVO.setTmpl_currency(tmpl_currency);
            addressDetailsVO.setFirstname(firstName);
            addressDetailsVO.setLastname(lastName);
            addressDetailsVO.setCardHolderIpAddress(ipAddress);
            cardDetailsVO.setCardNum(ccnum);
            cardDetailsVO.setExpMonth(expMonth);
            cardDetailsVO.setExpYear(expYear);
            commonValidatorVO.setLogoName(logoName);
            commonValidatorVO.setPartnerName(partnerName);
            commonValidatorVO.setPaymentType(payModeId);
            commonValidatorVO.setCardType(cardTypeId);
            commonValidatorVO.setTrackingid(trackingId);

            commonValidatorVO.setCardDetailsVO(cardDetailsVO);
            commonValidatorVO.setAddressDetailsVO(addressDetailsVO);
            commonValidatorVO.setTransDetailsVO(genericTransDetailsVO);
            commonValidatorVO.setMerchantDetailsVO(merchantDetailsVO);
            commonValidatorVO.setCustomerId(customerId);
            commonValidatorVO.setTerminalId(terminalId);
            commonValidatorVO.setBankCode(replyCode);
            commonValidatorVO.setBankDescription(replyMessage);
            //commonValidatorVO.setActionType(actionExecutorName); // Used For Vt Issue
            transactionUtility.setToken(commonValidatorVO, updatedStatus);
            if (functions.isValueNull(notificationUrl))
            {
                transactionLogger.error("inside sending notification---" + notificationUrl);
                TransactionDetailsVO transactionDetailsVO1 = transactionUtility.getTransactionDetails(commonValidatorVO);
                transactionDetailsVO1.setTransactionMode("3D");
                AsyncNotificationService asyncNotificationService = AsyncNotificationService.getInstance();
                asyncNotificationService.sendNotification(transactionDetailsVO1, trackingId, updatedStatus, message, "");
            }

            if ("Y".equalsIgnoreCase(autoRedirect))
            {
                transactionUtility.doAutoRedirect(commonValidatorVO, res, status, billingDesc);
            }
            else
            {
                transactionLogger.debug("-----inside confirmation page-----");
                session.setAttribute("ctoken", ctoken);
                req.setAttribute("transDetail", commonValidatorVO);
                req.setAttribute("responceStatus", status);
                req.setAttribute("remark", message);
                req.setAttribute("displayName", billingDesc);
                String confirmationPage = "";

                if (functions.isValueNull(version) && version.equalsIgnoreCase("2"))
                    confirmationPage = "/confirmationCheckout.jsp?ctoken=";
                else
                    confirmationPage = "/confirmationpage.jsp?ctoken=";
                RequestDispatcher rd = req.getRequestDispatcher(confirmationPage + ctoken);
                rd.forward(req, res);

            }
        }
        }
        catch (PZDBViolationException e)
        {
            transactionLogger.error("PZDBViolationException in PhoneixFrontEndServlet--->",e);
        }
        catch (SystemError systemError)
        {
            transactionLogger.error("SystemError in PhoneixFrontEndServlet--->",systemError);
        }
        finally{
            Database.closeConnection(con);
        }
    }
}