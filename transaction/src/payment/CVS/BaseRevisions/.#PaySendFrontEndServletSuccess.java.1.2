package payment;

import com.directi.pg.*;
import com.directi.pg.core.GatewayAccountService;
import com.directi.pg.core.valueObjects.GenericAddressDetailsVO;
import com.directi.pg.core.valueObjects.GenericCardDetailsVO;
import com.directi.pg.core.valueObjects.GenericTransDetailsVO;
import com.manager.TransactionManager;
import com.manager.dao.MerchantDAO;
import com.manager.vo.MerchantDetailsVO;
import com.manager.vo.TransactionDetailsVO;
import com.payment.PZTransactionStatus;
import com.payment.common.core.CommResponseVO;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.exceptionHandler.PZExceptionHandler;
import com.payment.exceptionHandler.constraintType.PZDBExceptionEnum;
import com.payment.statussync.StatusSyncDAO;
import com.payment.validators.vo.CommonValidatorVO;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.reference.DefaultEncoder;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.util.Enumeration;

/**
 * Created by Rihen on 7/27/2018.
 */
public class PaySendFrontEndServletSuccess extends HttpServlet
{
    private static TransactionLogger transactionLogger = new TransactionLogger(PaySendFrontEndServletSuccess.class.getName());
    String ctoken = ESAPI.randomizer().getRandomString(32, DefaultEncoder.CHAR_ALPHANUMERICS);

    @Override
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        doService(req, res);
    }

    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        doService(req, res);
    }

    public void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        transactionLogger.error("-----Inside PaySendFrontEndServletSuccess -----");

        Enumeration enumeration = request.getParameterNames();
        while (enumeration.hasMoreElements())
        {
            String key = (String) enumeration.nextElement();
            String value = request.getParameter(key);

            transactionLogger.error("Key-----" + key + "----value----" + value);
        }

        String updatedStatus = "";
        String toId = "";
        String payModeId = "";
        String cardTypeId = "";
        String isService = "";
        String accountId = "";
        String responceStatus = "";
        String amount = "";
        String description = "";
        String orderDescription = "";
        String redirectUrl = "";
        String clKey = "";
        String autoRedirect = "";
        String logoName = "";
        String partnerName = "";
        String firstName = "";
        String lastName = "";
        String tmpl_Amount = "";
        String tmpl_Currency = "";
        String ccnum = "";
        String expMonth="";
        String expYear="";
        String currency = "";
        String billingDesc = "";
        String message = "";
        String email = "";
        String dbStatus = "";
        String updateStatus = "";
        String customerId = "";
        String eci = "";
        String trackingId="";
        String notificationUrl="";
        String terminalId="";
        String ip = "";

        HttpSession session = request.getSession(true);

        Functions functions = new Functions();
        TransactionManager transactionManager = new TransactionManager();
        CommonValidatorVO commonValidatorVO = new CommonValidatorVO();
        GenericTransDetailsVO genericTransDetailsVO = new GenericTransDetailsVO();
        GenericAddressDetailsVO addressDetailsVO = new GenericAddressDetailsVO();
        MerchantDetailsVO merchantDetailsVO = new MerchantDetailsVO();
        MerchantDAO merchantDAO = new MerchantDAO();
        CommResponseVO commResponseVO = new CommResponseVO();
        ActionEntry entry = new ActionEntry();
        StatusSyncDAO statusSyncDAO = new StatusSyncDAO();
        AuditTrailVO auditTrailVO = new AuditTrailVO();
        GenericCardDetailsVO cardDetailsVO = new GenericCardDetailsVO();
        TransactionUtility transactionUtility = new TransactionUtility();
        Connection con = null;

        try
        {
            if(functions.isValueNull(request.getParameter("order_id")))
                trackingId=request.getParameter("order_id");


            TransactionDetailsVO transactionDetailsVO = transactionManager.getTransDetailFromCommon(trackingId);

            transactionLogger.error("=== tracking id ==="+trackingId);
            transactionLogger.error("=== toid ==="+transactionDetailsVO.getToid());

            toId = transactionDetailsVO.getToid();
            description = transactionDetailsVO.getDescription();
            redirectUrl = transactionDetailsVO.getRedirectURL();
            accountId = transactionDetailsVO.getAccountId();
            orderDescription = transactionDetailsVO.getOrderDescription();
            currency = transactionDetailsVO.getCurrency();
            amount = transactionDetailsVO.getAmount();
            dbStatus = transactionDetailsVO.getStatus();
            tmpl_Amount = transactionDetailsVO.getTemplateamount();
            tmpl_Currency = transactionDetailsVO.getTemplatecurrency();
            payModeId = transactionDetailsVO.getPaymodeId();
            cardTypeId = transactionDetailsVO.getCardTypeId();
            terminalId = transactionDetailsVO.getTerminalId();
            ip = transactionDetailsVO.getIpAddress();

            if(functions.isValueNull(transactionDetailsVO.getFirstName())) {
                firstName = transactionDetailsVO.getFirstName();
            }
            if(functions.isValueNull(transactionDetailsVO.getLastName())) {
                lastName = transactionDetailsVO.getLastName();
            }
            if(functions.isValueNull(transactionDetailsVO.getEci())) {
                eci = transactionDetailsVO.getEci();
            }
            if(functions.isValueNull(transactionDetailsVO.getNotificationUrl())) {
                notificationUrl = transactionDetailsVO.getNotificationUrl();
            }
            if(functions.isValueNull(transactionDetailsVO.getEmailaddr())) {
                email = transactionDetailsVO.getEmailaddr();
            }
            if(functions.isValueNull(transactionDetailsVO.getCustomerId())) {
                customerId = transactionDetailsVO.getCustomerId();
            }

            if(functions.isValueNull(transactionDetailsVO.getCcnum()))
            {
                ccnum = PaymentzEncryptor.decryptPAN(transactionDetailsVO.getCcnum());
            }

            if(functions.isValueNull(transactionDetailsVO.getExpdate()))
            {
                String expDate = PaymentzEncryptor.decryptExpiryDate(transactionDetailsVO.getExpdate());
                String temp[] = expDate.split("/");

                if (functions.isValueNull(temp[0]))
                {
                    expMonth = temp[0];
                }
                if (functions.isValueNull(temp[1]))
                {
                    expYear = temp[1];
                }
            }

            merchantDetailsVO = merchantDAO.getMemberDetails(toId);

            auditTrailVO.setActionExecutorName("AcquirerFrontEnd");
            auditTrailVO.setActionExecutorId(toId);

            if (merchantDetailsVO != null)
            {
                clKey = merchantDetailsVO.getKey();
                autoRedirect = merchantDetailsVO.getAutoRedirect();
                logoName = merchantDetailsVO.getLogoName();
                partnerName = merchantDetailsVO.getPartnerName();
                isService = merchantDetailsVO.getIsService();
            }


            commResponseVO.setTransactionId(transactionDetailsVO.getPaymentId());
            commResponseVO.setCurrency(currency);
            commResponseVO.setAmount(amount);
            commResponseVO.setTmpl_Amount(tmpl_Amount);
            commResponseVO.setTmpl_Currency(tmpl_Currency);

            try
            {
                StringBuffer sb = new StringBuffer();

                transactionLogger.error("=== db status ==="+dbStatus);
                transactionLogger.error("=== transactionID ==="+commResponseVO.getTransactionId());

                if(PZTransactionStatus.AUTH_STARTED.toString().equalsIgnoreCase(dbStatus))
                {
                    sb.append("update transaction_common set ");

                    billingDesc = GatewayAccountService.getGatewayAccount(accountId).getDisplayName();
                    message = "Transaction Successful";
                    responceStatus = "Successful";

                    commResponseVO.setRemark(message);
                    commResponseVO.setDescriptor(billingDesc);
                    commResponseVO.setStatus("success");

                    transactionLogger.error("--- in Sale , capturesuccess ---");

                    updatedStatus = "capturesuccess";

                    sb.append("remark='Transaction Successful'");
                    sb.append(", status='capturesuccess'");
                    sb.append(", captureamount="+amount+"");
                    entry.actionEntryForCommon(trackingId, amount, ActionEntry.ACTION_CAPTURE_SUCCESSFUL, ActionEntry.STATUS_CAPTURE_SUCCESSFUL, commResponseVO, auditTrailVO, null);


                    sb.append(" where trackingid = " + trackingId);
                    con = Database.getConnection();
                    transactionLogger.error("common update query PaySendWalletFrontEndSuccessNotification---" + sb.toString());
                    Database.executeUpdate(sb.toString(), con);
                    statusSyncDAO.updateAllTransactionFlowFlag(trackingId, updatedStatus);

                }


                genericTransDetailsVO.setOrderId(description);
                genericTransDetailsVO.setOrderDesc(orderDescription);
                genericTransDetailsVO.setAmount(amount);
                genericTransDetailsVO.setCurrency(currency);
                genericTransDetailsVO.setBillingDiscriptor(billingDesc);
                genericTransDetailsVO.setNotificationUrl(notificationUrl);
                genericTransDetailsVO.setRedirectUrl(redirectUrl);
                addressDetailsVO.setEmail(email);
                addressDetailsVO.setFirstname(firstName);
                addressDetailsVO.setLastname(lastName);
                addressDetailsVO.setTmpl_amount(tmpl_Amount);
                addressDetailsVO.setTmpl_currency(tmpl_Currency);
                addressDetailsVO.setIp(ip);
                cardDetailsVO.setCardNum(ccnum);
                cardDetailsVO.setExpMonth(expMonth);
                cardDetailsVO.setExpYear(expYear);

                if (session.getAttribute("language") !=null) {
                    addressDetailsVO.setLanguage(session.getAttribute("language").toString());
                }
                else {
                    addressDetailsVO.setLanguage("");
                }

                commonValidatorVO.setTrackingid(trackingId);
                commonValidatorVO.setLogoName(logoName);
                commonValidatorVO.setPartnerName(partnerName);
                commonValidatorVO.setTransDetailsVO(genericTransDetailsVO);
                commonValidatorVO.setMerchantDetailsVO(merchantDetailsVO);
                commonValidatorVO.setPaymentType(payModeId);
                commonValidatorVO.setCardType(cardTypeId);
                commonValidatorVO.setCustomerId(customerId);
                commonValidatorVO.setAddressDetailsVO(addressDetailsVO);
                commonValidatorVO.setCardDetailsVO(cardDetailsVO);
                commonValidatorVO.setEci(eci);
                commonValidatorVO.setTerminalId(terminalId);
                commonValidatorVO.setVersion(transactionDetailsVO.getVersion());

                transactionUtility.setToken(commonValidatorVO,responceStatus);

                if(functions.isValueNull(notificationUrl))
                {
                    transactionLogger.error("inside sending notification---"+notificationUrl+"--- for trackingid---"+trackingId);
                    TransactionDetailsVO transactionDetailsVO1=transactionUtility.getTransactionDetails(commonValidatorVO);
                    AsyncNotificationService asyncNotificationService = AsyncNotificationService.getInstance();
                    asyncNotificationService.sendNotification(transactionDetailsVO1,trackingId,updateStatus,message,"");
                }

                if ("Y".equalsIgnoreCase(autoRedirect))
                {
                    transactionUtility.doAutoRedirect(commonValidatorVO, response, responceStatus, billingDesc);
                }
                else
                {
                    request.setAttribute("responceStatus", responceStatus);
                    request.setAttribute("displayName", billingDesc);
                    request.setAttribute("remark", message);
                    request.setAttribute("transDetail", commonValidatorVO);
                    session.setAttribute("ctoken", ctoken);

                    String confirmationPage = "";
                    confirmationPage = "/confirmationCheckout.jsp?ctoken=";

                    RequestDispatcher rd = request.getRequestDispatcher(confirmationPage + ctoken);
                    rd.forward(request, response);
                }
            }
            catch (SystemError se)
            {
                transactionLogger.error("SystemError::::::", se);
                PZExceptionHandler.raiseAndHandleDBViolationException("CPFrontEndServlet.java", "doService()", null, "Transaction", null, PZDBExceptionEnum.DB_CONNECTION_ISSUE, null, se.getMessage(), se.getCause(), toId, null);
            }
        }
        catch (PZDBViolationException e)
        {
            transactionLogger.error("error::::", e);
            PZExceptionHandler.raiseAndHandleDBViolationException("CPFrontEndServlet.java", "doService()", null, "Transaction", null, PZDBExceptionEnum.INCORRECT_QUERY, null, e.getMessage(), e.getCause(), toId, null);
        }
        finally
        {
            Database.closeConnection(con);
        }
    }


}