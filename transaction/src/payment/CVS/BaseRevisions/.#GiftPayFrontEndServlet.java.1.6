package payment;

import com.directi.pg.*;
import com.directi.pg.core.GatewayAccount;
import com.directi.pg.core.GatewayAccountService;
import com.directi.pg.core.valueObjects.GenericAddressDetailsVO;
import com.directi.pg.core.valueObjects.GenericCardDetailsVO;
import com.directi.pg.core.valueObjects.GenericRequestVO;
import com.directi.pg.core.valueObjects.GenericTransDetailsVO;
import com.manager.TransactionManager;
import com.manager.dao.MerchantDAO;
import com.manager.vo.MerchantDetailsVO;
import com.manager.vo.TransactionDetailsVO;
import com.payment.Mail.AsynchronousMailService;
import com.payment.Mail.MailEventEnum;
import com.payment.PZTransactionStatus;
import com.payment.common.core.CommResponseVO;
import com.payment.common.core.CommTransactionDetailsVO;
import com.payment.exceptionHandler.PZConstraintViolationException;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.exceptionHandler.PZTechnicalViolationException;
import com.payment.giftpay.GiftPayPaymentGateway;
import com.payment.sms.AsynchronousSmsService;
import com.payment.statussync.StatusSyncDAO;
import com.payment.validators.vo.CommonValidatorVO;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.codecs.MySQLCodec;
import org.owasp.esapi.reference.DefaultEncoder;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.BufferedReader;
import java.io.IOException;
import java.sql.Connection;
import java.util.Date;
import java.util.Enumeration;

/**
 * Created by Admin on 4/8/2021.
 */
public class GiftPayFrontEndServlet extends HttpServlet
{
    TransactionLogger transactionLogger = new TransactionLogger(GiftPayFrontEndServlet.class.getName());
    String ctoken = ESAPI.randomizer().getRandomString(32, DefaultEncoder.CHAR_ALPHANUMERICS);

    public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request,response);
    }

    public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException,ServletException
    {
        transactionLogger.error("----Inside GiftPayFrontEndServlet----");
       String trackingId = request.getParameter("trackingId");
        HttpSession session = request.getSession(true);
        CommonValidatorVO commonValidatorVO = new CommonValidatorVO();
        GenericAddressDetailsVO addressDetailsVO = new GenericAddressDetailsVO();
        GenericCardDetailsVO cardDetailsVO = new GenericCardDetailsVO();
        CommTransactionDetailsVO commTransactionDetailsVO = new CommTransactionDetailsVO();
        GenericTransDetailsVO genericTransDetailsVO = new GenericTransDetailsVO();
        TransactionUtility transactionUtility = new TransactionUtility();
        TransactionManager transactionManager = new TransactionManager();
        AuditTrailVO auditTrailVO = new AuditTrailVO();
        Functions functions = new Functions();
        MerchantDetailsVO merchantDetailsVO = new MerchantDetailsVO();
        MerchantDAO merchantDAO = new MerchantDAO();
        StatusSyncDAO statusSyncDAO = new StatusSyncDAO();
        StringBuilder responseMsg = new StringBuilder();
        MySQLCodec me = new MySQLCodec(MySQLCodec.Mode.STANDARD);



        Enumeration enumeration=request.getParameterNames();
        while (enumeration.hasMoreElements())
        {
            String key = (String) enumeration.nextElement();
            String value = request.getParameter(key);

            transactionLogger.error("Name=" + key + "-----Value=" + value);
        }
            BufferedReader br = request.getReader();
            String str = "";
        while ((str = br.readLine()) != null)
            {
                responseMsg.append(str);
            }
            transactionLogger.error("----responseMsg----" + responseMsg.toString());

            String currency = "";
            String toId = "";
            String accountId = "";
            String dbStatus = "";
            String billingDesc = "";
            String notificationUrl = "";
            String description = "";
            String amount = "";
            String tmpl_amt = "";
            String tmpl_currency = "";
            String firstName = "";
            String lastName = "";
            String paymodeid = "";
            String cardtypeid = "";
            String redirectUrl = "";
            String ccnum = "";
            String expDate = "";
            String expMonth = "";
            String expYear = "";
            String terminalId = "";
            String orderDesc = "";
            String autoRedirect = "";
            String partnerName = "";
            String logoName = "";
            String confirmationPage = "";
            String eci = "";
            String transactionId = "";
            String amount1 = "";
            String custId = "";
            String ipAddress = Functions.getIpAddress(request);
            String custEmail = "";
            String city = "";
            String state = "";
            String country = "";
            String address = "";
            String zip = "";
            String email = "";
            String phone = "";
            String toid = "";
            String paymentId = "";
            String status = "";
            String message = "";
            String updatedStatus = "";
            String transactionStatus = "";
            String confirmStatus = "";
            String requestIp = "";
            String bankTransactionDate = "";
            String chargeResponseCode = "";
            StringBuffer dbBuffer = new StringBuffer();


            Connection con = null;
            ActionEntry entry = new ActionEntry();

            transactionLogger.error("trackingId-->" + trackingId);
            try
            {
                if (functions.isValueNull(trackingId))
                {
                    TransactionDetailsVO transactionDetailsVO = transactionManager.getTransDetailFromCommon(trackingId);
                    if (transactionDetailsVO != null)
                    {
                        paymentId = transactionDetailsVO.getPaymentId();
                        accountId = transactionDetailsVO.getAccountId();
                        GatewayAccount gatewayAccount = GatewayAccountService.getGatewayAccount(accountId);
                        dbStatus = transactionDetailsVO.getStatus();
                        amount = transactionDetailsVO.getAmount();
                        currency = transactionDetailsVO.getCurrency();
                        tmpl_amt = transactionDetailsVO.getTemplateamount();
                        tmpl_currency = transactionDetailsVO.getTemplatecurrency();
                        if (functions.isValueNull(transactionDetailsVO.getCcnum()))
                        {
                            ccnum = PzEncryptor.decryptPAN(transactionDetailsVO.getCcnum());
                        }
                        if (functions.isValueNull(transactionDetailsVO.getExpdate()))
                        {
                            expDate = PzEncryptor.decryptExpiryDate(transactionDetailsVO.getExpdate());
                            String temp[] = expDate.split("/");

                            if (functions.isValueNull(temp[0]))
                            {
                                expMonth = temp[0];
                            }
                            if (functions.isValueNull(temp[1]))
                            {
                                expYear = temp[1];
                            }
                        }
                        eci = transactionDetailsVO.getEci();
                        merchantDetailsVO = merchantDAO.getMemberDetails(toid);
                        transactionId = paymentId;
                        if (merchantDetailsVO != null)
                        {
                            autoRedirect = merchantDetailsVO.getAutoRedirect();
                            logoName = merchantDetailsVO.getLogoName();
                            partnerName = merchantDetailsVO.getPartnerName();
                        }
                        auditTrailVO.setActionExecutorName("AcquirerFrontEnd");
                        auditTrailVO.setActionExecutorId(toid);
                        con = Database.getConnection();

                        if (PZTransactionStatus.AUTH_STARTED.toString().equals(dbStatus) || PZTransactionStatus.AUTHSTARTED_3D.toString().equals(dbStatus))
                        {
                            CommResponseVO commResponseVO = new CommResponseVO();
                            GenericRequestVO requestVO = null;

                            GiftPayPaymentGateway giftPayPaymentGateway = new GiftPayPaymentGateway(accountId);


                            if (!functions.isValueNull(dbStatus))
                            {
                                commResponseVO = (CommResponseVO) giftPayPaymentGateway.processInquiry(requestVO);
                                if (commResponseVO != null)
                                {
                                    if (functions.isValueNull(commResponseVO.getStatus()))
                                    {
                                        transactionStatus = commResponseVO.getStatus();
                                    }
                                    if (functions.isValueNull(commResponseVO.getTransactionId()))
                                    {
                                        transactionId = commResponseVO.getTransactionId();
                                    }
                                    if (functions.isValueNull(commResponseVO.getDescription()))
                                    {
                                        message = commResponseVO.getDescription();
                                    }
                                    if (functions.isValueNull(commResponseVO.getCurrency()))
                                    {
                                        currency = commResponseVO.getCurrency();
                                    }

                                }
                            }
                            else
                            {
                                commResponseVO.setTransactionId(transactionId);
                                commResponseVO.setCurrency(currency);
                                commResponseVO.setAmount(amount);
                                commResponseVO.setErrorCode(chargeResponseCode);
                                commResponseVO.setBankTransactionDate(bankTransactionDate);
                            }

                            commResponseVO.setTmpl_Amount(tmpl_amt);
                            commResponseVO.setTmpl_Currency(tmpl_currency);
                            commResponseVO.setIpaddress(requestIp);

                            if (("successful".equalsIgnoreCase(transactionStatus)) || ("success".equalsIgnoreCase(transactionStatus)))
                            {
                                notificationUrl = transactionDetailsVO.getNotificationUrl();
                                status = "Successful";
                                billingDesc = GatewayAccountService.getGatewayAccount(accountId).getDisplayName();
                                if (functions.isValueNull(message))
                                {
                                    commResponseVO.setStatus("success");
                                    commResponseVO.setDescription(message);
                                    commResponseVO.setRemark(message);
                                }
                                else
                                {
                                    commResponseVO.setDescription(status);
                                    commResponseVO.setRemark(status);
                                }

                                commResponseVO.setStatus(status);
                                commResponseVO.setDescriptor(billingDesc);

                                confirmStatus = "Y";
                                dbStatus = "capturesuccess";
                                updatedStatus = "capturesuccess";
                                con = Database.getConnection();
                                dbBuffer.append("update transaction_common set captureamount='" + amount + "',paymentid='" + transactionId + "',status='capturesuccess',customerIp='" + requestIp + "',customerIpCountry='" + functions.getIPCountryShort(requestIp) + "',remark='" + ESAPI.encoder().encodeForSQL(me, message) + "' where trackingid = " + trackingId);
                                Database.executeUpdate(dbBuffer.toString(), con);
                                entry.actionEntryForCommon(trackingId, amount, ActionEntry.ACTION_CAPTURE_SUCCESSFUL, ActionEntry.STATUS_CAPTURE_SUCCESSFUL, commResponseVO, auditTrailVO, requestIp);
                                statusSyncDAO.updateAllTransactionFlowFlag(trackingId, dbStatus);
                            }
                            else if ("failed".equalsIgnoreCase(transactionStatus) || "fail".equalsIgnoreCase(transactionStatus))
                            {
                                notificationUrl = transactionDetailsVO.getNotificationUrl();
                                confirmStatus = "N";
                                status = "fail";
                                commResponseVO.setStatus(status);
                                commResponseVO.setDescription(message);
                                commResponseVO.setRemark(message);
                                dbStatus = "authfailed";
                                updatedStatus = "authfailed";
                                con = Database.getConnection();
                                dbBuffer.append("update transaction_common set status='authfailed',paymentid='" + transactionId + "',customerIp='" + requestIp + "',customerIpCountry='" + functions.getIPCountryShort(requestIp) + "',remark='" + ESAPI.encoder().encodeForSQL(me, message) + "' where trackingid = " + trackingId);
                                Database.executeUpdate(dbBuffer.toString(), con);
                                entry.actionEntryForCommon(trackingId, amount, ActionEntry.ACTION_AUTHORISTION_FAILED, ActionEntry.STATUS_AUTHORISTION_FAILED, commResponseVO, auditTrailVO, requestIp);
                                statusSyncDAO.updateAllTransactionFlowFlag(trackingId, dbStatus);
                            }

                            AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                            asynchronousMailService.sendEmail(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingId), status, message, billingDesc);

                            AsynchronousSmsService smsService = new AsynchronousSmsService();
                            smsService.sendSMS(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingId), status, message, billingDesc);
                        }
                            else if (PZTransactionStatus.CAPTURE_SUCCESS.toString().equals(dbStatus))
                            {
                                billingDesc = GatewayAccountService.getGatewayAccount(accountId).getDisplayName();
                                status = "success";
                                message = "SYS: Transaction Successful";
                                dbStatus = "capturesuccess";

                                dbBuffer.append("update transaction_common set customerIp='" + ipAddress + "',customerIpCountry='" + functions.getIPCountryShort(ipAddress) + "' where trackingid ='" + trackingId + "'");
                                transactionLogger.error("update query------------>" + dbBuffer.toString());
                                Database.executeUpdate(dbBuffer.toString(), con);
                            }
                            else if (PZTransactionStatus.AUTH_FAILED.toString().equalsIgnoreCase(dbStatus) || PZTransactionStatus.FAILED.toString().equalsIgnoreCase(dbStatus))
                            {
                                status = "authfailed";
                                dbStatus = "authfailed";
                                message = "Transaction failed";

                                dbBuffer.append("update transaction_common set status='authfailed',customerIp='" + ipAddress + "',customerIpCountry='" + functions.getIPCountryShort(ipAddress) + "' where trackingid ='" + trackingId + "'");
                                transactionLogger.error("update query------------>" + dbBuffer.toString());
                                Database.executeUpdate(dbBuffer.toString(), con);
                            }

                        }


                    }


                genericTransDetailsVO.setAmount(amount1);
                genericTransDetailsVO.setCurrency(currency);
                genericTransDetailsVO.setOrderDesc(orderDesc);
                genericTransDetailsVO.setRedirectUrl(redirectUrl);
                genericTransDetailsVO.setOrderId(description);
                genericTransDetailsVO.setNotificationUrl(notificationUrl);
                genericTransDetailsVO.setBillingDiscriptor(billingDesc);

                commTransactionDetailsVO.setPreviousTransactionId(paymentId);

                commonValidatorVO.setTransDetailsVO(genericTransDetailsVO);
                commonValidatorVO.setCustomerId(custId);
                commonValidatorVO.setTerminalId(terminalId);
                commonValidatorVO.setLogoName(logoName);
                commonValidatorVO.setPartnerName(partnerName);
                commonValidatorVO.setPaymentType(paymodeid);
                commonValidatorVO.setCardType(cardtypeid);
                commonValidatorVO.setTrackingid(trackingId);
                commonValidatorVO.setStatus(message);
                addressDetailsVO.setCity(city);
                addressDetailsVO.setState(state);
                addressDetailsVO.setCountry(country);
                addressDetailsVO.setStreet(address);
                addressDetailsVO.setZipCode(zip);
                addressDetailsVO.setPhone(phone);


                if (functions.isValueNull(custEmail))
                {
                    addressDetailsVO.setEmail(custEmail);
                }
                if (functions.isValueNull(firstName))
                {
                    addressDetailsVO.setFirstname(firstName);
                }

                if (functions.isValueNull(lastName))
                {
                    addressDetailsVO.setLastname(lastName);
                }
                addressDetailsVO.setTmpl_amount(tmpl_amt);
                addressDetailsVO.setTmpl_currency(tmpl_currency);
                cardDetailsVO.setCardNum(ccnum);
                cardDetailsVO.setExpMonth(expMonth);
                cardDetailsVO.setExpYear(expYear);
                commonValidatorVO.setAddressDetailsVO(addressDetailsVO);
                commonValidatorVO.setCardDetailsVO(cardDetailsVO);
                commonValidatorVO.setMerchantDetailsVO(merchantDetailsVO);
                commonValidatorVO.setEci(eci);
                transactionUtility.setToken(commonValidatorVO, dbStatus);
                if (functions.isValueNull(notificationUrl))
                {
                    transactionLogger.error("inside sending notification---" + notificationUrl);
                    TransactionDetailsVO transactionDetailsVO1 = transactionUtility.getTransactionDetails(commonValidatorVO);
                    transactionDetailsVO1.setBillingDesc(billingDesc);
                    transactionDetailsVO1.setTransactionMode("3D");
                    AsyncNotificationService asyncNotificationService = AsyncNotificationService.getInstance();
                    asyncNotificationService.sendNotification(transactionDetailsVO1, trackingId, dbStatus, message, "");
                }
                transactionLogger.debug("DirectTransactionRESTIMPL processDirectTransaction end #########" + new Date().getTime());
                if ("Y".equalsIgnoreCase(autoRedirect))
                {
                    transactionUtility.doAutoRedirect(commonValidatorVO, response, dbStatus, billingDesc);
                }
                else
                {
                    session.setAttribute("ctoken", ctoken);
                    request.setAttribute("transDetail", commonValidatorVO);
                    request.setAttribute("responceStatus", dbStatus);
                    request.setAttribute("remark", message);
                    request.setAttribute("displayName", billingDesc);
                    confirmationPage = "/confirmationCheckout.jsp?ctoken=";
                    RequestDispatcher rd = request.getRequestDispatcher(confirmationPage + ctoken);
                    rd.forward(request, response);
                }
            }
            catch (PZTechnicalViolationException e)
            {
                transactionLogger.error("PZTechnicalViolationException---", e);
            }
            catch (PZConstraintViolationException e)
            {
                transactionLogger.error("PZConstraintViolationException---", e);
            }
            catch (PZDBViolationException e)
            {
                transactionLogger.error("PZDBViolationException----", e);
            }
            catch (SystemError e)
            {
                transactionLogger.error("SystemError----", e);
            }
            catch (IOException e)
            {
                transactionLogger.error("IOException----", e);
            }

        }
}

