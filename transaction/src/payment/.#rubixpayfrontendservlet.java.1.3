package payment;

import com.directi.pg.*;
import com.directi.pg.core.GatewayAccount;
import com.directi.pg.core.GatewayAccountService;
import com.directi.pg.core.valueObjects.GenericAddressDetailsVO;
import com.directi.pg.core.valueObjects.GenericCardDetailsVO;
import com.directi.pg.core.valueObjects.GenericTransDetailsVO;
import com.manager.PaymentManager;
import com.manager.TransactionManager;
import com.manager.dao.MerchantDAO;
import com.manager.vo.MerchantDetailsVO;
import com.manager.vo.TransactionDetailsVO;
import com.payment.Mail.AsynchronousMailService;
import com.payment.Mail.MailEventEnum;
import com.payment.PZTransactionStatus;
import com.payment.Rubixpay.RubixpayPaymentGateway;
import com.payment.common.core.CommAddressDetailsVO;
import com.payment.common.core.CommRequestVO;
import com.payment.common.core.CommResponseVO;
import com.payment.common.core.CommTransactionDetailsVO;
import com.payment.exceptionHandler.PZExceptionHandler;
import com.payment.exceptionHandler.constraintType.PZDBExceptionEnum;
import com.payment.sms.AsynchronousSmsService;
import com.payment.statussync.StatusSyncDAO;
import com.payment.validators.vo.CommonValidatorVO;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.reference.DefaultEncoder;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.BufferedReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Enumeration;

/**
 * Created by Admin on 5/28/2020.
 */
public class rubixpayfrontendservlet extends HttpServlet
{

    private static TransactionLogger transactionlogger = new TransactionLogger(rubixpayfrontendservlet.class.getName());
    String ctoken = ESAPI.randomizer().getRandomString(32, DefaultEncoder.CHAR_ALPHANUMERICS);
    public void doGet(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException
    {   doService(req,res);

    }

    public void doPost(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException
    {
        doService(req,res);

    }

    public void doService(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException
    {
        transactionlogger.error("Entering TapmioPayFrontEndServlet ......");


        HttpSession session = req.getSession();
        Functions functions = new Functions();
        //PayGateCryptoUtils payGateCryptoUtils = new PayGateCryptoUtils();
        ActionEntry entry = new ActionEntry();
        AuditTrailVO auditTrailVO = new AuditTrailVO();
        TransactionManager transactionManager = new TransactionManager();
        CommonValidatorVO commonValidatorVO = new CommonValidatorVO();
        GenericTransDetailsVO genericTransDetailsVO = new GenericTransDetailsVO();
        MerchantDetailsVO merchantDetailsVO = new MerchantDetailsVO();
        MerchantDAO merchantDAO = new MerchantDAO();
        CommResponseVO commResponseVO = new CommResponseVO();
        GenericAddressDetailsVO addressDetailsVO = new GenericAddressDetailsVO();
        GenericCardDetailsVO cardDetailsVO = new GenericCardDetailsVO();
        StatusSyncDAO statusSyncDAO = new StatusSyncDAO();
        PaymentManager paymentManager = new PaymentManager();
        CommRequestVO requestVO = new CommRequestVO();
        TransactionUtility transactionUtility = new TransactionUtility();
        CommAddressDetailsVO commAddressDetailsVO=new CommAddressDetailsVO();
        CommTransactionDetailsVO commTransactionDetailsVO=new CommTransactionDetailsVO();
        Connection con = null;
        PreparedStatement p = null;
        ResultSet rs = null;
        String toid = "";
        String description = "";
        String redirectUrl = "";
        String accountId = "";
        String orderDesc = "";
        String currency = "";
        String clkey = "";
        String checksumAlgo = "";
        String checksum = "";
        String autoredirect = "";
        String isService = "";
        String displayName = "";
        String isPowerBy = "";
        String logoName = "";
        String partnerName = "";

        String amount = "";
        String trackingId = req.getParameter("trackingid");
        String status = "";
        String remark = "";

        String bankTransactionStatus = "";
        String resultCode = "";
        String email = "";

        String tmpl_amt = "";
        String tmpl_currency = "";
        String firstName = "";
        String lastName = "";
        String paymodeid = "";
        String cardtypeid = "";
        String custId = "";
        String transactionStatus = "";
        String confirmStatus = "";
        String responseStatus = "";
        String transactionId = "";
        String message = "";
        String billingDesc = "";
        String dbStatus = "";
        String eci = "";
        String paymentid = "";
        String errorCode = "";
        String name = "";
        String notificationUrl = "";
        String ccnum = "";
        String expMonth = "";
        String expYear = "";
        String requestIp = "";
        String merchantKey = "";
        String paymentId = "";
        String autoRedirect = "";
        String updatedStatus = "";
        StringBuilder responseMsg = new StringBuilder();
        BufferedReader br = req.getReader();
        Enumeration enumeration = req.getParameterNames();
        String str;
        while (enumeration.hasMoreElements())
        {
            String key = (String) enumeration.nextElement();
            String value = req.getParameter(key);
            transactionlogger.error("---Key---" + key + "---Value---" + value);
        }


        try
        {

           /* String INTERNAL_ACQUIRER_TYPE=req.getParameter("INTERNAL_ACQUIRER_TYPE");//for PhonePe
            transactionlogger.error("INTERNAL_ACQUIRER_TYPE---->"+INTERNAL_ACQUIRER_TYPE);*/


            TransactionDetailsVO transactionDetailsVO = transactionManager.getTransDetailFromCommon(trackingId);

            if (transactionDetailsVO != null)
            {
                ccnum = PzEncryptor.decryptPAN(transactionDetailsVO.getCcnum());
                toid = transactionDetailsVO.getToid();
                description = transactionDetailsVO.getDescription();
                redirectUrl = transactionDetailsVO.getRedirectURL();
                accountId = transactionDetailsVO.getAccountId();
                orderDesc = transactionDetailsVO.getOrderDescription();
                currency = transactionDetailsVO.getCurrency();
                amount = transactionDetailsVO.getAmount();
                tmpl_amt = transactionDetailsVO.getTemplateamount();
                notificationUrl = transactionDetailsVO.getNotificationUrl();
                requestIp = Functions.getIpAddress(req);
                commAddressDetailsVO.setCardHolderIpAddress(requestIp);
                transactionlogger.error("requestIp --- >" + requestIp);
                transactionlogger.error("notificationUrl ---" + notificationUrl);
                if (functions.isValueNull(tmpl_amt))
                {
                    tmpl_amt = transactionDetailsVO.getTemplateamount();
                }
                else
                {
                    transactionlogger.error("inside else of tmpl_amnt--->");
                    tmpl_amt = null;
                }
                tmpl_currency = transactionDetailsVO.getTemplatecurrency();
                if (functions.isValueNull(tmpl_currency))
                {
                    tmpl_currency = transactionDetailsVO.getTemplatecurrency();
                }
                else
                {
                    transactionlogger.error("inside else of tmpl_currency --->");
                    tmpl_currency = "";
                }
                firstName = transactionDetailsVO.getFirstName();
                lastName = transactionDetailsVO.getLastName();
                name = transactionDetailsVO.getFirstName() + " " + transactionDetailsVO.getLastName();


                paymodeid = transactionDetailsVO.getPaymodeId();
                cardtypeid = transactionDetailsVO.getCardTypeId();
                custId = transactionDetailsVO.getCustomerId();
                transactionId = transactionDetailsVO.getPaymentId();
                transactionlogger.error("transactionId ------------------------------->" + transactionDetailsVO.getPaymentId());
                dbStatus = transactionDetailsVO.getStatus();
                transactionlogger.error("dbStatus ---" + dbStatus);

                merchantDetailsVO = merchantDAO.getMemberDetails(toid);
                clkey = merchantDetailsVO.getKey();
                checksumAlgo = merchantDetailsVO.getChecksumAlgo();
                autoredirect = merchantDetailsVO.getAutoRedirect();
                isPowerBy = merchantDetailsVO.getIsPoweredBy();
                logoName = merchantDetailsVO.getLogoName();
                isService = merchantDetailsVO.getIsService();
                partnerName = merchantDetailsVO.getPartnerName();
                email = transactionDetailsVO.getEmailaddr();

                auditTrailVO.setActionExecutorName("AcquirerFrontEnd");
                auditTrailVO.setActionExecutorId(toid);
                transactionlogger.error("accountid in side frontEnd------------------------------------->"+accountId);


                displayName = GatewayAccountService.getGatewayAccount(accountId).getDisplayName();

                if (PZTransactionStatus.AUTH_STARTED.toString().equals(dbStatus))
                {
                    transactionlogger.error("accountid frontend-------------------------------------->"+accountId);
                    RubixpayPaymentGateway rubixpayPaymentGateway = new RubixpayPaymentGateway(accountId);
                    commTransactionDetailsVO.setPreviousTransactionId(transactionId);
                    commTransactionDetailsVO.setResponseHashInfo(transactionId);
                    requestVO.setTransDetailsVO(commTransactionDetailsVO);
                    requestVO.setAddressDetailsVO(commAddressDetailsVO);
                    entry.actionEntryFor3DCommon(trackingId, amount, ActionEntry.ACTION_3D_CONFIRMATION_STARTED, ActionEntry.STATUS_3D_CONFIRMATION, null, requestVO, auditTrailVO, requestIp);
                    commResponseVO= (CommResponseVO) rubixpayPaymentGateway.process3DSaleConfirmation(trackingId, requestVO);
                    transactionlogger.error("inside AUTH_STARTED---");
                    StringBuffer dbBuffer = new StringBuffer();
                    if (commResponseVO != null)
                    {
                        transactionlogger.error("status from process3DSaleConfirmation -----" + commResponseVO.getStatus());
                        if (functions.isValueNull(commResponseVO.getStatus()))
                        {
                            transactionStatus = commResponseVO.getStatus();
                            message = commResponseVO.getRemark();
                        }
                        transactionlogger.error("remark message  bank----------------------------------->"+commResponseVO.getRemark());

                        commResponseVO.setTmpl_Amount(tmpl_amt);
                        commResponseVO.setTmpl_Currency(tmpl_currency);
                        commResponseVO.setIpaddress(requestIp);
                        commResponseVO.setDescription(message);
                        commResponseVO.setRemark(message);
                        commResponseVO.setAmount(amount);
                        commResponseVO.setCurrency(currency);


                        if ("success".equalsIgnoreCase(transactionStatus))
                        {

                            transactionlogger.error("inside transactionStatus success");
                            status = "Successful";
                            commResponseVO.setDescriptor(billingDesc);
                            confirmStatus = "Y";
                            responseStatus = "Successful";
                            dbStatus = "capturesuccess";
                            updatedStatus = "capturesuccess";
                            dbBuffer.append("update transaction_common set captureamount='" + amount + "',status='capturesuccess',paymentid='"+commResponseVO.getTransactionId()+"',customerIp='" + requestIp + "',customerIpCountry='" + functions.getIPCountryShort(requestIp) + "',remark='" + message + "' where trackingid = " + trackingId);
                            con = Database.getConnection();
                            Database.executeUpdate(dbBuffer.toString(), con);
                            entry.actionEntryForCommon(trackingId, amount, ActionEntry.ACTION_CAPTURE_SUCCESSFUL, ActionEntry.STATUS_CAPTURE_SUCCESSFUL, commResponseVO, auditTrailVO, requestIp);

                        }

                        else if("pending".equalsIgnoreCase(transactionStatus))
                        {
                            transactionlogger.error("inside transactionStatus success");
                            status = "pending";
                            dbStatus = "pending";
                            responseStatus = "pending";
                            billingDesc="";
                            displayName="";
                            dbBuffer.append("update transaction_common set customerIp='" + requestIp + "',customerIpCountry='" + functions.getIPCountryShort(requestIp) + "',remark='" + message + "' where trackingid = " + trackingId);
                            con = Database.getConnection();
                            Database.executeUpdate(dbBuffer.toString(), con);

                        }
                        else
                        {
                            confirmStatus = "N";
                            status = "fail";
                            dbStatus = "authfailed";
                            updatedStatus = "authfailed";
                            billingDesc="";
                            displayName="";
                            dbBuffer.append("update transaction_common set amount='" + amount + "',paymentid='"+commResponseVO.getTransactionId()+"',status='authfailed',customerIp='" + requestIp + "',customerIpCountry='" + functions.getIPCountryShort(requestIp) + "', remark = '" + message + "'where trackingid = " + trackingId);
                            con = Database.getConnection();
                            Database.executeUpdate(dbBuffer.toString(), con);
                            entry.actionEntryForCommon(trackingId, amount, ActionEntry.ACTION_AUTHORISTION_FAILED, ActionEntry.STATUS_AUTHORISTION_FAILED, commResponseVO, auditTrailVO, requestIp);
                            responseStatus = "fail";

                         }


                        statusSyncDAO.updateAllTransactionFlowFlag(trackingId, dbStatus);


                    }

                    else
                    {
                         if (PZTransactionStatus.CAPTURE_SUCCESS.toString().equals(dbStatus))
                        {
                            transactionlogger.error("dbstatus before capture------------------->" + dbStatus);
                            billingDesc = displayName;
                            status = "success";
                            message = "Transaction Successful";
                            responseStatus = "Successful";
                            dbStatus = "capturesuccess";
                            transactionlogger.error("dbstatus AFTER capture------------------>" + dbStatus);

                        }
                        else
                        {
                            status = "fail";
                            message = "Transaction Declined";
                            responseStatus = "Failed";
                            dbStatus = "authfailed";
                        }
                    }

                    statusSyncDAO.updateAllTransactionFlowFlag(trackingId, dbStatus);
                    AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                    asynchronousMailService.sendEmail(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingId), status, responseStatus, billingDesc);

                    AsynchronousSmsService smsService = new AsynchronousSmsService();
                    smsService.sendSMS(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingId), status, responseStatus, billingDesc);

                    commonValidatorVO.setStatus(dbStatus);
                    commonValidatorVO.setTrackingid(trackingId);
                    genericTransDetailsVO.setOrderId(description);
                    genericTransDetailsVO.setAmount(amount);
                    genericTransDetailsVO.setCurrency(currency);
                    genericTransDetailsVO.setOrderDesc(orderDesc);
                    genericTransDetailsVO.setRedirectUrl(redirectUrl);
                    genericTransDetailsVO.setNotificationUrl(notificationUrl);
                    genericTransDetailsVO.setBillingDiscriptor(billingDesc);
                    commonValidatorVO.setLogoName(logoName);
                    commonValidatorVO.setPartnerName(partnerName);
                    commonValidatorVO.setTransDetailsVO(genericTransDetailsVO);
                    merchantDetailsVO = merchantDAO.getMemberDetails(toid);
                    addressDetailsVO.setTmpl_amount(tmpl_amt);
                    addressDetailsVO.setTmpl_currency(tmpl_currency);
                    addressDetailsVO.setFirstname(firstName);
                    addressDetailsVO.setLastname(lastName);
                    addressDetailsVO.setCardHolderIpAddress(requestIp);
                    commonValidatorVO.setMerchantDetailsVO(merchantDetailsVO);
                    commonValidatorVO.setPaymentType(transactionDetailsVO.getPaymodeId());
                    commonValidatorVO.setCardType(transactionDetailsVO.getCardTypeId());

                    if (functions.isValueNull(email))
                        addressDetailsVO.setEmail(email);
                    else
                        addressDetailsVO.setEmail(transactionDetailsVO.getEmailaddr());
                    commonValidatorVO.setPaymentType(paymodeid);
                    commonValidatorVO.setCardType(cardtypeid);

                    commonValidatorVO.setCustomerId(custId);
                    commonValidatorVO.setCustomerBankId(custId);

                    if (functions.isValueNull(transactionDetailsVO.getExpdate()))
                    {
                        transactionlogger.error("expDate --->" + transactionDetailsVO.getExpdate());

                        String expDate = PzEncryptor.decryptExpiryDate(transactionDetailsVO.getExpdate());
                        transactionlogger.error("expDate --->" + expDate);
                        String temp[] = expDate.split("/");

                        if (functions.isValueNull(temp[0]))
                        {
                            expMonth = temp[0];
                        }
                        if (functions.isValueNull(temp[1]))
                        {
                            expYear = temp[1];
                        }
                    }

                    cardDetailsVO.setCardNum(ccnum);
                    cardDetailsVO.setExpMonth(expMonth);
                    cardDetailsVO.setExpYear(expYear);
                    commonValidatorVO.setAddressDetailsVO(addressDetailsVO);
                    commonValidatorVO.setCardDetailsVO(cardDetailsVO);

                    if (functions.isValueNull(notificationUrl))
                    {
                        transactionlogger.error("inside sending notification---" + notificationUrl);
                        TransactionDetailsVO transactionDetailsVO1 = transactionUtility.getTransactionDetails(commonValidatorVO);
                        AsyncNotificationService asyncNotificationService = AsyncNotificationService.getInstance();
                        asyncNotificationService.sendNotification(transactionDetailsVO1, trackingId, dbStatus, message, "");
                        transactionlogger.error("remark message----------------------" + message);
                    }

                    if ("Y".equalsIgnoreCase(autoredirect))
                    {
                        transactionlogger.error("responseStatus in ---" + responseStatus);
                        transactionUtility.doAutoRedirect(commonValidatorVO, res, responseStatus, billingDesc);
                    }
                    else
                    {
                        session.setAttribute("ctoken", ctoken);
                        req.setAttribute("transDetail", commonValidatorVO);
                        req.setAttribute("responceStatus", responseStatus);
                        req.setAttribute("displayName", displayName);
                        req.setAttribute("remark", message);
                        String confirmationPage = "";
                        String version = (String) session.getAttribute("version");
                        if (functions.isValueNull(version) && version.equalsIgnoreCase("2"))
                            confirmationPage = "/confirmationCheckout.jsp?ctoken=";
                        else
                            confirmationPage = "/confirmationpage.jsp?ctoken=";
                        session.invalidate();
                        RequestDispatcher rd = req.getRequestDispatcher(confirmationPage + ctoken);
                        rd.forward(req, res);
                    }

                }
            } }
        catch(Exception e)
        {
            transactionlogger.error("PZDBViolationException:::::", e);
            PZExceptionHandler.raiseAndHandleDBViolationException("RubixPayFrontEndServlet.java", "doService()", null, "Transaction", null, PZDBExceptionEnum.INCORRECT_QUERY, null, e.getMessage(), e.getCause(), toid, null);
        }
        finally
        {
            Database.closePreparedStatement(p);
            Database.closeResultSet(rs);
            Database.closeConnection(con);
        }



    }

}