import com.directi.pg.*;
import com.directi.pg.core.GatewayAccountService;
import com.directi.pg.core.paymentgateway.CUPPaymentGateway;
import com.manager.dao.MerchantDAO;
import com.manager.vo.MarketPlaceVO;
import com.manager.vo.MerchantDetailsVO;
import com.payment.AbstractPaymentProcess;
import com.payment.Mail.AsynchronousMailService;
import com.payment.Mail.MailEventEnum;
import com.payment.PZTransactionStatus;
import com.payment.PaymentProcessFactory;
import com.payment.cup.core.CupPaymentProcess;
import com.payment.errors.ErrorMessages;
import com.payment.exceptionHandler.PZConstraintViolationException;
import com.payment.exceptionHandler.PZExceptionHandler;
import com.payment.exceptionHandler.constraintType.PZConstraintExceptionEnum;
import com.payment.exceptionHandler.operations.PZOperations;
import com.payment.request.PZRefundRequest;
import com.payment.response.PZRefundResponse;
import com.payment.response.PZResponseStatus;
import com.payment.sms.AsynchronousSmsService;
import com.payment.statussync.StatusSyncDAO;
import org.apache.commons.lang.StringUtils;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.User;
import org.owasp.esapi.errors.ValidationException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

//import com.logicboxes.util.ApplicationProperties;
public class DoReverseTransaction extends HttpServlet
{
    private static Logger logger = new Logger(DoReverseTransaction.class.getName());
   // private boolean isLogEnabled = Boolean.parseBoolean(ApplicationProperties.getProperty("IS_LOG_ENABLED"));
   // private static TransactionLogger transactionLogger = new TransactionLogger(DoReverseTransaction.class.getName());
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request, response);
    }
    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        HttpSession session = req.getSession();
        Merchants merchants = new Merchants();
        if (!merchants.isLoggedIn(session))
        {
            res.sendRedirect("/merchant/logout.jsp");
            return;
        }
        User user =  (User)session.getAttribute("ESAPIUserSessionKey");
        StatusSyncDAO statusSyncDAO=new StatusSyncDAO();
        String trackingId=null;
        String memberId=(String) session.getAttribute("merchantid");
        String refundAmount=null;
        RefundChecker refundChecker=new RefundChecker();
        String reason=null;
        String transId=null;
        String accountId=null;
        String captureAmount=null;
        String gatewayType = null;
        String currency = null;
        String mailStatus="failed";
        String ipAddress=req.getRemoteAddr();
        String responseMessage="";
        String transStatus = "";
        String reversedAmount = "";
        String parentTrackingid="";
        String parentCapturedAmount = "";
        String parentReversedAmount = "";
        String parentTransStatus="";
        String childTrackingid="";
        String childCaptureAmount="";
        String childRefundAmount="";
        String childReversedAmount = "";
        String marketPlaceFlag="";
        String childreason="";
        AuditTrailVO auditTrailVO=new AuditTrailVO();
        MerchantDAO merchantDAO = new MerchantDAO();
        Functions functions = new Functions();
        ResourceBundle rb1 = null;
        String language_property1 = (String)session.getAttribute("language_property");
        rb1 = LoadProperties.getProperty(language_property1);
        String DoReverseTransaction_Reversal_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_Reversal_errormsg"))?rb1.getString("DoReverseTransaction_Reversal_errormsg"): "Reversal Amount Mismatch.";
        String DoReverseTransaction_refund_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_refund_errormsg"))?rb1.getString("DoReverseTransaction_refund_errormsg"): "Refund functionality is not supported. Please contact your Administrator.";
        String DoReverseTransaction_please_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_please_errormsg"))?rb1.getString("DoReverseTransaction_please_errormsg"): "Please provide valid reason and refund amount to process request.";
        String DoReverseTransaction_multiple_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_multiple_errormsg"))?rb1.getString("DoReverseTransaction_multiple_errormsg"): "Multiple Refund is not allowed for Vendor merchant.";
        String DoReverseTransaction_operation_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_operation_errormsg"))?rb1.getString("DoReverseTransaction_operation_errormsg"): "Refund Operation is successful for Tracking ID:";
        String DoReverseTransaction_decline_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_decline_errormsg"))?rb1.getString("DoReverseTransaction_decline_errormsg"): "Refund has been decline for Tracking ID:";
        String DoReverseTransaction_multiplerefund_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_multiplerefund_errormsg"))?rb1.getString("DoReverseTransaction_multiplerefund_errormsg"): "Multiple Refund is not allowed.";
        String DoReverseTransaction_partialrefund_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_partialrefund_errormsg"))?rb1.getString("DoReverseTransaction_partialrefund_errormsg"): "Partial Refund is not allowed.";
        String DoReverseTransaction_encountered_errormsg = StringUtils.isNotEmpty(rb1.getString("DoReverseTransaction_encountered_errormsg"))?rb1.getString("DoReverseTransaction_encountered_errormsg"): "Refund Operation encountered internal error while reversing for Tracking ID:";
        MarketPlaceVO marketPlaceVO=null;
        MerchantDetailsVO merchantDetailsVO=null;
        MerchantDetailsVO merchantDetailsVO1 = null;
        List<MarketPlaceVO> childDetailList=new ArrayList<>();
        try
        {
            reason = ESAPI.validator().getValidInput("reason", req.getParameter("reason"), "alphanum", 100, false);
            refundAmount = ESAPI.validator().getValidInput("refundamount", req.getParameter("refundamount"), "Amount", 20, false);
            trackingId = ESAPI.validator().getValidInput("icicitransid", req.getParameter("icicitransid"), "Numbers", 20, false);
            transId = ESAPI.validator().getValidInput("transid", req.getParameter("transid"), "Numbers", 20, false);
            accountId = ESAPI.validator().getValidInput("accountid", req.getParameter("accountid"), "Numbers", 20, true);
            captureAmount = req.getParameter("captureamount");
            currency = req.getParameter("currency");
            parentTrackingid=req.getParameter("parentTrackingid");
            parentCapturedAmount = req.getParameter("parentcaptureAmount");
            String[] ids=req.getParameterValues("checkbox_id");
            marketPlaceFlag=req.getParameter("marketPlaceFlag");
            String childhashsize=req.getParameter("childhashsize")==null?"0":req.getParameter("childhashsize");
            float childRefundAmtSum=0;
            if(ids != null && !"N".equalsIgnoreCase(marketPlaceFlag))
            {
                for(String i:ids)
                {
                    marketPlaceVO = new MarketPlaceVO();
                    childTrackingid=req.getParameter("childicicitransid"+i);
                    childreason = req.getParameter("childreason" + i)==null?reason:req.getParameter("childreason" + i);
                    Hashtable transDetails = TransactionEntry.getTransDetails(childTrackingid);
                    String childToid=(String)transDetails.get("toid");
                    merchantDetailsVO=merchantDAO.getMemberDetails(childToid);
                    childReversedAmount = (String) transDetails.get("refundamount");
                    childRefundAmount = ESAPI.validator().getValidInput("refundamount", req.getParameter("childrefundamount" + i), "Amount", 20, false);
                    childRefundAmtSum += Float.parseFloat(childRefundAmount);
                    /*transId = ESAPI.validator().getValidInput("transid", req.getParameter("childtransid"+i), "Numbers", 20, false);*/
                    childCaptureAmount = req.getParameter("childcaptureamount" + i);
                    marketPlaceVO.setMemberid(childToid);
                    marketPlaceVO.setStatus((String) transDetails.get("status"));
                    marketPlaceVO.setMerchantDetailsVO(merchantDetailsVO);
                    marketPlaceVO.setTrackingid(childTrackingid);
                    marketPlaceVO.setCapturedAmount(childCaptureAmount);
                    marketPlaceVO.setRefundAmount(childRefundAmount);
                    marketPlaceVO.setReversedAmount(childReversedAmount);
                    marketPlaceVO.setRefundReason(childreason);
                    childDetailList.add(marketPlaceVO);
                }
                if(!refundAmount.equals(String.format("%.2f",childRefundAmtSum)))
                {
                    responseMessage = DoReverseTransaction_Reversal_errormsg;
                    req.setAttribute("message",responseMessage);
                    RequestDispatcher rd = req.getRequestDispatcher("/servlet/GetReversalDetails?ctoken="+user.getCSRFToken());
                    rd.forward(req, res);
                    return;
                }
            }
            if("N".equalsIgnoreCase(marketPlaceFlag) && !"0".equalsIgnoreCase(childhashsize))//Full Refund for Parent when marketPlace Flag is N
            {
                if(Double.parseDouble(refundAmount)<=Double.parseDouble(captureAmount))
                {
                    responseMessage = DoReverseTransaction_refund_errormsg;
                    req.setAttribute("message",responseMessage);
                    RequestDispatcher rd = req.getRequestDispatcher("/servlet/GetReversalDetails?ctoken="+user.getCSRFToken());
                    rd.forward(req, res);
                    return;
                }
            }
        }
        catch (ValidationException e)
        {
            logger.error("Invalid INPUT", e);
            PZExceptionHandler.raiseAndHandleConstraintViolationException("DoReverseTransaction.java","doPost()",null,"Merchant","Validation Exception Thrown:::", PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,null,e.getMessage(),e.getCause(),memberId, PZOperations.MERCHANT_REFUND);
            responseMessage = DoReverseTransaction_please_errormsg;
            req.setAttribute("message",responseMessage);
            RequestDispatcher rd = req.getRequestDispatcher("/servlet/GetReversalDetails?ctoken="+user.getCSRFToken());
            rd.forward(req, res);
            return;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        try
        {
            try
            {
                Double.parseDouble(refundAmount);
            }
            catch (NumberFormatException n)
            {
                throw new Exception("Internal error while arsing refund amount in double");
            }
            if (!Functions.checkAccuracy(refundAmount, 2))
            {
                PZExceptionHandler.raiseConstraintViolationException("DoReverseTransaction.java","doPost()",null,"Merchant", ErrorMessages.REFUND_AMT_ACCURACY,PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,null,null,null);
            }
            if (accountId != null && !accountId.equals(""))
            {
                gatewayType = GatewayAccountService.getGatewayAccount(accountId).getGateway();
            }

            merchantDetailsVO = merchantDAO.getMemberDetails(memberId);
            if (!functions.isValueNull(merchantDetailsVO.getMemberId()))
            {
                PZExceptionHandler.raiseConstraintViolationException("DoReverseTransaction.java", "doPost()", null, "Merchant", ErrorMessages.INVALID_MEMBER_AUTHENTICATION, PZConstraintExceptionEnum.MANDATORY_PARAMETER_MISSING, null, null, null);
            }
            if(!refundChecker.isRefundAllowed(memberId))
            {
                PZExceptionHandler.raiseConstraintViolationException("DoReverseTransaction.java","doPost()",null,"Merchant", ErrorMessages.REFUND_ALLOWED,PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,null,null,null);
            }
            if (!trackingId.trim().equals("") && !transId.trim().equals("") && !reason.trim().equals(""))
            {
                Hashtable transDetails = TransactionEntry.getTransDetails(trackingId);
                transStatus = (String) transDetails.get("status");
                reversedAmount = (String) transDetails.get("refundamount");
                String transactionDate = (String) transDetails.get("transactiondate");
                SimpleDateFormat targetFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                long d = Functions.DATEDIFF(transactionDate, targetFormat.format(new Date()));
                int refundAllowedDays = 0;
                if(!"N".equalsIgnoreCase(marketPlaceFlag) && (childDetailList != null || childDetailList.size()>0))
                {
                    for(int i=0;i<childDetailList.size();i++)
                    {
                        marketPlaceVO=(MarketPlaceVO)childDetailList.get(i);
                        logger.error("marketPlaceVO.getMemberid()--------------->"+marketPlaceVO.getMemberid());
                        if(!refundChecker.isRefundAllowed(marketPlaceVO.getMemberid()))
                        {
                            PZExceptionHandler.raiseConstraintViolationException("DoReverseTransaction.java","doPost()",null,"Merchant", ErrorMessages.VENDOR_REFUND_ALLOWED,PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,null,null,null);
                        }
                        merchantDetailsVO1=marketPlaceVO.getMerchantDetailsVO();
                        String childstatus=marketPlaceVO.getStatus();
                        if("N".equalsIgnoreCase(merchantDetailsVO1.getMultipleRefund()) && childstatus.equalsIgnoreCase(PZTransactionStatus.REVERSED.toString())){
                            responseMessage=DoReverseTransaction_multiple_errormsg;
                            req.setAttribute("message",responseMessage);
                            RequestDispatcher rd = req.getRequestDispatcher("/reverselist.jsp?ctoken="+user.getCSRFToken());
                            rd.forward(req, res);
                            return;
                        }
                        refundAllowedDays = Integer.parseInt(merchantDetailsVO1.getRefundAllowedDays());
                        if (d > refundAllowedDays)
                        {
                            PZExceptionHandler.raiseConstraintViolationException("DoReverseTransaction.java", "doPost()", null, "Merchant", ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION, PZConstraintExceptionEnum.INVALID_REFUND_REQUEST, null, null, null);
                        }
                    }
                }
                if(functions.isValueNull(parentTrackingid) && !"N".equalsIgnoreCase(marketPlaceFlag))
                {
                    Hashtable parentTransDetails = TransactionEntry.getTransDetails(parentTrackingid);
                    parentReversedAmount = (String) parentTransDetails.get("refundamount");
                    String toid=(String) parentTransDetails.get("toid");
                    merchantDetailsVO1 = merchantDAO.getMemberDetails(toid);
                    parentTransStatus=(String) parentTransDetails.get("status");
                    if(!refundChecker.isRefundAllowed(toid))
                    {
                        PZExceptionHandler.raiseConstraintViolationException("DoReverseTransaction.java","doPost()",null,"Merchant", ErrorMessages.PARENT_REFUND_ALLOWED,PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,null,null,null);
                    }
                    refundAllowedDays = Integer.parseInt(merchantDetailsVO1.getRefundAllowedDays());
                    if (d > refundAllowedDays)
                    {
                        PZExceptionHandler.raiseConstraintViolationException("DoReverseTransaction.java", "doPost()", null, "Merchant", ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION, PZConstraintExceptionEnum.INVALID_REFUND_REQUEST, null, null, null);
                    }
                }
                refundAllowedDays = Integer.parseInt(merchantDetailsVO.getRefundAllowedDays());
                if (d > refundAllowedDays)
                {
                    PZExceptionHandler.raiseConstraintViolationException("DoReverseTransaction.java", "doPost()", null, "Merchant", ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION, PZConstraintExceptionEnum.INVALID_REFUND_REQUEST, null, null, null);
                }

                if (gatewayType != null && CUPPaymentGateway.GATEWAY_TYPE.equals(gatewayType))
                {
                    if (!trackingId.trim().equals("") && !transId.trim().equals("") && !reason.trim().equals(""))
                    {
                        AbstractPaymentProcess payment = new CupPaymentProcess();
                        PZRefundRequest refundRequest = new PZRefundRequest();
                        refundRequest.setMemberId(Integer.parseInt(memberId));
                        refundRequest.setAccountId(Integer.parseInt(accountId));
                        refundRequest.setTrackingId(Integer.parseInt(trackingId));
                        refundRequest.setRefundAmount(refundAmount);
                        refundRequest.setRefundReason(reason);
                        refundRequest.setReversedAmount(reversedAmount);
                        PZRefundResponse response = payment.refund(refundRequest);
                        PZResponseStatus status = response.getStatus();
                        if (PZResponseStatus.ERROR.equals(status))
                        {
                            throw new SystemError();
                        }
                        else if (PZResponseStatus.FAILED.equals(status))
                        {
                            responseMessage="Refund Operation is failed for Tracking ID: "+trackingId;
                        }
                        else if (response != null && (response.getStatus()).equals(PZResponseStatus.SUCCESS))
                        {   mailStatus="successful";
                            responseMessage=DoReverseTransaction_operation_errormsg+trackingId;
                            statusSyncDAO.updateAllRefundTransactionFlowFlag(trackingId,"reversed");
                        }
                        else
                        {
                            responseMessage=DoReverseTransaction_decline_errormsg+trackingId;
                        }

                    }
                }
                else //Generic Reverse for all gateways
                {
                    AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(trackingId), Integer.parseInt(accountId));

                    PZRefundRequest refundRequest = new PZRefundRequest();
                    refundRequest.setAccountId(Integer.valueOf(accountId));
                    if(functions.isValueNull(parentTrackingid) && !"N".equalsIgnoreCase(marketPlaceFlag))
                    {
                        refundRequest.setTrackingId(Integer.parseInt(parentTrackingid));
                        refundRequest.setRequestedTrackingid(Integer.parseInt(trackingId));
                        refundRequest.setReversedAmount(parentReversedAmount);
                        refundRequest.setRequestedReversedAmount(reversedAmount);
                        refundRequest.setCaptureAmount(parentCapturedAmount);
                        refundRequest.setRequestedCaptureAmount(captureAmount);
                    }
                    else
                    {
                        refundRequest.setTrackingId(Integer.parseInt(trackingId));
                        refundRequest.setCaptureAmount(captureAmount);
                        refundRequest.setReversedAmount(reversedAmount);
                        if(!"N".equalsIgnoreCase(marketPlaceFlag) && (childDetailList != null || childDetailList.size()>0))
                        {
                            refundRequest.setChildDetailsList(childDetailList);
                        }
                    }
                    refundRequest.setMarketPlaceFlag(marketPlaceFlag);
                    refundRequest.setMemberId(Integer.parseInt(memberId));
                    refundRequest.setRefundAmount(refundAmount);
                    refundRequest.setRefundReason(reason);
                    refundRequest.setIpAddress(ipAddress);
                    refundRequest.setTransactionStatus(transStatus);
                    auditTrailVO.setActionExecutorId(memberId);
                    //auditTrailVO.setActionExecutorName(user.getRoles().toString());
                    //auditTrailVO.setActionExecutorName(session.getAttribute("username").toString());
                    String role = "";
                    for (String s:user.getRoles())
                    {
                        role=role.concat(s);
                    }
                    auditTrailVO.setActionExecutorName(role+"-"+session.getAttribute("username"));
                    //auditTrailVO.setActionExecutorName("Merchant");
                    PZRefundResponse refundResponse =null;
                    PZResponseStatus responseStatus =null;
                    refundChecker=new RefundChecker();
                    refundRequest.setAuditTrailVO(auditTrailVO);
                    refundRequest.setCurrency(currency);

                    logger.debug("isMultipleRefund----"+merchantDetailsVO.getMultipleRefund());
                    logger.debug("status----"+transStatus);
                    if(refundChecker.isRefundAllowed(memberId))
                    {
                        if("N".equalsIgnoreCase(merchantDetailsVO.getPartialRefund()) && Double.parseDouble(refundRequest.getCaptureAmount())!=Double.parseDouble(refundRequest.getRefundAmount()))
                        {
                            responseMessage=DoReverseTransaction_partialrefund_errormsg;
                        }
                        else if("N".equalsIgnoreCase(merchantDetailsVO.getMultipleRefund()) && transStatus.equalsIgnoreCase(PZTransactionStatus.REVERSED.toString())){
                            responseMessage=DoReverseTransaction_multiplerefund_errormsg;
                        }
                        else
                        {
                            boolean isAllowed = true;
                            if (functions.isValueNull(parentTrackingid) && !"N".equalsIgnoreCase(marketPlaceFlag))
                            {
                                if ("N".equalsIgnoreCase(merchantDetailsVO1.getMultipleRefund()) && parentTransStatus.equalsIgnoreCase(PZTransactionStatus.REVERSED.toString()))
                                {
                                    responseMessage = "Multiple Refund is not allowed for Parent Merchant.";
                                    isAllowed = false;
                                }
                            }
                            if (isAllowed)
                            {
                                refundResponse = paymentProcess.refund(refundRequest);
                                responseStatus = refundResponse.getStatus();
                                if (PZResponseStatus.ERROR.equals(responseStatus))
                                {
                                    logger.error("Refund Operation encountered internal error while reversing " + refundResponse.getResponseDesceiption());
                                    if (functions.isValueNull(refundResponse.getResponseDesceiption()))
                                    {
                                        responseMessage = refundResponse.getResponseDesceiption();
                                    }
                                    else
                                    {
                                        responseMessage = DoReverseTransaction_encountered_errormsg + trackingId;
                                    }

                                }
                                else if (PZResponseStatus.FAILED.equals(responseStatus))
                                {
                                    responseMessage = "Refund Operation is failed for Tracking ID: " + trackingId;
                                }
                                else if (PZResponseStatus.SUCCESS.equals(responseStatus))
                                {
                                    mailStatus = "successful";
                                    responseMessage = DoReverseTransaction_operation_errormsg + trackingId;
                                    statusSyncDAO.updateAllRefundTransactionFlowFlag(trackingId, "reversed");
                                }
                                else if (PZResponseStatus.PENDING.equals(responseStatus))
                                {
                                    responseMessage = refundResponse.getResponseDesceiption();
                                    mailStatus = responseMessage;

                                }
                            }
                        }
                    }
                    else
                    {
                        responseMessage="Refund is not allowed.";
                    }
                }

                if ("Y".equalsIgnoreCase(merchantDetailsVO.getEmailSent()) && "Y".equalsIgnoreCase(merchantDetailsVO.getIsRefundEmailSent()))
                {
                    AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                    asynchronousMailService.sendEmail(MailEventEnum.REFUND_TRANSACTION, trackingId, mailStatus, reason, null);
                }
                if (functions.isValueNull(parentTrackingid) && !"N".equalsIgnoreCase(marketPlaceFlag))
                {
                    if ("Y".equalsIgnoreCase(merchantDetailsVO1.getEmailSent()) && "Y".equalsIgnoreCase(merchantDetailsVO1.getIsRefundEmailSent()))
                    {
                        AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                        asynchronousMailService.sendEmail(MailEventEnum.REFUND_TRANSACTION, parentTrackingid, mailStatus, reason, null);
                    }
                }
                if(!"N".equalsIgnoreCase(marketPlaceFlag) && (childDetailList != null || childDetailList.size()>0))
                {
                    for (int i = 0; i < childDetailList.size(); i++)
                    {
                        marketPlaceVO = (MarketPlaceVO) childDetailList.get(i);
                        merchantDetailsVO1 = marketPlaceVO.getMerchantDetailsVO();
                        logger.error("marketPlaceVO.getTrackingid()---------->"+marketPlaceVO.getTrackingid());
                        if(functions.isValueNull(marketPlaceVO.getRefundReason()))
                            childreason=marketPlaceVO.getRefundReason();
                        else
                            childreason=reason;
                        if ("Y".equalsIgnoreCase(merchantDetailsVO1.getEmailSent()) && "Y".equalsIgnoreCase(merchantDetailsVO1.getIsRefundEmailSent()))
                        {
                            AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                            asynchronousMailService.sendEmail(MailEventEnum.REFUND_TRANSACTION, marketPlaceVO.getTrackingid(), mailStatus, reason, null);
                        }
                    }
                }
                AsynchronousSmsService smsService=new AsynchronousSmsService();
                smsService.sendSMS(MailEventEnum.REFUND_TRANSACTION,trackingId,mailStatus,reason,null);

            }
            else
            {
                throw new Exception("Tracking ID should not be empty");
            }
        }
        catch (PZConstraintViolationException cve)
        {
            logger.error("PZConstraintViolationException in DoReverseTransaction---",cve);
            PZExceptionHandler.handleCVEException(cve,memberId,PZOperations.MERCHANT_REFUND);
            responseMessage = cve.getPzConstraint().getMessage();
            req.setAttribute("message",responseMessage);
            RequestDispatcher rd = req.getRequestDispatcher("/reverselist.jsp?ctoken="+user.getCSRFToken());
            rd.forward(req, res);
            return;
        }
        catch (Exception e)
        {
            responseMessage="Refund Operation can't be executed for Tracking ID: "+trackingId;
            logger.error("Exception", e);
            PZExceptionHandler.raiseAndHandleGenericViolationException("DoReverseTransaction.java","doPost()",null,"Merchant",ErrorMessages.REFUND_EXCEPTION+trackingId,null,e.getMessage(),e.getCause(),memberId,PZOperations.MERCHANT_REFUND);
        }

        req.setAttribute("message",responseMessage);
        RequestDispatcher rd = req.getRequestDispatcher("/reverselist.jsp?ctoken="+user.getCSRFToken());
        rd.forward(req, res);

    }//post ends

}