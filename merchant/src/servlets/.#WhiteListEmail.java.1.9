import com.directi.pg.Functions;
import com.directi.pg.Logger;
import com.directi.pg.Merchants;
import com.directi.pg.WhitelistingDetailsVO;
import com.manager.dao.WhiteListDAO;
import com.manager.vo.PaginationVO;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.validators.InputFields;
import com.payment.validators.InputValidator;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.User;
import org.owasp.esapi.ValidationErrorList;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Mahima on 1/9/2016.
 */
public class WhiteListEmail extends HttpServlet
{
    private static Logger log = new Logger(WhiteListEmail.class.getName());
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request, response);
    }
    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("ESAPIUserSessionKey");
        Merchants merchants = new Merchants();
        StringBuffer stringBuffer=new StringBuffer();
        Functions functions=new Functions();
        WhiteListDAO whiteListDAO=new WhiteListDAO();
        PaginationVO paginationVO=new PaginationVO();
        List<WhitelistingDetailsVO> listOfEmail = null;

        if (!merchants.isLoggedIn(session))
        {   log.debug("member is logout ");
            res.sendRedirect("/merchant/Logout.jsp");
            return;
        }
        String memberid = (String) session.getAttribute("merchantid");
        String emailAddress=req.getParameter("emailaddr");
        String name=req.getParameter("name");
        String ipAddress=req.getParameter("ipAddress");
        String action=req.getParameter("upload");
        String delete=req.getParameter("delete");
        String error="";
        String EOL="<br>";

        paginationVO.setPageNo(Functions.convertStringtoInt(req.getParameter("SPageno"),1));
        paginationVO.setPage(WhiteListEmail.class.getName());
        paginationVO.setCurrentBlock(Functions.convertStringtoInt(req.getParameter("currentblock"),1));
        paginationVO.setRecordsPerPage(Functions.convertStringtoInt(req.getParameter("SRecords"),15));
        paginationVO.setInputs("&emailaddr="+emailAddress+"&name="+name+"&ipAddress="+ipAddress);

        boolean isValid = true;
        if ("upload".equalsIgnoreCase(action))
            isValid = false;
        try
        {
            error = error+ validateOptionalParameters(req);
            if(functions.isValueNull(error))
            {
                req.setAttribute("error", error);
                RequestDispatcher rd = req.getRequestDispatcher("/whitelistEmail.jsp?ctoken="+user.getCSRFToken());
                rd.forward(req, res);
            }
            if (!ESAPI.validator().isValidInput("emailaddr", emailAddress, "Email", 50, isValid))
            {
                log.debug("Invalid email address");
                stringBuffer.append("Invalid Email or Email should not be empty" + EOL);
            }
            if(functions.isValueNull(name))
            {
                if (!ESAPI.validator().isValidInput("name", name, "SafeString", 50, false))
                {
                    log.debug("Invalid Card Holder Name.");
                    stringBuffer.append("Invalid Card Holder Name." + EOL);
                }
            }
            if(functions.isValueNull(ipAddress))
            {
                if (!ESAPI.validator().isValidInput("ipAddress", ipAddress, "IPAddress", 50, false))
                {
                    log.debug("Invalid IP Address.");
                    stringBuffer.append("Invalid IP Address." + EOL);
                }
            }
            /*if(functions.isValueNull(memberid)&& functions.isValueNull(accountID)){
                boolean valid=whiteListDAO.getMemberidAccountid(memberid,accountID);
                if(valid==false){
                    stringBuffer.append("MemberID/AccountID NOT mapped.");
                }
            }*/
            if (stringBuffer.length() > 0)
            {
                req.setAttribute("error", stringBuffer.toString());
                RequestDispatcher rd = req.getRequestDispatcher("/whitelistEmail.jsp?ctoken=" + user.getCSRFToken());
                rd.forward(req, res);
                return;
            }

            listOfEmail=whiteListDAO.getWhiteListEmailDetailsForMerchantPage(emailAddress,name,ipAddress, memberid,paginationVO);
            if ("upload".equalsIgnoreCase(action))
            {
                if(listOfEmail.size()<=0)
                {
                    whiteListDAO.addCard("","",emailAddress,"",memberid,"","","");
                    stringBuffer.append("Records Uploaded Successfully.");
                }
                else{
                    stringBuffer.append("Records Already Uploaded.");
                }
                listOfEmail=whiteListDAO.getWhiteListEmailDetailsForMerchantPage(emailAddress,name,ipAddress, memberid,paginationVO);
            }
            String[] ids=req.getParameterValues("id");
            if(functions.isValueNull(delete))
            {
                for(String id : ids)
                {
                    whiteListDAO.updateCardEmailEntry(id);
                }
                stringBuffer.append("Records deleted successfully.");
                listOfEmail = whiteListDAO.getWhiteListEmailDetailsForMerchantPage(emailAddress,name,ipAddress, memberid, paginationVO);
            }
        }
        catch (PZDBViolationException e)
        {
            e.printStackTrace();
        }
        req.setAttribute("error",error);
        req.setAttribute("error", stringBuffer.toString());
        req.setAttribute("merchantid",memberid);
        req.setAttribute("listOfEmail",listOfEmail);
        req.setAttribute("paginationVO",paginationVO);
        RequestDispatcher rd = req.getRequestDispatcher("/whitelistEmail.jsp?ctoken="+user.getCSRFToken());
        rd.forward(req, res);
        return;
    }
    private String validateOptionalParameters(HttpServletRequest req)
    {
        InputValidator inputValidator = new InputValidator();
        String error = "";
        String EOL = "<BR>";
        List<InputFields>  inputFieldsListOptional = new ArrayList<InputFields>();
        inputFieldsListOptional.add(InputFields.PAGENO);
        inputFieldsListOptional.add(InputFields.RECORDS);

        ValidationErrorList errorList = new ValidationErrorList();
        inputValidator.InputValidations(req, inputFieldsListOptional, errorList, true);

        if(!errorList.isEmpty())
        {
            for(InputFields inputFields :inputFieldsListOptional)
            {
                if(errorList.getError(inputFields.toString())!=null)
                {
                    log.debug(errorList.getError(inputFields.toString()).getLogMessage());
                    error = error+errorList.getError(inputFields.toString()).getMessage()+EOL;
                }
            }
        }
        return error;
    }
}
