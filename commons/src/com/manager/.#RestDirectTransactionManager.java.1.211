package com.manager;

import com.directi.pg.*;
import com.directi.pg.core.GatewayAccount;
import com.directi.pg.core.GatewayAccountService;
import com.directi.pg.core.GatewayType;
import com.directi.pg.core.GatewayTypeService;
import com.directi.pg.core.paymentgateway.AbstractPaymentGateway;
import com.directi.pg.core.paymentgateway.QwipiPaymentGateway;
import com.directi.pg.core.valueObjects.*;
import com.fraud.FraudChecker;
import com.google.gson.Gson;
import com.manager.helper.TransactionHelper;
import com.manager.utils.TransactionUtil;
import com.manager.vo.*;
import com.payment.AbstractPaymentProcess;
import com.payment.Mail.AsynchronousMailService;
import com.payment.Mail.MailEventEnum;
import com.payment.Mail.MailPlaceHolder;
import com.payment.PZTransactionStatus;
import com.payment.PaymentProcessFactory;
import com.payment.checkers.PaymentChecker;
import com.payment.clearsettle.ClearSettleUtills;
import com.payment.common.core.*;
import com.payment.cupUPI.*;
import com.payment.errors.ErrorMessages;
import com.payment.exceptionHandler.*;
import com.payment.exceptionHandler.constraintType.PZConstraintExceptionEnum;
import com.payment.exceptionHandler.constraintType.PZDBExceptionEnum;
import com.payment.exceptionHandler.constraintType.PZTechnicalExceptionEnum;
import com.payment.exceptionHandler.errorcode.errorcodeEnum.ErrorName;
import com.payment.exceptionHandler.errorcode.errorcodeVo.ErrorCodeListVO;
import com.payment.exceptionHandler.operations.PZOperations;
import com.payment.neteller.NetellerUtils;
import com.payment.neteller.response.Links;
import com.payment.neteller.response.NetellerResponse;
import com.payment.p4.gateway.P4ResponseVO;
import com.payment.p4.gateway.P4Utils;
import com.payment.paysend.PaySendUtils;
import com.payment.plmp.PLMPUtils;
import com.payment.request.PZCancelRequest;
import com.payment.request.PZCaptureRequest;
import com.payment.request.PZPayoutRequest;
import com.payment.request.PZRefundRequest;
import com.payment.response.*;
import com.payment.sofort.IdealPaymentGateway;
import com.payment.sofort.SofortUtility;
import com.payment.sofort.VO.SofortResponseVO;
import com.payment.statussync.StatusSyncDAO;
import com.payment.trustly.TrustlyUtils;
import com.payment.unicredit.UnicreditUtils;
import com.payment.utils.TransactionUtilsDAO;
import com.payment.validators.RestCommonInputValidator;
import com.payment.validators.vo.CommonValidatorVO;
import com.payment.validators.vo.DirectCaptureValidatorVO;
import com.payment.validators.vo.DirectRefundValidatorVO;
import com.payment.vouchermoney.VoucherMoneyResponse;
import com.payment.vouchermoney.VoucherMoneyUtils;
import com.sofort.lib.products.response.IDealBanksResponse;
import com.sofort.lib.products.response.parts.IDealBank;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.User;
import org.owasp.esapi.errors.AuthenticationAccountsException;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.URI;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by Sneha on 3/30/2016.
 */
public class RestDirectTransactionManager
{
    final static ResourceBundle rb = LoadProperties.getProperty("com.directi.pg.PaysecServlet");
    final static ResourceBundle RB1 = LoadProperties.getProperty("com.directi.pg.InPayServlet");
    final static ResourceBundle RB2 = LoadProperties.getProperty("com.directi.pg.AsyncRedirectionUrl");
    final static ResourceBundle RB3 = LoadProperties.getProperty("com.directi.pg.PfsServlet");
    final static ResourceBundle paysafecard = LoadProperties.getProperty("com.directi.pg.paysafecard");
    private static Logger logger = new Logger(RestDirectTransactionManager.class.getName());
    private static TransactionLogger transactionLogger = new TransactionLogger(RestDirectTransactionManager.class.getName());
    private static String defaultchargepercent = "500";
    private static String INR_defaulttaxpercent = "1224";
    private static String USD_defaulttaxpercent = "1224";
    @Context
    HttpServletRequest request1;
    private Functions functions = new Functions();
    private TransactionUtil transactionUtil = new TransactionUtil();

    public static String generateRandom(int size)
    {
        String tokenData = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        int len = tokenData.length();
        Date date = new Date();
        Random rand = new Random(date.getTime());
        StringBuffer token = new StringBuffer();
        int index = -1;

        for (int i = 0; i < size; i++)
        {
            index = rand.nextInt(len);
            token.append(tokenData.substring(index, index + 1));
        }
        return token.toString();
    }

    public String processExchangerCapture(CommonValidatorVO commonValidatorVO) throws PZConstraintViolationException,PZDBViolationException
    {
        AsyncAPICall asyncAPICall = AsyncAPICall.getInstance();
        String isUpdated = "";
        asyncAPICall.customerValidation(commonValidatorVO);

        isUpdated = getPaymentUpdate(commonValidatorVO);

        return isUpdated;
    }

    public DirectKitResponseVO processValidateandUpdateExchanger(CommonValidatorVO commonValidatorVO) throws PZConstraintViolationException,PZDBViolationException
    {
        ActionEntry entry = new ActionEntry();
        AuditTrailVO auditTrailVO = new AuditTrailVO();
        CommResponseVO transRespDetails = new CommResponseVO();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        PaymentManager paymentManager = new PaymentManager();

        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        String respDateTime = String.valueOf(dateFormat.format(date));

        paymentManager.updateCommonForExchanger(commonValidatorVO, "capturesuccess");
        entry.actionEntryForCommon(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getAmount(), ActionEntry.ACTION_CAPTURE_SUCCESSFUL, ActionEntry.STATUS_CAPTURE_SUCCESSFUL, transRespDetails, auditTrailVO, commonValidatorVO.getAddressDetailsVO().getIp());

        return null;
    }

    public DirectKitResponseVO processExchanger(CommonValidatorVO commonValidatorVO) throws PZConstraintViolationException,PZDBViolationException
    {
        ActionEntry entry = new ActionEntry();
        PaymentManager paymentManager = new PaymentManager();
        TransactionUtilsDAO transactionUtilsDAO = new TransactionUtilsDAO();
        AuditTrailVO auditTrailVO = new AuditTrailVO();
        CommResponseVO transRespDetails = new CommResponseVO();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();

        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        String respDateTime = String.valueOf(dateFormat.format(date));

        GenericTransDetailsVO genericTransDetailsVO = commonValidatorVO.getTransDetailsVO();
        GenericAddressDetailsVO genericAddressDetailsVO = commonValidatorVO.getAddressDetailsVO();
        int trackingId = 0;
        auditTrailVO.setActionExecutorId(commonValidatorVO.getMerchantDetailsVO().getMemberId());
        auditTrailVO.setActionExecutorName("Exchanger");
        trackingId = paymentManager.insertAuthStartedTransactionEntryForAsyncFlow(commonValidatorVO, auditTrailVO);

        transRespDetails.setAmount(genericTransDetailsVO.getAmount());
        transRespDetails.setTransactionStatus("success");
        transRespDetails.setDescription("Exchanger Transaction");
        transRespDetails.setStatus("success");
        transRespDetails.setTransactionType("sale");

        entry.actionEntryForCommon(String.valueOf(trackingId), genericTransDetailsVO.getAmount(), ActionEntry.ACTION_AUTHORISTION_SUCCESSFUL, ActionEntry.STATUS_AUTHORISTION_SUCCESSFUL, transRespDetails, auditTrailVO, genericAddressDetailsVO.getIp());
        transactionUtilsDAO.updateTransactionAfterResponse("transaction_common", "authsuccessful", genericTransDetailsVO.getAmount(), genericAddressDetailsVO.getIp(), "", "", "Exchanger Transaction", respDateTime, String.valueOf(trackingId));

        directKitResponseVO.setTrackingId(String.valueOf(trackingId));
        return directKitResponseVO;
    }

    private static URI getBaseURI() {
        return UriBuilder.fromUri("http://localhost:8081/transactionServices").build();
    }

    public String getCustomerValidation(CommonValidatorVO commonValidatorVO)
    {
        ClientConfig config = new DefaultClientConfig();
        config.getFeatures().put(ClientConfig.FEATURE_DISABLE_XML_SECURITY, true);
        Client client = Client.create(config);
        WebResource service = client.resource(getBaseURI());
        service.setProperty("Content-type", "application/json");
        service.setProperty("Content-Length", "1000");

        //TODO to set customerAccount
        return service.path("REST").path("v1").path("customerValidation").type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(String.class, commonValidatorVO);
    }

    public String getPaymentUpdate(CommonValidatorVO commonValidatorVO)throws  PZDBViolationException
    {
        ActionEntry entry = new ActionEntry();
        AuditTrailVO auditTrailVO = new AuditTrailVO();
        CommResponseVO transRespDetails = new CommResponseVO();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        PaymentManager paymentManager = new PaymentManager();

        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        String respDateTime = String.valueOf(dateFormat.format(date));

        ClientConfig config = new DefaultClientConfig();
        config.getFeatures().put(ClientConfig.FEATURE_DISABLE_XML_SECURITY, true);
        Client client = Client.create(config);
        WebResource service = client.resource(getBaseURI());
        service.setProperty("Content-type", "application/json");
        service.setProperty("Content-Length", "1000");

        //Called BetConstruct's UpdatePayment

        service.path("REST").path("v1").path("paymentUpdate").type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(String.class, commonValidatorVO);

        paymentManager.updateCommonForExchanger(commonValidatorVO, "capturesuccess");
        entry.actionEntryForCommon(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getAmount(), ActionEntry.ACTION_CAPTURE_SUCCESSFUL, ActionEntry.STATUS_CAPTURE_SUCCESSFUL, transRespDetails, auditTrailVO, commonValidatorVO.getAddressDetailsVO().getIp());

        return "";
    }

    public DirectKitResponseVO processDirectTransactionUPI(CommonValidatorVO commonValidatorVO) throws  PZGenericConstraintViolationException, PZDBViolationException, PZConstraintViolationException
    {
        ActionEntry entry = new ActionEntry();
        Functions functions=new Functions();
        PaymentManager paymentManager=new PaymentManager();
        TransactionUtilsDAO transactionUtilsDAO=new TransactionUtilsDAO();
        AbstractPaymentGateway pg = null;
        Transaction transaction = new Transaction();
        AuditTrailVO auditTrailVO=new AuditTrailVO();
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();

        MerchantDetailsVO merchantDetailsVO= commonValidatorVO.getMerchantDetailsVO();
        GenericAddressDetailsVO genericAddressDetailsVO= commonValidatorVO.getAddressDetailsVO();
        GenericTransDetailsVO genericTransDetailsVO= commonValidatorVO.getTransDetailsVO();
        GenericCardDetailsVO commCardDetailsVO = commonValidatorVO.getCardDetailsVO();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        CommRequestVO commRequestVO1 = new CommRequestVO();
        CommTransactionDetailsVO transDetailsVO = new CommTransactionDetailsVO();
        CommAddressDetailsVO commAddressDetailsVO = new CommAddressDetailsVO();
        RecurringBillingVO recurringBillingVO = null;
        TokenManager tokenManager = new TokenManager();
        RecurringManager recurringManager = new RecurringManager();
        RestDirectTransactionManager restDirectTransactionManager = new RestDirectTransactionManager();
        UnionPayInternationalUtils unionPayInternationalUtils=new UnionPayInternationalUtils();

        if(commonValidatorVO.getRecurringBillingVO()!=null)
        {
            recurringBillingVO = commonValidatorVO.getRecurringBillingVO();
        }
        if(!functions.isValueNull(genericTransDetailsVO.getRedirectUrl()))
        {
            genericTransDetailsVO.setRedirectUrl(" ");
        }

        String toid=merchantDetailsVO.getMemberId();
        String respStatus=null;
        String respPaymentId=null;
        String errorName = "";
        String mailtransactionStatus="Failed";
        String billingDiscriptor="";
        String respRemark="";
        String machineid="";
        String respDateTime=null;
        String fStatus = "";
        String accountId = merchantDetailsVO.getAccountId();
        int trackingId = 0;
        String paymodeid = commonValidatorVO.getPaymentType();
        String cardtypeid = commonValidatorVO.getCardType();

        //account details
        String fromtype = GatewayAccountService.getGatewayAccount(accountId).getGateway();
        GatewayAccount account = GatewayAccountService.getGatewayAccount(String.valueOf(accountId));
        GatewayType gatewayType = GatewayTypeService.getGatewayType(account.getPgTypeId());
        String tableName = Database.getTableName(gatewayType.getGateway());

        transDetailsVO.setResponseHashInfo(commonValidatorVO.getTransDetailsVO().getResponseHashInfo());
        transDetailsVO.setAmount(commonValidatorVO.getTransDetailsVO().getAmount()); //Amount * 100 according to the docs
        transDetailsVO.setCurrency(commonValidatorVO.getTransDetailsVO().getCurrency());
        transDetailsVO.setOrderId(commonValidatorVO.getTransDetailsVO().getOrderId());
        transDetailsVO.setOrderDesc(commonValidatorVO.getTransDetailsVO().getOrderDesc());
        transDetailsVO.setRedirectMethod(commonValidatorVO.getTransDetailsVO().getRedirectMethod());
        //commAddressDetailsVO.setCardHolderIpAddress(commonValidatorVO.getAddressDetailsVO().getIp());
        commAddressDetailsVO.setTmpl_amount(commonValidatorVO.getAddressDetailsVO().getTmpl_amount());
        commAddressDetailsVO.setTmpl_currency(commonValidatorVO.getAddressDetailsVO().getTmpl_currency());
        String phone=commonValidatorVO.getAddressDetailsVO().getPhone();
        String phoneCC=commonValidatorVO.getAddressDetailsVO().getTelnocc();
        transactionLogger.debug("phone --------- "+phone);
        transactionLogger.debug("phoneCC --------- "+phoneCC);
      //  commAddressDetailsVO.setPhone();

        commRequestVO1.setTransDetailsVO(transDetailsVO);
        commRequestVO1.setAddressDetailsVO(commAddressDetailsVO);
        auditTrailVO.setActionExecutorId(toid);
        auditTrailVO.setActionExecutorName("REST API");
        if(genericAddressDetailsVO.getEmail() == null)
            genericAddressDetailsVO.setEmail(" ");

        if (functions.isValueNull(commonValidatorVO.getTerminalVO().getTerminalId()))
            commonValidatorVO.setTerminalId(commonValidatorVO.getTerminalVO().getTerminalId());

        // Step 1 ::::::  Bin Check For China Card Or Other than china Card :::::
       // transactionLogger.debug("Card Number ---"+commCardDetailsVO.getCardNum());
      //  transactionLogger.debug("Inside China Card Condition ---");
        String cardNumber=commCardDetailsVO.getCardNum();
       // transactionLogger.debug("cardNumber ----"+cardNumber);
        String phoneNumber=commAddressDetailsVO.getPhone();
        transactionLogger.debug("phoneNumber --"+phoneNumber);
        String firstSix = functions.getFirstSix(cardNumber);
        transactionLogger.error("First Six ---"+firstSix);
        boolean checkBin_Result=unionPayInternationalUtils.checkBinFromFile(firstSix);
        transactionLogger.error("checkBin_Result ---------"+checkBin_Result);

        if (checkBin_Result)  // If China Card
        {
            transactionLogger.debug("Inside China Condition");
            //Step 2 ::: Enrollment Check From Our DB :::
            boolean isEnrolled_Result=unionPayInternationalUtils.isEnrolledCard(cardNumber,phoneNumber);
            transactionLogger.error("isEnrolled_Result ----------"+isEnrolled_Result);
            if (isEnrolled_Result) // already enrolled card to do direct purchase
            {
                transactionLogger.debug("isEnrolled_Result ----"+isEnrolled_Result);
                Date date3 = new Date();
                transactionLogger.debug("DirectTransactionRESTIMPL processDirectTransaction start #########" + date3.getTime());
                directKitResponseVO = restDirectTransactionManager.processDirectTransaction(commonValidatorVO);
                transactionLogger.debug("DirectTransactionRESTIMPL processDirectTransaction end #########" + new Date().getTime());
                transactionLogger.debug("DirectTransactionRESTIMPL processDirectTransaction diff #########" + (new Date().getTime() - date3.getTime()));

                return directKitResponseVO;

            }
            else    // not  enrolled card do sms+enrollment
            {
                transactionLogger.error("Inside else  isEnrolled_Result ----"+isEnrolled_Result);
                //Step 2 ::: sms stared entry
                transactionLogger.debug("trackingId 1111111-------------"+trackingId);
                transactionLogger.debug("trackingId 222222222-------------"+commonValidatorVO.getTrackingid());
                paymentManager.insertSMSStartedTransactionEntryForCupUPIRest(commonValidatorVO,auditTrailVO,commRequestVO1,"transaction_common");


               // paymentManager.insertSMSStartedTransactionEntryForCupUPI(commonValidatorVO, String.valueOf(trackingId), auditTrailVO); //smsstared entry
                UnionPayInternationalPaymentGateway unionPayInternationalPaymentGateway=new UnionPayInternationalPaymentGateway(accountId);
                UnionPayInternationalUtility unionPayInternationalUtility=new UnionPayInternationalUtility();
                CommRequestVO commRequestVO = null;
                commRequestVO= unionPayInternationalUtility.getUnionPayRequestVO(commonValidatorVO);
                UnionPayInternationalResponseVO transRespDetails=null;
                transRespDetails = (UnionPayInternationalResponseVO) unionPayInternationalPaymentGateway.processSendSMS(commonValidatorVO.getTrackingid(),commRequestVO);
                transactionLogger.error("sms sending status ---------"+transRespDetails.getStatus());

                if (transRespDetails.getStatus().equalsIgnoreCase("success"))
                {
                    directKitResponseVO.setStatus("success");
                    fStatus = "Y";
                    respStatus="smsstarted";
                    transactionUtilsDAO.updateTransactionAfterResponse(tableName,respStatus,commonValidatorVO.getTransDetailsVO().getAmount(),genericAddressDetailsVO.getIp(),machineid,transRespDetails.getTransactionId(),transRespDetails.getRemark(),respDateTime,commonValidatorVO.getTrackingid());
                }
                else
                {
                    transactionLogger.debug("Insdei else fail of sms");
                    directKitResponseVO.setStatus("fail");
                    fStatus = "N";
                    respStatus="authfailed";
                    transactionLogger.debug("Trackingid --------------------------hfdvdvd-ddd------------- "+commonValidatorVO.getTrackingid());
                    CommonPaymentProcess paymentProcess=new CommonPaymentProcess();
                    paymentProcess.actionEntry(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getAmount(), ActionEntry.ACTION_AUTHORISTION_FAILED, ActionEntry.STATUS_AUTHORISTION_FAILED, transRespDetails, commRequestVO,auditTrailVO);
                    transactionLogger.debug("After action entry ----------------");
                    transactionUtilsDAO.updateTransactionAfterResponse(tableName,respStatus,commonValidatorVO.getTransDetailsVO().getAmount(),genericAddressDetailsVO.getIp(),machineid,transRespDetails.getTransactionId(),transRespDetails.getRemark(),respDateTime,commonValidatorVO.getTrackingid());
                  //  transactionLogger.debug("After update ------");
                   // int actionEntry = entry.actionEntryForCommon(String.valueOf(trackingId), transRespDetails.getAmount(), ActionEntry.ACTION_FAILED, ActionEntry.STATUS_FAILED, transRespDetails, auditTrailVO, genericAddressDetailsVO.getIp());
                }
                directKitResponseVO.setTrackingId(String.valueOf(trackingId));
                transactionUtil.setSystemResponseAndErrorCodeListVO(directKitResponseVO,errorCodeListVO,null,commonValidatorVO,"Y".equalsIgnoreCase(fStatus)?PZResponseStatus.SUCCESS:PZResponseStatus.FAILED,transRespDetails.getRemark(),billingDiscriptor);
            }
        }
        else // else other than china then direct purchase
        {
            transactionLogger.debug("Inside other than China Condition");
            Date date3 = new Date();
            transactionLogger.debug("DirectTransactionRESTIMPL processDirectTransaction start #########" + date3.getTime());
            directKitResponseVO = restDirectTransactionManager.processDirectTransaction(commonValidatorVO);
            transactionLogger.debug("DirectTransactionRESTIMPL processDirectTransaction end #########" + new Date().getTime());
            transactionLogger.debug("DirectTransactionRESTIMPL processDirectTransaction diff #########" + (new Date().getTime() - date3.getTime()));

            return directKitResponseVO;
        }
        return directKitResponseVO;
    }

    public DirectKitResponseVO processDirectTransaction(CommonValidatorVO commonValidatorVO) throws  PZGenericConstraintViolationException, PZDBViolationException, PZConstraintViolationException
    {
        ActionEntry entry = new ActionEntry();
        Functions functions=new Functions();
        PaymentManager paymentManager=new PaymentManager();
        TransactionUtilsDAO transactionUtilsDAO=new TransactionUtilsDAO();
        AbstractPaymentGateway pg = null;
        Transaction transaction = new Transaction();
        AuditTrailVO auditTrailVO=new AuditTrailVO();
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();

        MerchantDetailsVO merchantDetailsVO= commonValidatorVO.getMerchantDetailsVO();
        GenericAddressDetailsVO genericAddressDetailsVO= commonValidatorVO.getAddressDetailsVO();
        GenericTransDetailsVO genericTransDetailsVO= commonValidatorVO.getTransDetailsVO();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        CommRequestVO commRequestVO1 = new CommRequestVO();
        CommTransactionDetailsVO transDetailsVO = new CommTransactionDetailsVO();
        CommAddressDetailsVO commAddressDetailsVO = new CommAddressDetailsVO();
        GenericCardDetailsVO commCardDetailsVO = commonValidatorVO.getCardDetailsVO();
        RecurringBillingVO recurringBillingVO = null;
        TokenManager tokenManager = new TokenManager();
        RecurringManager recurringManager = new RecurringManager();

        if(commonValidatorVO.getRecurringBillingVO()!=null)
        {
            recurringBillingVO = commonValidatorVO.getRecurringBillingVO();
        }
        if(!functions.isValueNull(genericTransDetailsVO.getRedirectUrl()))
        {
            genericTransDetailsVO.setRedirectUrl(" ");
        }

        String toid=merchantDetailsVO.getMemberId();
        String respStatus=null;
        String respPaymentId=null;
        String errorName = "";
        String mailtransactionStatus="Failed";
        String billingDiscriptor="";
        String respRemark="";
        String machineid="";
        String respDateTime=null;
        String fStatus = "";
        String accountId = merchantDetailsVO.getAccountId();
        int trackingId = 0;
        String paymodeid = commonValidatorVO.getPaymentType();
        String cardtypeid = commonValidatorVO.getCardType();

        //account details
        String fromtype = GatewayAccountService.getGatewayAccount(accountId).getGateway();
        GatewayAccount account = GatewayAccountService.getGatewayAccount(String.valueOf(accountId));
        GatewayType gatewayType = GatewayTypeService.getGatewayType(account.getPgTypeId());
        String tableName = Database.getTableName(gatewayType.getGateway());

        transDetailsVO.setResponseHashInfo(commonValidatorVO.getTransDetailsVO().getResponseHashInfo());
        transDetailsVO.setAmount(commonValidatorVO.getTransDetailsVO().getAmount()); //Amount * 100 according to the docs
        transDetailsVO.setCurrency(commonValidatorVO.getTransDetailsVO().getCurrency());
        transDetailsVO.setOrderId(commonValidatorVO.getTransDetailsVO().getOrderId());
        transDetailsVO.setOrderDesc(commonValidatorVO.getTransDetailsVO().getOrderDesc());
        transDetailsVO.setRedirectMethod(commonValidatorVO.getTransDetailsVO().getRedirectMethod());
        transDetailsVO.setTerminalId(commonValidatorVO.getTerminalId());
        //commAddressDetailsVO.setCardHolderIpAddress(commonValidatorVO.getAddressDetailsVO().getIp());
        commAddressDetailsVO.setTmpl_amount(commonValidatorVO.getAddressDetailsVO().getTmpl_amount());
        commAddressDetailsVO.setTmpl_currency(commonValidatorVO.getAddressDetailsVO().getTmpl_currency());

        commRequestVO1.setTransDetailsVO(transDetailsVO);
        commRequestVO1.setAddressDetailsVO(commAddressDetailsVO);
        auditTrailVO.setActionExecutorId(toid);
        auditTrailVO.setActionExecutorName("REST API");
        if(genericAddressDetailsVO.getEmail() == null)
            genericAddressDetailsVO.setEmail(" ");

        if (functions.isValueNull(commonValidatorVO.getTerminalVO().getTerminalId()))
            commonValidatorVO.setTerminalId(commonValidatorVO.getTerminalVO().getTerminalId());

/*
        if (commonValidatorVO.getMerchantDetailsVO().getBinService().equalsIgnoreCase("Y"))
        {
            String firstSix = "";
            if (!commonValidatorVO.getCardDetailsVO().getCardNum().equals(""))
            {
                firstSix = functions.getFirstSix(commonValidatorVO.getCardDetailsVO().getCardNum());
            }

            BinResponseVO binResponseVO = new BinResponseVO();
            binResponseVO = functions.getBinDetails(firstSix,commonValidatorVO.getMerchantDetailsVO().getCountry());
            commonValidatorVO.getCardDetailsVO().setBin_card_type(binResponseVO.getCardtype());
            commonValidatorVO.getCardDetailsVO().setBin_card_category(binResponseVO.getCardcategory());
            commonValidatorVO.getCardDetailsVO().setBin_brand(binResponseVO.getBrand());
            commonValidatorVO.getCardDetailsVO().setBin_usage_type(binResponseVO.getUsagetype());
            commonValidatorVO.getCardDetailsVO().setBin_sub_brand(binResponseVO.getSubbrand());
            commonValidatorVO.getCardDetailsVO().setCountry_code_A3(binResponseVO.getCountrycodeA3());
            commonValidatorVO.getCardDetailsVO().setCountry_code_A2(binResponseVO.getCountrycodeA2());
            commonValidatorVO.getCardDetailsVO().setTrans_type(binResponseVO.getTranstype());
            commonValidatorVO.getCardDetailsVO().setIssuingBank(binResponseVO.getBank());
            commonValidatorVO.getCardDetailsVO().setCountryName(binResponseVO.getCountryname());
        }
*/

        if(functions.isValueNull(commCardDetailsVO.getCardNum()))
        {
            trackingId = paymentManager.insertAuthStartedTransactionEntry(commonValidatorVO, auditTrailVO, commRequestVO1, tableName);
        }
        else
        {
            trackingId = paymentManager.insertAuthStartedEntryForAccount(commonValidatorVO, auditTrailVO, commRequestVO1, tableName);
        }
        commonValidatorVO.setTrackingid(String.valueOf(trackingId));

        if (commonValidatorVO.getMerchantDetailsVO().getInternalFraudCheck().equalsIgnoreCase("Y")  && !(commonValidatorVO.isVIPCard() || commonValidatorVO.isVIPEmail()))
        {
            FraudChecker fraudChecker = new FraudChecker();
            fraudChecker.checkInternalFraudRules(commonValidatorVO);

            transactionLogger.error("Is Fraud Transaction in REST API---"+commonValidatorVO.isFraud());

            if(commonValidatorVO.isFraud())
            {
                String remark = "Failed";
                directKitResponseVO.setFraud(commonValidatorVO.isFraud());
                directKitResponseVO.setTrackingId(String.valueOf(trackingId));

                paymentManager.updateTransactionAfterResponseForCommon(PZTransactionStatus.FAILED.toString(), genericTransDetailsVO.getAmount(), "", null, remark, null, String.valueOf(trackingId));
                int actionEntry = entry.actionEntryForCommon(String.valueOf(trackingId), genericTransDetailsVO.getAmount(), ActionEntry.ACTION_FAILED, ActionEntry.STATUS_FAILED, null, auditTrailVO, genericAddressDetailsVO.getIp());

                return directKitResponseVO;
            }
        }

        try
        {
            Date date2 = new Date();
            pg =  AbstractPaymentGateway.getGateway(accountId);

            transactionLogger.debug("trackingid-----"+commonValidatorVO.getTrackingid());
            transactionLogger.debug("accountId-----"+accountId);
            if (Functions.checkAPIGateways(fromtype))
            {
                AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(commonValidatorVO.getTrackingid()), Integer.parseInt(accountId));
                CommRequestVO commRequestVO = null;
                CommResponseVO transRespDetails = null;
                commRequestVO = getCommonRequestVO(commonValidatorVO,transDetailsVO);
                String status="";
                transactionLogger.error("recurringBillingVO.getRecurringType()--------------->"+recurringBillingVO.getRecurringType());
                if ((recurringBillingVO.getRecurringType()!=null) && ((recurringBillingVO.getRecurringType().equals("INITIAL")) || (recurringBillingVO.getRecurringType().equals("REPEATED"))))
                {
                    recurringBillingVO.setIsManualRecurring(commonValidatorVO.getTerminalVO().getIsManualRecurring());
                    recurringBillingVO.setIsAutomaticRecurring(commonValidatorVO.getTerminalVO().getIsRecurring());
                    if((recurringBillingVO.getRecurringType().equals("INITIAL")))
                    {
                        if ("Y".equalsIgnoreCase(account.getIsRecurring()))
                        {
                            recurringBillingVO = new RecurringBillingVO();
                            String cardNum = commonValidatorVO.getCardDetailsVO().getCardNum();

                            recurringBillingVO.setAmount(commonValidatorVO.getTransDetailsVO().getAmount());
                            recurringBillingVO.setOriginTrackingId(String.valueOf(trackingId));

                            recurringBillingVO.setCardHolderName(commonValidatorVO.getAddressDetailsVO().getFirstname() + " " + commonValidatorVO.getAddressDetailsVO().getLastname());
                            if (functions.isValueNull(cardNum))
                            {
                                recurringBillingVO.setFirstSix(cardNum.substring(0, 6));
                                recurringBillingVO.setLastFour(cardNum.substring((cardNum.length() - 4), cardNum.length()));
                            }
                            else if (functions.isValueNull(commCardDetailsVO.getBIC()))
                            {
                                recurringBillingVO.setBIC(commCardDetailsVO.getBIC());
                                recurringBillingVO.setIBAN(commCardDetailsVO.getIBAN());
                            }
                            else if (functions.isValueNull(commRequestVO.getReserveField2VO().getAccountNumber()))
                            {
                                recurringBillingVO.setAccountNumber(commRequestVO.getReserveField2VO().getAccountNumber());
                                recurringBillingVO.setAccountType(commRequestVO.getReserveField2VO().getAccountType());
                                recurringBillingVO.setRoutingNumber(commRequestVO.getReserveField2VO().getRoutingNumber());
                            }
                            if ((paymodeid != null) && (cardtypeid != null))
                            {
                                recurringBillingVO.setPaymentType(paymodeid);
                                recurringBillingVO.setCardType(cardtypeid);
                            }
                            recurringBillingVO.setMemberId(commonValidatorVO.getMerchantDetailsVO().getMemberId());
                            recurringBillingVO.setTerminalid(commonValidatorVO.getTerminalId());
                            recurringBillingVO.setRecurringType("INITIAL");
                            recurringBillingVO.setRbid(commonValidatorVO.getRecurringBillingVO().getRbid());
                            Gson gson=new Gson();
                            recurringManager.insertRecurringSubscriptionEntry(recurringBillingVO);
                            commonValidatorVO.setRecurringBillingVO(recurringBillingVO);
                        }
                        else
                        {
                            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_RECURRINGALLOW, ErrorMessages.INVALID_IS_RECURRING));
                            PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processTransaction()", null, "TransactionServices", ErrorMessages.INVALID_IS_RECURRING, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO,ErrorMessages.INVALID_IS_RECURRING ,new Throwable(ErrorMessages.INVALID_IS_RECURRING));
                        }
                    }
                }

                try
                {
                    if(merchantDetailsVO.getService().equalsIgnoreCase("N"))
                    {
                        transRespDetails = (CommResponseVO) pg.processAuthentication(String.valueOf(trackingId), commRequestVO);
                        status = "authsuccessful";
                    }
                    else
                    {
                        transRespDetails = (CommResponseVO) pg.processSale(String.valueOf(trackingId), commRequestVO);
                        status = "capturesuccess";
                    }
                }
                catch (PZTechnicalViolationException tve)
                {
                    logger.error("PZTechnicalViolationException in processTransaction---", tve);
                    String remarkEnum = tve.getPzTechnicalConstraint().getPzTechEnum().toString();
                    if (remarkEnum.equalsIgnoreCase(PZTechnicalExceptionEnum.SSL_HANDSHAKE_ISSUE.toString()))
                    {
                        try
                        {
                            paymentManager.updateDetailsTablewithErrorName(ErrorName.SYS_INTERNAL_ERROR.toString(),commonValidatorVO.getTrackingid());
                        }
                        catch (PZDBViolationException d)
                        {
                            logger.error("----PZDBViolationException in update with error name-----", d);
                        }
                        paymentManager.updateTransactionAfterResponseForCommon(PZTransactionStatus.FAILED.toString(), genericTransDetailsVO.getAmount(), "", null, PZTechnicalExceptionEnum.SSL_HANDSHAKE_ISSUE.toString(), null, String.valueOf(trackingId));
                        int actionEntry = entry.actionEntryForCommon(String.valueOf(trackingId), genericTransDetailsVO.getAmount(), ActionEntry.ACTION_FAILED, ActionEntry.STATUS_FAILED, transRespDetails, auditTrailVO, genericAddressDetailsVO.getIp());
                        respRemark = "Bank Connectivity Issue while processing your request";
                    }
                    else if (remarkEnum.equalsIgnoreCase(PZTechnicalExceptionEnum.GATEWAY_CONNECTION_TIMEOUT.toString()))
                    {
                        try
                        {
                            paymentManager.updateDetailsTablewithErrorName(ErrorName.SYS_INTERNAL_ERROR.toString(),commonValidatorVO.getTrackingid());
                        }
                        catch (PZDBViolationException d)
                        {
                            logger.error("----PZDBViolationException in update with error name-----", d);
                        }
                        paymentManager.updateTransactionAfterResponseForCommon(PZTransactionStatus.FAILED.toString(), genericTransDetailsVO.getAmount(), "", null, PZTechnicalExceptionEnum.SSL_HANDSHAKE_ISSUE.toString(), null, String.valueOf(trackingId));
                        int actionEntry = entry.actionEntryForCommon(String.valueOf(trackingId), genericTransDetailsVO.getAmount(), ActionEntry.ACTION_FAILED, ActionEntry.STATUS_FAILED, transRespDetails, auditTrailVO, genericAddressDetailsVO.getIp());
                        respRemark = "Your transaction is Timed out.Please check at bank side.";
                    }
                    else
                    {
                        try
                        {
                            paymentManager.updateDetailsTablewithErrorName(ErrorName.SYS_INTERNAL_ERROR.toString(),commonValidatorVO.getTrackingid());
                        }
                        catch (PZDBViolationException d)
                        {
                            logger.error("----PZDBViolationException in update with error name-----", d);
                        }
                        paymentManager.updateTransactionAfterResponseForCommon(PZTransactionStatus.FAILED.toString(), genericTransDetailsVO.getAmount(), "", null, PZTechnicalExceptionEnum.SSL_HANDSHAKE_ISSUE.toString(), null, String.valueOf(trackingId));
                        int actionEntry = entry.actionEntryForCommon(String.valueOf(trackingId), genericTransDetailsVO.getAmount(), ActionEntry.ACTION_FAILED, ActionEntry.STATUS_FAILED, transRespDetails, auditTrailVO, genericAddressDetailsVO.getIp());
                        respRemark = "We have encountered an internal error while processing your request.";
                    }
                    transactionUtil.setSystemResponseAndErrorCodeListVO(directKitResponseVO, tve.getPzTechnicalConstraint().getErrorCodeListVO(), null, commonValidatorVO, PZResponseStatus.ERROR, respRemark, null);
                    PZExceptionHandler.handleTechicalCVEException(tve, toid, PZOperations.DIRECT_KIT_WEBSERVICE);
                    return directKitResponseVO;
                }

                if(transRespDetails!=null && functions.isValueNull(transRespDetails.getStatus()))
                {
                    transactionLogger.error("transRespDetails---"+transRespDetails.getStatus());
                    transactionLogger.error("-----------status from gateway:::"+transRespDetails.getStatus());
                    if ((transRespDetails.getStatus().trim()).equalsIgnoreCase("success"))
                    {
                        if(status.equals("capturesuccess"))
                        {
                            respStatus="capturesuccess";
                            mailtransactionStatus = "capturesuccess";
                            paymentProcess.actionEntry(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getAmount(), ActionEntry.ACTION_CAPTURE_SUCCESSFUL, ActionEntry.STATUS_CAPTURE_SUCCESSFUL, transRespDetails, commRequestVO,auditTrailVO);
                        }
                        else
                        {
                            respStatus="authsuccessful";
                            mailtransactionStatus = "authsuccessful";
                            paymentProcess.actionEntry(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getAmount(), ActionEntry.ACTION_AUTHORISTION_SUCCESSFUL, ActionEntry.STATUS_AUTHORISTION_SUCCESSFUL, transRespDetails, commRequestVO,auditTrailVO);
                        }
                        if(functions.isValueNull(commonValidatorVO.getToken()))
                        {
                            if((functions.isValueNull(recurringBillingVO.getRecurringType()) && "INITIAL".equals(recurringBillingVO.getRecurringType())))
                            {
                                //recurring's originatingTrackingId != token's trackingId then update the token's trackingId
                                if("Y".equals(commonValidatorVO.getPartnerDetailsVO().getIsMerchantRequiredForCardRegistration()))
                                {
                                    TokenDetailsVO tokenDetailsVO = new TokenDetailsVO();
                                    tokenDetailsVO = tokenManager.getRegisteredTokenDetailsByMerchant(toid, commonValidatorVO.getToken(), commonValidatorVO, tokenDetailsVO);
                                    if (recurringManager.isRecurringTrackingIdMatchesWithMerchantToken(commonValidatorVO.getToken(), recurringBillingVO.getOriginTrackingId(), commonValidatorVO.getMerchantDetailsVO().getMemberId()))
                                    {
                                        tokenManager.updateTrackingIdForRegistrationTokenByMerchant(commonValidatorVO.getToken(), String.valueOf(trackingId), toid);
                                    }
                                    else
                                    {
                                        if(!tokenManager.isTokenMappedWithTrackingId(tokenDetailsVO.getTokenId(), commonValidatorVO.getMerchantDetailsVO().getMemberId()))
                                            tokenManager.newTokenRegistrationMemberMappingEntry(tokenDetailsVO.getTokenId(),commonValidatorVO.getMerchantDetailsVO().getMemberId(),recurringBillingVO.getOriginTrackingId());
                                    }
                                    tokenManager.insertTrackingIdForRegistrationTokenByMerchant(commonValidatorVO, tokenDetailsVO, recurringBillingVO.getOriginTrackingId());
                                }
                                else
                                {
                                    TokenDetailsVO tokenDetailsVO = new TokenDetailsVO();
                                    tokenDetailsVO = tokenManager.getRegisteredTokenDetailsByPartner(commonValidatorVO.getPartnerDetailsVO().getPartnerId(),commonValidatorVO.getToken(),commonValidatorVO);

                                    if(recurringManager.isRecurringTrackingIdMatchesPartnerWithToken(commonValidatorVO.getToken(), recurringBillingVO.getOriginTrackingId(), commonValidatorVO.getMerchantDetailsVO().getPartnerId()))
                                        tokenManager.updateTrackingIdForRegistrationTokenByPartner(commonValidatorVO.getToken(), String.valueOf(trackingId), merchantDetailsVO.getPartnerId());
                                    else
                                    {
                                        if(!tokenManager.isTokenMappedWithTrackingId(tokenDetailsVO.getTokenId(), commonValidatorVO.getMerchantDetailsVO().getMemberId()))
                                            tokenManager.newTokenRegistrationMemberMappingEntry(tokenDetailsVO.getTokenId(), commonValidatorVO.getMerchantDetailsVO().getMemberId(), recurringBillingVO.getOriginTrackingId());
                                    }
                                    tokenManager.insertTrackingIdForRegistrationTokenByMerchant(commonValidatorVO, tokenDetailsVO, recurringBillingVO.getOriginTrackingId());
                                }
                            }
                            else
                            {
                                TokenDetailsVO tokenDetailsVO = new TokenDetailsVO();
                                if("Y".equals(commonValidatorVO.getPartnerDetailsVO().getIsMerchantRequiredForCardRegistration()))
                                {
                                    tokenDetailsVO = tokenManager.getRegisteredTokenDetailsByMerchant(toid, commonValidatorVO.getToken(), commonValidatorVO, tokenDetailsVO);
                                    if(!tokenManager.isTokenMappedWithTrackingId(tokenDetailsVO.getTokenId(), toid))
                                    {
                                        tokenManager.newTokenRegistrationMemberMappingEntry(tokenDetailsVO.getTokenId(), commonValidatorVO.getMerchantDetailsVO().getMemberId(), String.valueOf(trackingId));
                                    }

                                    tokenManager.insertTrackingIdForRegistrationTokenByMerchant(commonValidatorVO, tokenDetailsVO, String.valueOf(trackingId));
                                }
                                else
                                {
                                    tokenDetailsVO = tokenManager.getInitialTokenDetailsWithPartnerId(commonValidatorVO.getToken(), merchantDetailsVO.getPartnerId()); //with PartnerId
                                    if(!tokenManager.isTokenMappedWithTrackingId(tokenDetailsVO.getTokenId(), commonValidatorVO.getMerchantDetailsVO().getMemberId()))
                                        tokenManager.newTokenRegistrationMemberMappingEntry(tokenDetailsVO.getTokenId(), commonValidatorVO.getMerchantDetailsVO().getMemberId(), String.valueOf(trackingId));

                                    tokenManager.insertTrackingIdForRegistrationTokenByMerchant(commonValidatorVO, tokenDetailsVO, String.valueOf(trackingId));
                                }
                            }
                        }

                        if(commonValidatorVO.getCreateRegistration()!=null || recurringBillingVO.getRecurringType() != null)
                        {
                            if(commonValidatorVO.getCreateRegistration() != null && (commonValidatorVO.getCreateRegistration().equalsIgnoreCase("true")))
                            {
                                if ("Y".equals(merchantDetailsVO.getIsTokenizationAllowed()))
                                {
                                    TerminalManager terminalManager = new TerminalManager();
                                    if (terminalManager.isTokenizationActiveOnTerminal(merchantDetailsVO.getMemberId(),commonValidatorVO.getTerminalId()))
                                    {
                                        if (functions.isValueNull(commonValidatorVO.getCustomerId()))
                                        {
                                            if (!tokenManager.isCardholderRegistered(merchantDetailsVO.getMemberId(), commonValidatorVO.getCustomerId()))
                                            {
                                                commonValidatorVO.setCustomerId(null);
                                            }
                                        }

                                        String generatedBy = commonValidatorVO.getMerchantDetailsVO().getLogin();
                                        TokenDetailsVO tokenDetailsVO = new TokenDetailsVO();
                                        TokenRequestVO tokenRequestVO = new TokenRequestVO();
                                        TokenResponseVO tokenResponseVO = new TokenResponseVO();
                                        genericAddressDetailsVO = commonValidatorVO.getAddressDetailsVO();
                                        genericTransDetailsVO = commonValidatorVO.getTransDetailsVO();

                                        String existingTokenId = null;
                                        String registrationStatus = null;

                                        if(commonValidatorVO.getCardDetailsVO().getCardNum() != null)
                                        {
                                            tokenRequestVO.setMemberId(toid);
                                            tokenRequestVO.setCustomerId(commonValidatorVO.getCustomerId());
                                            tokenRequestVO.setTrackingId(String.valueOf(trackingId));
                                            tokenRequestVO.setDescription(commonValidatorVO.getTransDetailsVO().getOrderId());
                                            tokenRequestVO.setPaymentType(commonValidatorVO.getTerminalVO().getPaymodeId());
                                            tokenRequestVO.setCardType(commonValidatorVO.getTerminalVO().getCardTypeId());
                                            tokenRequestVO.setAddressDetailsVO(genericAddressDetailsVO);
                                            tokenRequestVO.setGeneratedBy(generatedBy);
                                            tokenRequestVO.setCardDetailsVO(commonValidatorVO.getCardDetailsVO());
                                            tokenRequestVO.setTerminalId(commonValidatorVO.getTerminalId());
                                            genericTransDetailsVO.setCurrency(transDetailsVO.getCurrency());
                                            tokenRequestVO.setTransDetailsVO(genericTransDetailsVO);
                                            //tokenRequestVO.setCvv(commonValidatorVO.getCardDetailsVO().getcVV());

                                            existingTokenId = tokenManager.isTokenAvailable(tokenRequestVO.getMemberId(), tokenRequestVO.getCardDetailsVO().getCardNum());
                                            if(functions.isValueNull(existingTokenId))
                                            {
                                                tokenRequestVO.setTokenId(existingTokenId);
                                                tokenDetailsVO = tokenManager.createNewTokenRegistrationByMember(tokenRequestVO);
                                                registrationStatus = tokenManager.newTokenRegistrationMemberMappingEntry(tokenDetailsVO.getRegistrationId(), tokenRequestVO.getMemberId(), tokenRequestVO.getTrackingId());
                                                tokenResponseVO.setStatus(registrationStatus);
                                                tokenResponseVO.setTokenId(existingTokenId);
                                                tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                                            }
                                            else
                                            {
                                                String newTokenId = tokenManager.createTokenForRegistrationByMember(tokenRequestVO);
                                                tokenRequestVO.setTokenId(newTokenId);
                                                tokenDetailsVO = tokenManager.createNewTokenRegistrationByMember(tokenRequestVO);
                                                registrationStatus = tokenManager.newTokenRegistrationMemberMappingEntry(tokenDetailsVO.getRegistrationId(), tokenRequestVO.getMemberId(), tokenRequestVO.getTrackingId());
                                                tokenResponseVO.setStatus(registrationStatus);
                                                tokenResponseVO.setTokenId(existingTokenId);
                                                tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                                            }
                                        }

                                        else if(commonValidatorVO.getCardDetailsVO().getBIC() != null || commRequestVO.getReserveField2VO().getAccountNumber() != null)
                                        {
                                            tokenRequestVO.setMemberId(toid);
                                            tokenRequestVO.setCustomerId(commonValidatorVO.getCustomerId());
                                            tokenRequestVO.setTrackingId(String.valueOf(trackingId));
                                            tokenRequestVO.setDescription(commonValidatorVO.getTransDetailsVO().getOrderId());
                                            tokenRequestVO.setCardDetailsVO(commonValidatorVO.getCardDetailsVO());
                                            tokenRequestVO.setAddressDetailsVO(genericAddressDetailsVO);
                                            tokenRequestVO.setGeneratedBy(generatedBy);
                                            tokenRequestVO.setPaymentType(commonValidatorVO.getPaymentType());
                                            tokenRequestVO.setCardType(commonValidatorVO.getCardType());
                                            tokenRequestVO.setTerminalId(commonValidatorVO.getTerminalId());
                                            tokenRequestVO.setReserveField2VO(commonValidatorVO.getReserveField2VO());
                                            genericTransDetailsVO.setCurrency(transDetailsVO.getCurrency());
                                            tokenRequestVO.setTransDetailsVO(genericTransDetailsVO);

                                            existingTokenId = tokenManager.isNewAccount(tokenRequestVO.getMemberId(), tokenRequestVO);
                                            if(functions.isValueNull(existingTokenId))
                                            {
                                                tokenRequestVO.setTokenId(existingTokenId);
                                                tokenDetailsVO = tokenManager.createNewTokenRegistrationByMember(tokenRequestVO);
                                                registrationStatus = tokenManager.newTokenRegistrationMemberMappingEntry(tokenDetailsVO.getRegistrationId(), tokenRequestVO.getMemberId(), tokenRequestVO.getTrackingId());
                                                tokenResponseVO.setStatus(registrationStatus);
                                                tokenResponseVO.setTokenId(existingTokenId);
                                                tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                                            }
                                            else
                                            {
                                                String bankAccountId = tokenManager.insertBankAccountDetails(tokenRequestVO); //inserting bank account details
                                                tokenRequestVO.setBankAccountId(bankAccountId);
                                                String newTokenId = tokenManager.createTokenForRegistrationByMember(tokenRequestVO); //new token creation in token_master
                                                tokenRequestVO.setTokenId(newTokenId);
                                                tokenDetailsVO = tokenManager.createNewTokenRegistrationByMember(tokenRequestVO); //new registration in registration_master
                                                registrationStatus = tokenManager.newTokenRegistrationMemberMappingEntry(tokenDetailsVO.getRegistrationId(), tokenRequestVO.getMemberId(), tokenRequestVO.getTrackingId()); //inserting membersId and trackingId in mapping table
                                                tokenResponseVO.setStatus(registrationStatus);
                                                tokenResponseVO.setTokenId(existingTokenId);
                                                tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                                            }
                                        }

                                        if ("success".equals(tokenResponseVO.getStatus()))
                                        {
                                            directKitResponseVO.setToken(tokenResponseVO.getRegistrationToken());
                                            directKitResponseVO.setStatus(tokenResponseVO.getStatus());

                                            //registration transactions entry
                                            TokenTransactionDetailsVO tokenTransactionDetailsVO = new TokenTransactionDetailsVO();
                                            tokenTransactionDetailsVO.setToid(tokenRequestVO.getMemberId());
                                            tokenTransactionDetailsVO.setTrackingid(String.valueOf(trackingId));
                                            tokenTransactionDetailsVO.setAmount(transDetailsVO.getAmount());
                                            tokenTransactionDetailsVO.setRegistrationId(tokenDetailsVO.getRegistrationId());

                                            tokenManager.manageRegistrationTransactionDetails(tokenTransactionDetailsVO);
                                        }
                                    }
                                }
                            }
                        }

                        if (functions.isValueNull(transRespDetails.getDescriptor()))
                        {
                            billingDiscriptor = transRespDetails.getDescriptor();
                        }
                        else
                        {
                            billingDiscriptor = pg.getDisplayName();
                    }
                    }
                    else if ((transRespDetails.getStatus().trim()).equalsIgnoreCase("pending3DConfirmation") )
                    {
                        transactionLogger.debug("inside 3D------"+transRespDetails.getStatus());
                        paymentManager.updatePaymentIdForCommon(transRespDetails, commonValidatorVO.getTrackingid());
                        paymentProcess.actionEntry(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getAmount(), ActionEntry.ACTION_3D_AUTHORISATION_STARTED, ActionEntry.STATUS_3D_AUTHORISATION_STARTED, transRespDetails, commRequestVO, auditTrailVO);

                        Comm3DResponseVO response3D = (Comm3DResponseVO) transRespDetails;


                        directKitResponseVO.setTrackingId(String.valueOf(trackingId));
                        directKitResponseVO.setStatus("pending3DConfirmation");
                        if (fromtype.equalsIgnoreCase("billdesk") || fromtype.equalsIgnoreCase("pbs"))
                        {
                            transactionLogger.debug("inside 3D------pbs");
                            paymentProcess.set3DResponseVO(directKitResponseVO, response3D, commonValidatorVO);
                        }
                        else
                        {
                            transactionLogger.debug("inside 3D------befeore");
                            paymentProcess.set3DResponseVO(directKitResponseVO, response3D);
                            transactionLogger.debug("inside 3D------after");
                        }
                        return directKitResponseVO;
                    }
                    else if ((transRespDetails.getStatus().trim()).equalsIgnoreCase("pending"))
                    {
                        Comm3DResponseVO response3D = (Comm3DResponseVO) transRespDetails;
                        directKitResponseVO.setTrackingId(String.valueOf(trackingId));
                        if(fromtype.equalsIgnoreCase("aldrapay") || fromtype.equalsIgnoreCase("purplepay") || fromtype.equalsIgnoreCase("ravedirect") || fromtype.equalsIgnoreCase("fastpay"))
                        {
                            paymentProcess.set3DResponseVO(directKitResponseVO, response3D,commonValidatorVO);
                            directKitResponseVO.setStatus("pending");
                            return directKitResponseVO;

                        }
                        else if(fromtype.equalsIgnoreCase("agnipay") || fromtype.equalsIgnoreCase("trnsactWLD") || fromtype.equalsIgnoreCase("shimotomo"))
                        {
                            paymentProcess.set3DResponseVO(directKitResponseVO, response3D);
                            directKitResponseVO.setStatus("pending");
                            return directKitResponseVO;
                        }
                        else if(fromtype.equalsIgnoreCase("decta"))
                        {
                            paymentManager.updatePaymentIdForCommon(transRespDetails, directKitResponseVO.getTrackingId());
                            paymentProcess.set3DResponseVO(directKitResponseVO, response3D,commonValidatorVO);
                            directKitResponseVO.setStatus("pending");
                            return directKitResponseVO;
                        }
                        else
                        {
                            respStatus = "authstarted";
                            mailtransactionStatus = "authstarted";
                            billingDiscriptor = pg.getDisplayName();
                        }
                    }
                    else
                    {
                        respStatus="authfailed";
                        mailtransactionStatus  = "authfailed";
                        paymentProcess.actionEntry(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getAmount(), ActionEntry.ACTION_AUTHORISTION_FAILED, ActionEntry.STATUS_AUTHORISTION_FAILED, transRespDetails, commRequestVO,auditTrailVO);
                    }
                    respDateTime = transRespDetails.getResponseTime();
                    respRemark = transRespDetails.getDescription();
                    respPaymentId =  transRespDetails.getTransactionId();
                    if (functions.isValueNull(transRespDetails.getErrorName()))
                    {
                        errorName = transRespDetails.getErrorName();
                        directKitResponseVO.setErrorName(transRespDetails.getErrorName());
                    }


                    transactionUtilsDAO.updateTransactionAfterResponse(tableName,respStatus,genericTransDetailsVO.getAmount(),genericAddressDetailsVO.getIp(),machineid,respPaymentId,respRemark,respDateTime,String.valueOf(trackingId));
                }

                AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                asynchronousMailService.sendEmail(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingId), mailtransactionStatus, null,billingDiscriptor);

            }

            if("capturesuccess".equalsIgnoreCase(respStatus) || "authsuccessful".equalsIgnoreCase(respStatus))
            {
                fStatus = "Y";
            }
            else
            {
                fStatus = "N";
            }
        }

        catch (SystemError se)
        {
            logger.error("SystemError in RestDirectTransactionManager---", se);
            PZExceptionHandler.raiseAndHandleTechnicalViolationException(RestDirectTransactionManager.class.getName(),"processDirectTransaction()",null,"common","Technical Exception",PZTechnicalExceptionEnum.NOSUCH_ALGO_EXCEPTION,null,se.getMessage(),se.getCause(),toid,"Transaction Web Service");
            transactionUtilsDAO.insertFailedTransaction(String.valueOf(trackingId), se.getMessage(), tableName, commonValidatorVO.getTransDetailsVO().getAmount(),commonValidatorVO.getAddressDetailsVO().getCardHolderIpAddress());
            transactionUtil.setSystemResponseAndErrorCodeListVO(directKitResponseVO,errorCodeListVO,null,commonValidatorVO,PZResponseStatus.FAILED,respRemark,billingDiscriptor);
        }
        transactionUtil.setSystemResponseAndErrorCodeListVO(directKitResponseVO,errorCodeListVO,null,commonValidatorVO,"Y".equalsIgnoreCase(fStatus)?PZResponseStatus.SUCCESS:PZResponseStatus.FAILED,respRemark,billingDiscriptor);
        return directKitResponseVO;
    }

    public DirectKitResponseVO processHostedPaymentTransaction(CommonValidatorVO commonValidatorVO) throws PZConstraintViolationException,PZGenericConstraintViolationException{
        DirectKitResponseVO directKitResponseVO=null;
        if(commonValidatorVO!=null)
        {
            directKitResponseVO = new DirectKitResponseVO();
            AbstractPaymentProcess paymentProcess = new CommonPaymentProcess();
            directKitResponseVO = paymentProcess.setHostedPaymentResponseVO(directKitResponseVO, commonValidatorVO);
        }
        return directKitResponseVO;
    }
    public DirectKitResponseVO processAsyncDirectTransaction(CommonValidatorVO commonValidatorVO)throws PZConstraintViolationException,PZGenericConstraintViolationException
    {
        PaymentManager paymentManager = new PaymentManager();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        int trackingid = 0;
        AuditTrailVO auditTrailVO = new AuditTrailVO();
        UnicreditUtils unicreditUtils = new UnicreditUtils();

        auditTrailVO.setActionExecutorId(commonValidatorVO.getMerchantDetailsVO().getMemberId());
        auditTrailVO.setActionExecutorName("Customer");
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();

        CommRequestVO commRequestVO = null;
        AbstractPaymentGateway pg = null;

        trackingid = paymentManager.insertAuthStartedTransactionEntryForAsyncFlow(commonValidatorVO,auditTrailVO);
        commonValidatorVO.setTrackingid(String.valueOf(trackingid));
        directKitResponseVO.setTrackingId(String.valueOf(trackingid));

        try
        {
            pg = AbstractPaymentGateway.getGateway(commonValidatorVO.getMerchantDetailsVO().getAccountId());

            if(commonValidatorVO.getPaymentMode().equalsIgnoreCase("NB"))
            {
                if ((commonValidatorVO.getPaymentBrand().equalsIgnoreCase("SOFORT")) || commonValidatorVO.getPaymentBrand().equalsIgnoreCase("IDEAL"))
                {
                    SofortUtility sofortUtility = new SofortUtility();
                    SofortResponseVO transRespDetails = null;

                    if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("SOFORT"))
                    {
                        commRequestVO = sofortUtility.getSofortRequestVO(commonValidatorVO);
                    }
                    else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("IDEAL"))
                    {
                        IdealPaymentGateway idealPaymentGateway = new IdealPaymentGateway(commonValidatorVO.getMerchantDetailsVO().getAccountId());
                        IDealBanksResponse iDealBanksResponse = idealPaymentGateway.getIDealBankDetails();

                        String bankCode = "";
                        String bankName = "";
                        Map<String, String> idealBankMap = new HashMap<String, String>();
                        for (IDealBank bank : iDealBanksResponse.getBanks())
                        {
                            // build a bank selection

                            bankCode = bank.getCode();
                            bankName = bank.getName();
                            idealBankMap.put(bankName, bankCode);

                        }
                        if (idealBankMap.containsKey(commonValidatorVO.getCardDetailsVO().getBankName()))
                        {
                            commonValidatorVO.setSenderBankCode(idealBankMap.get(commonValidatorVO.getCardDetailsVO().getBankName()));
                        }
                        else
                        {
                            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_INVALID_BANKNAME, ErrorMessages.INVALID_BANKNAME));
                            PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processAsyncDirectTransaction()", null, "Common", ErrorMessages.INVALID_BANKNAME, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.INVALID_BANKNAME, new Throwable(ErrorMessages.INVALID_BANKNAME));
                        }
                        commRequestVO = sofortUtility.getIdealRequestVO(commonValidatorVO);
                    }

                    transRespDetails = (SofortResponseVO) pg.processAuthentication(commonValidatorVO.getTrackingid(), commRequestVO);

                    if (transRespDetails != null)
                    {
                        if ((transRespDetails.getStatus().trim()).equalsIgnoreCase("success"))
                        {
                            paymentManager.updatePaymentIdForCommon(transRespDetails, commonValidatorVO.getTrackingid());
                            directKitResponseVO.setBankRedirectionUrl(transRespDetails.getPaymentURL());
                            directKitResponseVO.setStatus("success");

                        }
                        else if ((transRespDetails.getStatus().trim()).equalsIgnoreCase("failed"))
                        {
                            paymentManager.updateTransactionForCommon(transRespDetails, "authfailed", commonValidatorVO.getTrackingid(), auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
                            directKitResponseVO.setStatus("failed");

                        }
                    }

                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("P4"))
                {
                    P4ResponseVO transRespDetails = null;
                    P4Utils p4Utils = new P4Utils();

                    commRequestVO = p4Utils.getRequestForOnlineBankTransfer(commonValidatorVO);
                    transRespDetails = (P4ResponseVO) pg.processAuthentication(commonValidatorVO.getTrackingid(), commRequestVO);

                    if (transRespDetails != null)
                    {
                        if ("success".equalsIgnoreCase(transRespDetails.getStatus().trim()))
                        {
                            paymentManager.updatePaymentIdForCommon(transRespDetails, commonValidatorVO.getTrackingid());
                            directKitResponseVO.setBankRedirectionUrl(transRespDetails.getFormularURL());
                            directKitResponseVO.setStatus("success");
                        }
                        else if ((transRespDetails.getStatus().trim()).equalsIgnoreCase("failed"))
                        {
                            paymentManager.updateTransactionForCommon(transRespDetails, "authfailed", commonValidatorVO.getTrackingid(), auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());//TODO Update query for the P4 as of sofort
                            directKitResponseVO.setStatus("failed");
                        }
                    }
                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("TRUSTLY"))
                {
                    CommResponseVO transRespDetails = null;
                    TrustlyUtils trustlyUtils = new TrustlyUtils();
                    commonValidatorVO.setCustomerId("12585");
                    commRequestVO = trustlyUtils.getTrustlyRequestVO(commonValidatorVO);
                    transRespDetails = (CommResponseVO) pg.processSale(String.valueOf(trackingid), commRequestVO);

                    if(transRespDetails != null)
                    {
                        if ("success".equalsIgnoreCase(transRespDetails.getStatus().trim()))
                        {
                            directKitResponseVO.setBankRedirectionUrl(transRespDetails.getRedirectUrl());
                            paymentManager.updatePaymentIdForCommon(transRespDetails, String.valueOf(trackingid));
                            directKitResponseVO.setStatus("success");
                        }
                        else if ((transRespDetails.getStatus().trim()).equalsIgnoreCase("failed"))
                        {
                            paymentManager.updateTransactionForCommon(transRespDetails, "authfailed", String.valueOf(trackingid), auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
                            directKitResponseVO.setStatus("failed");
                        }
                    }

                }
            }
            else if (commonValidatorVO.getPaymentMode().equalsIgnoreCase("PV"))
            {
                commonValidatorVO.getAddressDetailsVO().setTmpl_currency(commonValidatorVO.getTransDetailsVO().getCurrency());
                commonValidatorVO.setCustomerId("24532");
                if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("VOUCHERMONEY"))
                {
                    VoucherMoneyResponse transRespDetails = null;
                    VoucherMoneyUtils voucherMoneyUtils = new VoucherMoneyUtils();
                    commRequestVO = voucherMoneyUtils.getVoucherMoneyRequestVO(commonValidatorVO);

                    if (commonValidatorVO.getMerchantDetailsVO().getIsService().equalsIgnoreCase("N"))
                    {
                        transRespDetails = (VoucherMoneyResponse) pg.processAuthentication(String.valueOf(trackingid), commRequestVO);
                    }
                    else
                    {
                        transRespDetails = (VoucherMoneyResponse) pg.processSale(String.valueOf(trackingid), commRequestVO);
                    }

                    if (transRespDetails != null)
                    {
                        if ("success".equalsIgnoreCase(transRespDetails.getStatus().trim()))
                        {
                            paymentManager.updatePaymentIdForCommon(transRespDetails, String.valueOf(trackingid));
                            //String html=voucherMoneyUtils.generateAutoSubmitForm(transRespDetails.getPaymentFormUrl());
                            directKitResponseVO.setBankRedirectionUrl(transRespDetails.getPaymentFormUrl());
                            directKitResponseVO.setStatus("success");
                        }
                        else if ((transRespDetails.getStatus().trim()).equalsIgnoreCase("failed"))
                        {
                            paymentManager.updateTransactionForCommon(transRespDetails, "authfailed", String.valueOf(trackingid), auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
                            directKitResponseVO.setStatus("failed");
                        }
                    }
                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("PAYSAFECARD"))
                {
                    commRequestVO = getPaySafeRequestVO(commonValidatorVO);
                    CommResponseVO transRespDetails = null;
                    transRespDetails = (CommResponseVO) pg.processAuthentication(String.valueOf(trackingid), commRequestVO);
                    if ("success".equalsIgnoreCase(transRespDetails.getStatus().trim()))
                    {
                        String redirectUrl = paysafecard.getString("CUSTOMER_CPANEL") + "mid=" + commRequestVO.getCommMerchantVO().getMerchantId() + "&mtid=" + trackingid + "&amount=" + commonValidatorVO.getTransDetailsVO().getAmount() + "&currency=" + commonValidatorVO.getTransDetailsVO().getCurrency();
                        directKitResponseVO.setBankRedirectionUrl(redirectUrl);
                        directKitResponseVO.setStatus("success");
                    }
                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("PURPLEPAY"))
                {

                }
            }
            else if (commonValidatorVO.getPaymentMode().equalsIgnoreCase("CU"))
            {
                transactionLogger.error("Inside RestDirectTransactionManager CU PayMode"+commonValidatorVO.getPaymentMode());
                if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("SecurePay"))
                {
                    transactionLogger.error("Inside RestDirectTransactionManager SecurePay CardType");
                    String html = pg.processAutoRedirect(commonValidatorVO);
                    transactionLogger.error("Html In RestDirectManager ------"+html);
                    directKitResponseVO.setBankRedirectionUrl(html);
                    directKitResponseVO.setStatus("success");
                }
            }
            else if (commonValidatorVO.getPaymentMode().equalsIgnoreCase("BC"))
            {
                transactionLogger.error("Inside RestDirectTransactionManager BC PayMode"+commonValidatorVO.getPaymentMode());
                if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("BCPAYGATE"))
                {
                    transactionLogger.error("Inside RestDirectTransactionManager BC CardType");
                    String html = pg.processAutoRedirect(commonValidatorVO);
                    directKitResponseVO.setBankRedirectionUrl(html);
                    directKitResponseVO.setStatus("success");
                }
            }
            else if (commonValidatorVO.getPaymentMode().equalsIgnoreCase("PB"))
            {
                transactionLogger.error("Inside RestDirectTransactionManager PB PayMode"+commonValidatorVO.getPaymentMode());
                if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("PayBoutique"))
                {
                    transactionLogger.error("Inside RestDirectTransactionManager PayBoutique CardType");
                    String html = pg.processAutoRedirect(commonValidatorVO);
                    directKitResponseVO.setBankRedirectionUrl(html);
                    directKitResponseVO.setStatus("success");
                }
            }
            else if (commonValidatorVO.getPaymentMode().equalsIgnoreCase("EW"))
            {
                if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("SKRILL"))
                {
                    commRequestVO = getSkrillRequestVO(commonValidatorVO);
                    GenericResponseVO genericResponseVO = pg.processSale(String.valueOf(trackingid), commRequestVO);
                    CommResponseVO commResponseVO = (CommResponseVO) genericResponseVO;
                    commonValidatorVO.setCustomerId(commResponseVO.getResponseHashInfo());
                    directKitResponseVO.setStatus("success");
                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("PERFECTMONEY"))
                {

                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("NETELLER"))
                {
                    NetellerUtils netellerUtils = new NetellerUtils();
                    NetellerResponse transRespDetails = null;
                    commRequestVO = netellerUtils.getNetellerRequestVO(commonValidatorVO);
                    transRespDetails = (NetellerResponse) pg.processSale(String.valueOf(trackingid), commRequestVO);

                    if (transRespDetails != null)
                    {
                        if ("pending".equalsIgnoreCase(transRespDetails.getStatus().trim()))
                        {
                            paymentManager.updatePaymentIdForCommon(transRespDetails, String.valueOf(trackingid));
                            for(Links links : transRespDetails.getLinks())
                            {
                                if(links.getRel().equals("hosted_payment"))
                                {
                                    directKitResponseVO.setBankRedirectionUrl(links.getUrl());
                                    directKitResponseVO.setStatus("success");
                                }
                            }

                        }
                        else if ("failed".equalsIgnoreCase(transRespDetails.getStatus().trim()))
                        {
                            paymentManager.updateTransactionForCommon(transRespDetails, "authfailed", String.valueOf(trackingid), auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
                            directKitResponseVO.setStatus("failed");
                        }
                    }

                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("JETON"))
                {
                    commRequestVO = getSkrillRequestVO(commonValidatorVO);
                    GenericResponseVO genericResponseVO = pg.processSale(String.valueOf(trackingid), commRequestVO);
                    CommResponseVO commResponseVO = (CommResponseVO) genericResponseVO;
                    directKitResponseVO.setBankRedirectionUrl(commResponseVO.getRedirectUrl());
                    directKitResponseVO.setStatus("success");
                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("EPAY"))
                {

                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("PaySend"))
                {
                    PaySendUtils paySendUtils = new PaySendUtils();
                    commRequestVO = paySendUtils.getPaySendRequestVO(commonValidatorVO);
                    GenericResponseVO genericResponseVO = pg.processSale(String.valueOf(trackingid), commRequestVO);
                    CommResponseVO commResponseVO = (CommResponseVO) genericResponseVO;
                    directKitResponseVO.setBankRedirectionUrl(commResponseVO.getRedirectUrl());
                    directKitResponseVO.setStatus("success");
                }
            }
            else if (commonValidatorVO.getPaymentMode().equalsIgnoreCase("CC"))
            {
                if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("UNICREDIT"))
                {
                    commRequestVO = unicreditUtils.getUnicreditRequestVO(commonValidatorVO);
                    Comm3DResponseVO comm3DResponseVO = (Comm3DResponseVO) pg.processSale(String.valueOf(trackingid), commRequestVO);
                    directKitResponseVO.setBankRedirectionUrl(comm3DResponseVO.getUrlFor3DRedirect());
                    directKitResponseVO.setStatus("success");
                }
                else if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("CLEARSETTLE"))
                {
                    ClearSettleUtills clearSettleUtills=new ClearSettleUtills();
                    commRequestVO=clearSettleUtills.getClearSettleHPPRequest(commonValidatorVO);
                    Comm3DResponseVO comm3DResponseVO = (Comm3DResponseVO) pg.processSale(String.valueOf(trackingid), commRequestVO);
                    directKitResponseVO.setBankRedirectionUrl(comm3DResponseVO.getRedirectUrl());
                    directKitResponseVO.setStatus("success");
                }

            }
        }
        catch (SystemError se)
        {
            logger.error("SystemError in RestDirectTransactionManager---", se);
        }
        AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(trackingid, Integer.parseInt(commonValidatorVO.getMerchantDetailsVO().getAccountId()));
        directKitResponseVO = paymentProcess.setNBResponseVO(directKitResponseVO, commonValidatorVO);

        return directKitResponseVO;
    }

    public DirectKitResponseVO processRefund(DirectRefundValidatorVO directRefundValidatorVO) throws PZDBViolationException, PZConstraintViolationException, PZTechnicalViolationException
    {
        Transaction transaction = new Transaction();
        PaymentChecker paymentChecker = new PaymentChecker();
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();
        AuditTrailVO auditTrailVO=new AuditTrailVO();
        StatusSyncDAO statusSyncDAO=new StatusSyncDAO();
        TransactionEntry transactionEntry = new TransactionEntry();
        ActionEntry entry = new ActionEntry();
        DirectKitResponseVO directKitResponseVO=new DirectKitResponseVO();
        MarketPlaceVO marketPlaceVO=null;
        MerchantDetailsVO merchantDetailsVO=new MerchantDetailsVO();
        RestCommonInputValidator commonInputValidator=new RestCommonInputValidator();

        String stat = "";
        String statMessage = "";
        String trackingId = directRefundValidatorVO.getTrackingid();
        String refundAmt = directRefundValidatorVO.getTransDetailsVO().getAmount();
        String refReason = directRefundValidatorVO.getRefundReason();
        String marketPlaceFlag="";
        String accountId = "";
        String currency="";
        String captureAmount = "";
        String refundAmount = "";
        String transactionStatus = "";
        String refundStatus = "";

        Connection connection=null;
        try
        {
            connection=Database.getConnection();
            Hashtable commHash = transaction.getCaptureTransactionCommon(trackingId,directRefundValidatorVO.getMerchantDetailsVO().getMemberId());
            if (!commHash.isEmpty())
            {
                accountId = (String) commHash.get("accountid");
                if(functions.isValueNull((String)commHash.get("currency"))){
                    currency=(String) commHash.get("currency");
                }else{
                    currency = GatewayAccountService.getGatewayAccount(accountId).getCurrency();
                }
                if (currency.equals("JPY"))
                {
                    if (!paymentChecker.isAmountValidForJPY(currency, refundAmt))
                    {
                        errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_JPY_CURRENCY_CHECK, ErrorMessages.JPY_CURRENCY));
                        PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processRefund()", null, "Common", ErrorMessages.JPY_CURRENCY, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.JPY_CURRENCY, new Throwable(ErrorMessages.JPY_CURRENCY));
                    }
                }
                else
                {
                    if (!Functions.checkAccuracy(refundAmt, 2))
                    {
                        errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.VALIDATION_AMOUNT, ErrorMessages.INVALID_AMOUNT));
                        PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processRefund()", null, "Common", ErrorMessages.INVALID_AMOUNT, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.INVALID_AMOUNT, new Throwable(ErrorMessages.INVALID_AMOUNT));
                    }
                }
                RefundChecker refundChecker=new RefundChecker();
                captureAmount = (String) commHash.get("captureamount");
                refundAmount = (String) commHash.get("refundamount");
                transactionStatus = (String) commHash.get("status");
                if(!refundChecker.isRefundAllowed(directRefundValidatorVO.getMerchantDetailsVO().getMemberId()))
                {
                    errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_REFUND_ALLOWED, ErrorMessages.REFUND_ALLOWED));
                    PZExceptionHandler.raiseConstraintViolationException("SingleCallGenericReverse.java", "singleCallReverse()", null,"Transaction", ErrorMessages.REFUND_ALLOWED, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,errorCodeListVO, null, null);
                }
                int refundAllowedDays = Integer.parseInt((String) directRefundValidatorVO.getMerchantDetailsVO().getRefundAllowedDays());
                String transactionDate = (String) commHash.get("transactiondate");
                SimpleDateFormat targetFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                long d = Functions.DATEDIFF(transactionDate, targetFormat.format(new Date()));
                if (d > refundAllowedDays)
                {
                    errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.REFUND_ALLOWEDDAYS_VALIDATION, ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION));
                    PZExceptionHandler.raiseConstraintViolationException("RestDirectTransactionManager.java", "singleCallReverse()", null, "Transaction", ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION, PZConstraintExceptionEnum.INVALID_REFUND_REQUEST, errorCodeListVO, null, null);
                }
                MerchantDetailsVO merchantDetailsVO1=directRefundValidatorVO.getMerchantDetailsVO();
                if(directRefundValidatorVO.getMarketPlaceVO() != null)
                {
                    merchantDetailsVO=new MerchantDetailsVO();
                    String memberid = directRefundValidatorVO.getMarketPlaceVO().getMemberid();
                    merchantDetailsVO = commonInputValidator.getMerchantConfigDetailsByLogin(memberid);
                    directRefundValidatorVO.setMerchantDetailsVO(merchantDetailsVO);
                    if(!refundChecker.isRefundAllowed(directRefundValidatorVO.getMerchantDetailsVO().getMemberId()))
                    {
                        errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_REFUND_ALLOWED, ErrorMessages.REFUND_ALLOWED));
                        PZExceptionHandler.raiseConstraintViolationException("SingleCallGenericReverse.java", "singleCallReverse()", null,"Transaction", ErrorMessages.PARENT_REFUND_ALLOWED, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,errorCodeListVO, null, null);
                    }
                    String parentStatus=directRefundValidatorVO.getMarketPlaceVO().getStatus();
                    if("N".equalsIgnoreCase(merchantDetailsVO.getMultipleRefund()) && parentStatus.equalsIgnoreCase(PZTransactionStatus.REVERSED.toString())){
                        statMessage= "Multiple Refund is not allowed.";
                        errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_MULTIPLE_REFUND_NOT_ALLOWED, ErrorMessages.MULTPLE_REFUND_NOT_ALLOWED));
                        PZExceptionHandler.raiseConstraintViolationException("SingleCallGenericReverse.java", "singleCallReverse()", null,"Transaction", ErrorMessages.MULTPLE_REFUND_NOT_ALLOWED, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,errorCodeListVO, null, null);

                    }
                    refundAllowedDays=Integer.parseInt(merchantDetailsVO.getRefundAllowedDays());
                    if (d > refundAllowedDays)
                    {
                        errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.REFUND_ALLOWEDDAYS_VALIDATION, ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION));
                        PZExceptionHandler.raiseConstraintViolationException("RestDirectTransactionManager.java", "singleCallReverse()", null, "Transaction", ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION, PZConstraintExceptionEnum.INVALID_REFUND_REQUEST, errorCodeListVO, null, null);
                    }
                }
                marketPlaceFlag=directRefundValidatorVO.getMerchantDetailsVO().getMarketPlace();
                if(directRefundValidatorVO.getMarketPlaceVOList() != null && !"N".equalsIgnoreCase(marketPlaceFlag))
                {
                    List <MarketPlaceVO> marketPlaceVOList=new ArrayList<>();
                    for(MarketPlaceVO marketPlaceVO1:directRefundValidatorVO.getMarketPlaceVOList())
                    {
                        merchantDetailsVO = new MerchantDetailsVO();
                        String memberid = marketPlaceVO1.getMemberid();
                        merchantDetailsVO = commonInputValidator.getMerchantConfigDetailsByLogin(memberid);
                        marketPlaceVO1.setMerchantDetailsVO(merchantDetailsVO);
                        if (!refundChecker.isRefundAllowed(merchantDetailsVO.getMemberId()))
                        {
                            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_REFUND_ALLOWED, ErrorMessages.REFUND_ALLOWED));
                            PZExceptionHandler.raiseConstraintViolationException("SingleCallGenericReverse.java", "singleCallReverse()", null, "Transaction", ErrorMessages.VENDOR_REFUND_ALLOWED, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, null, null);
                        }
                        String childstatus = marketPlaceVO1.getStatus();
                        if("N".equalsIgnoreCase(merchantDetailsVO.getMultipleRefund()) && childstatus.equalsIgnoreCase(PZTransactionStatus.REVERSED.toString())){
                            statMessage= "Multiple Refund is not allowed for Vendor Merchant.";
                            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_MULTIPLE_REFUND_NOT_ALLOWED, ErrorMessages.MULTPLE_REFUND_NOT_ALLOWED));
                            PZExceptionHandler.raiseConstraintViolationException("SingleCallGenericReverse.java", "singleCallReverse()", null,"Transaction", ErrorMessages.MULTPLE_REFUND_NOT_ALLOWED, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,errorCodeListVO, null, null);

                        }
                        refundAllowedDays=Integer.parseInt(merchantDetailsVO.getRefundAllowedDays());
                        transactionLogger.error("refundAllowedDays---------3-------------->"+refundAllowedDays);
                        if (d > refundAllowedDays)
                        {
                            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.REFUND_ALLOWEDDAYS_VALIDATION, ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION));
                            PZExceptionHandler.raiseConstraintViolationException("RestDirectTransactionManager.java", "singleCallReverse()", null, "Transaction", ErrorMessages.REFUND_ALLOWEDDAYS_VALIDATION, PZConstraintExceptionEnum.INVALID_REFUND_REQUEST, errorCodeListVO, null, null);
                        }
                        marketPlaceVOList.add(marketPlaceVO1);
                    }

                }

                AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(accountId));
                PZRefundRequest refundRequest = new PZRefundRequest();
                transactionLogger.error("marketPlaceFlag------------->"+marketPlaceFlag);
                if(directRefundValidatorVO.getMarketPlaceVO() != null && !"N".equalsIgnoreCase(marketPlaceFlag))//when child trackingid pass in request
                {
                    marketPlaceVO=directRefundValidatorVO.getMarketPlaceVO();
                    refundRequest.setTrackingId(Integer.valueOf(marketPlaceVO.getTrackingid()));
                    if(functions.isValueNull(marketPlaceVO.getReversedAmount()))
                        refundRequest.setReversedAmount(marketPlaceVO.getReversedAmount());
                    if(functions.isValueNull(marketPlaceVO.getCapturedAmount()))
                        refundRequest.setCaptureAmount(marketPlaceVO.getCapturedAmount());

                    refundRequest.setRequestedTrackingid(Integer.parseInt(directRefundValidatorVO.getTrackingid()));
                    refundRequest.setRequestedReversedAmount(refundAmount);
                    refundRequest.setRequestedCaptureAmount(captureAmount);
                }
                else
                {
                    refundRequest.setTrackingId(Integer.valueOf(trackingId));
                    refundRequest.setReversedAmount(refundAmount);
                    refundRequest.setCaptureAmount(captureAmount);
                    if(directRefundValidatorVO.getMarketPlaceVOList() != null && !"N".equalsIgnoreCase(marketPlaceFlag))
                    {
                        refundRequest.setChildDetailsList(directRefundValidatorVO.getMarketPlaceVOList());
                    }
                }
                refundRequest.setMarketPlaceFlag(marketPlaceFlag);
                refundRequest.setAccountId(Integer.valueOf(accountId));
                refundRequest.setMemberId(Integer.valueOf(directRefundValidatorVO.getMerchantDetailsVO().getMemberId()));
                refundRequest.setRefundAmount(refundAmt);
                refundRequest.setCurrency(currency);
                refundRequest.setRefundReason("-");
                refundRequest.setTransactionStatus(transactionStatus);
                refundRequest.setIpAddress(directRefundValidatorVO.getMerchantIpAddress());
                auditTrailVO.setActionExecutorId(directRefundValidatorVO.getMerchantDetailsVO().getMemberId());
                auditTrailVO.setActionExecutorName("REST Reverse");
                refundRequest.setAuditTrailVO(auditTrailVO);

                if("N".equalsIgnoreCase(merchantDetailsVO1.getMultipleRefund()) && transactionStatus.equalsIgnoreCase(PZTransactionStatus.REVERSED.toString())){
                    statMessage= "Multiple Refund is not allowed.";
                    errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_MULTIPLE_REFUND_NOT_ALLOWED, ErrorMessages.MULTPLE_REFUND_NOT_ALLOWED));
                    PZExceptionHandler.raiseConstraintViolationException("SingleCallGenericReverse.java", "singleCallReverse()", null,"Transaction", ErrorMessages.MULTPLE_REFUND_NOT_ALLOWED, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED,errorCodeListVO, null, null);

                }else{
                    if(directRefundValidatorVO.getMarketPlaceVO() != null && !"N".equalsIgnoreCase(marketPlaceFlag))//when child trackingid pass in request
                    {
                        String parentStatus=marketPlaceVO.getStatus();
                        if ("N".equalsIgnoreCase(directRefundValidatorVO.getMerchantDetailsVO().getMultipleRefund()) && parentStatus.equalsIgnoreCase(PZTransactionStatus.REVERSED.toString()))
                        {
                            statMessage = "Multiple Refund is not allowed for Parent Merchant.";
                            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_MULTIPLE_REFUND_NOT_ALLOWED, ErrorMessages.MULTPLE_REFUND_NOT_ALLOWED));
                            PZExceptionHandler.raiseConstraintViolationException("SingleCallGenericReverse.java", "singleCallReverse()", null, "Transaction", ErrorMessages.MULTPLE_REFUND_NOT_ALLOWED, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, null, null);

                        }
                    }
                    PZRefundResponse refundResponse = paymentProcess.refund(refundRequest);
                    PZResponseStatus responseStatus = refundResponse.getStatus();
                    String refundDescription = refundResponse.getResponseDesceiption();

                    if (PZResponseStatus.SUCCESS.equals(responseStatus))
                    {
                        stat = "Y";
                        statusSyncDAO.updateAllRefundTransactionFlowFlag(trackingId, "reversed");
                        refundStatus = PZResponseStatus.SUCCESS.toString();
                        if (Double.parseDouble(refundAmt) < Double.parseDouble(captureAmount))
                        {
                            refundStatus = PZResponseStatus.PARTIALREFUND.toString();
                            refundResponse.setStatus(PZResponseStatus.PARTIALREFUND);
                        }

                    }
                    else
                    {
                        stat = "N";
                    }
                    String reason="";
                    statMessage = refundDescription;
                    if ("Y".equalsIgnoreCase(merchantDetailsVO1.getIsRefundEmailSent()))
                    {
                        AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                        asynchronousMailService.sendEmail(MailEventEnum.REFUND_TRANSACTION, trackingId, responseStatus.toString(), reason, null);
                    }
                    if (directRefundValidatorVO.getMarketPlaceVO() != null && !"N".equalsIgnoreCase(marketPlaceFlag))
                    {
                        marketPlaceVO=directRefundValidatorVO.getMarketPlaceVO();
                        merchantDetailsVO=directRefundValidatorVO.getMerchantDetailsVO();
                        if ("Y".equalsIgnoreCase(merchantDetailsVO.getIsRefundEmailSent()))
                        {
                            AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                            asynchronousMailService.sendEmail(MailEventEnum.REFUND_TRANSACTION, marketPlaceVO.getTrackingid(), responseStatus.toString(), reason, null);
                        }
                    }
                    if(!"N".equalsIgnoreCase(marketPlaceFlag) && (directRefundValidatorVO.getMarketPlaceVOList() != null && directRefundValidatorVO.getMarketPlaceVOList().size()>0))
                    {
                        for(MarketPlaceVO marketPlaceVO1:directRefundValidatorVO.getMarketPlaceVOList())
                        {
                            merchantDetailsVO1 = marketPlaceVO1.getMerchantDetailsVO();
                            logger.error("marketPlaceVO.getTrackingid()---------->"+marketPlaceVO1.getTrackingid());
                            if ("Y".equalsIgnoreCase(merchantDetailsVO1.getIsRefundEmailSent()))
                            {
                                AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
                                asynchronousMailService.sendEmail(MailEventEnum.REFUND_TRANSACTION, marketPlaceVO1.getTrackingid(), responseStatus.toString(), reason, null);
                            }
                        }
                    }
                }
            }
        }
        catch (SystemError systemError)
        {
            PZExceptionHandler.raiseDBViolationException(RestDirectTransactionManager.class.getName(), "processRefund()", null, "Common", "System error while refunding transaction", PZDBExceptionEnum.DB_CONNECTION_ISSUE, null, systemError.getMessage(), systemError.getCause());
        }
        finally
        {
            Database.closeConnection(connection);
        }
        transactionUtil.setRefundSystemResponseAndErrorCodeListVO(directKitResponseVO, errorCodeListVO, null, directRefundValidatorVO, "Y".equals(stat) ? PZResponseStatus.SUCCESS : PZResponseStatus.FAILED, statMessage);
        return directKitResponseVO;
    }

    public DirectKitResponseVO processCapture(DirectCaptureValidatorVO directCaptureValidatorVO) throws PZGenericConstraintViolationException
    {

        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        ErrorCodeListVO errorCodeListVO=new ErrorCodeListVO();
        Transaction transaction = new Transaction();
        PaymentChecker paymentChecker = new PaymentChecker();
        PZCaptureResponse captureResponse=null;
        TransactionHelper transactionHelper = new TransactionHelper();

        String memberid = directCaptureValidatorVO.getMerchantDetailsVO().getMemberId();
        String captureAmt = directCaptureValidatorVO.getTransDetailsVO().getAmount();
        String trackingId = directCaptureValidatorVO.getTrackingid();
        String stat = "";
        String statMessage = "";
        String mailtransactionStatus = "";
        String currency="";

        Hashtable authTransactionHash = transaction.getAuthTransactionCommon(memberid,trackingId);
        if(authTransactionHash==null || authTransactionHash.size()==0)
        {
            String error1="Transaction not found for tracking ID-"+trackingId;
            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_INVALIDTRANSACTION_DATA, error1));
            PZExceptionHandler.raiseGenericViolationException(RestDirectTransactionManager.class.getName(), "processCancel()", null, "Common", error1, errorCodeListVO, null, null);
        }
        String amount = (String) authTransactionHash.get("amount");
        String accountId = (String) authTransactionHash.get("accountid");
        if(functions.isValueNull((String)authTransactionHash.get("currency"))){
            currency=(String)authTransactionHash.get("currency");
        }else{
            currency = GatewayAccountService.getGatewayAccount(accountId).getCurrency();
        }


        if(currency.equals("JPY"))
        {
            if(!paymentChecker.isAmountValidForJPY(currency,captureAmt))
            {
                errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_JPY_CURRENCY_CHECK, ErrorMessages.JPY_CURRENCY));
                PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processRefund()", null, "Common", ErrorMessages.JPY_CURRENCY, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.JPY_CURRENCY, new Throwable(ErrorMessages.JPY_CURRENCY));
            }
        }
        else
        {
            if (!Functions.checkAccuracy(captureAmt, 2))
            {
                errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.VALIDATION_AMOUNT, ErrorMessages.INVALID_AMOUNT));
                PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processRefund()", null, "Common", ErrorMessages.INVALID_AMOUNT, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.INVALID_AMOUNT, new Throwable(ErrorMessages.INVALID_AMOUNT));
            }
        }

        String isExcessCaptureAllowed = "";
        isExcessCaptureAllowed = (String) authTransactionHash.get("isExcessCaptureAllowed");
        boolean isOverCaptureRequest=isOverCaptureRequest(captureAmt,amount);
        boolean isValidCaptureAmount=true;
        boolean isOverCaptureAllowed=false;
        boolean isValidCaptureRequest=true;
        AuditTrailVO auditTrailVO = new AuditTrailVO();

        if("Y".equals(isExcessCaptureAllowed))
        {
            isOverCaptureAllowed=true;
        }
        else
        {
            errorCodeListVO = transactionHelper.getReferencedCaptureCancelRefundTransDetails(directCaptureValidatorVO);
            if (errorCodeListVO != null)
            {
                directKitResponseVO.setErrorCodeListVO(errorCodeListVO);
            }
        }
        if(isOverCaptureRequest)
        {
            if(isOverCaptureAllowed)
            {
                GatewayType gatewayType=GatewayTypeService.getGatewayType(GatewayAccountService.getGatewayAccount(accountId).getPgTypeId());
                String overCapturePercentage=gatewayType.getExcessCapturePercentage();
                double validOverCaptureAmount=(Double.valueOf(amount)*Double.valueOf(overCapturePercentage))/100;
                if(Double.valueOf(captureAmt)>validOverCaptureAmount)
                {
                    isValidCaptureAmount=false;
                }
            }
            else
            {
                isValidCaptureRequest=false;
            }
        }

        if (isValidCaptureRequest && isValidCaptureAmount)
        {
            AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(trackingId), Integer.parseInt(accountId));

            PZCaptureRequest captureRequest = new PZCaptureRequest();
            captureRequest.setAccountId(Integer.valueOf(accountId));
            captureRequest.setMemberId(Integer.valueOf(memberid));
            captureRequest.setTrackingId(Integer.valueOf(trackingId));
            captureRequest.setAmount(Double.valueOf(captureAmt));
            captureRequest.setCurrency(currency);
            captureRequest.setIpAddress(directCaptureValidatorVO.getAddressDetailsVO().getIp());
            captureRequest.setPod("Capture Transaction");
            auditTrailVO.setActionExecutorId(memberid);
            auditTrailVO.setActionExecutorName("REST API");
            captureRequest.setAuditTrailVO(auditTrailVO);

            captureResponse = paymentProcess.capture(captureRequest);
            PZResponseStatus responseStatus = captureResponse.getStatus();
            String captureDescription = captureResponse.getResponseDesceiption();

            if (PZResponseStatus.SUCCESS.equals(responseStatus))
            {
                stat = "Y";
                mailtransactionStatus = "successful";
            }
            else
            {
                stat = "N";
                mailtransactionStatus = "failed";
            }
            statMessage = captureDescription;
        }
        else
        {
            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_EXCESS_CAPTURE_AMOUNT, ErrorMessages.INVALID_EXCESS_CAPTURE_AMOUNT));
            PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processRefund()", null, "Common", ErrorMessages.INVALID_EXCESS_CAPTURE_AMOUNT, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.INVALID_AMOUNT, new Throwable(ErrorMessages.INVALID_AMOUNT));

        }
        transactionUtil.setCaptureSystemResponseAndErrorCodeListVO(directKitResponseVO, errorCodeListVO, null, directCaptureValidatorVO, stat, statMessage);
        AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
        asynchronousMailService.sendEmail(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingId), mailtransactionStatus, null,null);

        return directKitResponseVO;
    }

    public DirectKitResponseVO processCancel(CommonValidatorVO commonValidatorVO) throws PZDBViolationException, PZConstraintViolationException,PZGenericConstraintViolationException
    {
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        Merchants merchants = new Merchants();
        Transaction transaction = new Transaction();

        String description = "";
        String trackingid = "";
        String memberid = "";
        String key = "";
        String checksumAlgorithm = "";
        String activation = "";
        String partnerId = "";
        String accountId = "";
        String terminalid = "";
        String transactionStatus = "";
        String fromtype = "";
        String status = "";
        String statusMsg = "";
        String mailtransactionStatus = "";
        String amount = "";
        AuditTrailVO auditTrailVO = new AuditTrailVO();

        Hashtable data=new Hashtable();

        ErrorCodeListVO errorCodeListVO=new ErrorCodeListVO();
        PZCancelRequest cancelRequest = new PZCancelRequest();
        PZCancelResponse cancelResponse = new PZCancelResponse();

        trackingid = commonValidatorVO.getTrackingid();
        memberid = commonValidatorVO.getMerchantDetailsVO().getMemberId();

        Hashtable merchantHash = merchants.getMemberDetailsForTransaction(memberid);
        if (!merchantHash.isEmpty())
        {
            key = (String) merchantHash.get("clkey");
            checksumAlgorithm = (String) merchantHash.get("checksumalgo");
            activation = (String) merchantHash.get("activation");
            partnerId=(String)merchantHash.get("partnerId");
        }
        else
        {
            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.VALIDATION_TOID, ErrorMessages.INVALID_TOID));
            PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processCancel()", null, "Common", ErrorMessages.INVALID_TOID, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.INVALID_TOID, new Throwable(ErrorMessages.INVALID_TOID));
        }

        data = transaction.getTransactionDetailsFormCommonForCancel(trackingid, memberid);
        if(data==null || data.size()==0)
        {
            String error1="Transaction not found for tracking ID-"+trackingid+" and description-"+description;
            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_INVALIDTRANSACTION_DATA, error1));
            PZExceptionHandler.raiseGenericViolationException(RestDirectTransactionManager.class.getName(), "processCancel()", null, "Common", error1, errorCodeListVO, null, null);
        }
        accountId = (String)data.get("accountid");
        terminalid = (String)data.get("terminalid");
        amount = (String)data.get("amount");

        transactionStatus= (String)data.get("status");
        if(PZTransactionStatus.CAPTURE_SUCCESS.toString().equals(transactionStatus))
        {
            String error1 = "Captured transaction can not be cancel for trackingid "+trackingid;
            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_VOID_TRANSACTION_NOTALLOWED, error1));
            PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processCancel()", null, "Common", error1, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, error1, new Throwable(error1));
        }
        fromtype = GatewayAccountService.getGatewayAccount(accountId).getGateway();
        if (Functions.checkAPIGateways(fromtype))
        {
            cancelRequest = new PZCancelRequest();
            cancelRequest.setMemberId(Integer.parseInt(memberid));
            cancelRequest.setAccountId(Integer.parseInt(accountId));
            cancelRequest.setTrackingId(Integer.parseInt(trackingid));
            cancelRequest.setTerminalId(terminalid);
            cancelRequest.setAmount(amount);
            cancelRequest.setCancelReason("Cancel Transaction " + trackingid);
            cancelRequest.setIpAddress(commonValidatorVO.getAddressDetailsVO().getIp());
            auditTrailVO.setActionExecutorId(memberid);
            auditTrailVO.setActionExecutorName("REST API");
            cancelRequest.setAuditTrailVO(auditTrailVO);
            AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(accountId));

            if (fromtype != null && com.payment.sbm.core.SBMPaymentGateway.GATEWAY_TYPE.equals(fromtype) && PZTransactionStatus.CAPTURE_SUCCESS.toString().equals(transactionStatus))
            {
                cancelResponse = paymentProcess.cancelCapture(cancelRequest);
            }
            else
            {
                cancelResponse = paymentProcess.cancel(cancelRequest);
            }

            PZResponseStatus status1 = cancelResponse.getStatus();
            if (PZResponseStatus.ERROR.equals(status1))
            {
                statusMsg = "Error while Cancel Transaction";
                status = "N";
                mailtransactionStatus = "Error while Cancel Transaction";
            }
            else if (PZResponseStatus.FAILED.equals(status1))
            {
                statusMsg = "Transaction failed while cancel";
                status = "N";
                mailtransactionStatus = "Transaction failed while cancel";
            }
            else if (PZResponseStatus.SUCCESS.equals(status1))
            {
                statusMsg = "Cancel Transaction Process is successful";
                status = "Y";
                mailtransactionStatus = "Cancel Transaction Process is successful";
            }
            else if (PZResponseStatus.PENDING.equals(status1))
            {
                statusMsg = cancelResponse.getResponseDesceiption();
                status = "N";
                mailtransactionStatus = "pending";
            }
        }
        transactionUtil.setCancelSystemResponseAndErrorCodeListVO(directKitResponseVO, errorCodeListVO, null, commonValidatorVO, status, statusMsg);
        AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
        asynchronousMailService.sendEmail(MailEventEnum.PARTNERS_MERCHANT_SALE_TRANSACTION, String.valueOf(trackingid), mailtransactionStatus, null,null);

        return directKitResponseVO;
    }

    public DirectKitResponseVO processInquiry(CommonValidatorVO commonValidatorVO) throws PZDBViolationException, PZConstraintViolationException
    {
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();
        GenericCardDetailsVO cardDetailsVO = commonValidatorVO.getCardDetailsVO();

        Hashtable data = new Hashtable();
        Transaction transaction = new Transaction();
        String accountId=null;
        AbstractPaymentGateway pg = null;
        String fromtype=null;

        /*data = transaction.getQwipiTransDetails(commonValidatorVO.getMerchantDetailsVO().getMemberId(), commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getOrderDesc());
        accountId = (String) data.get("accountid");

        if (accountId == null)
        {
            data = transaction.getTransactionDetailsForCommon(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getOrderId());
            accountId = (String) data.get("accountid");
        }

        if (accountId == null)
        {
            directKitResponseVO = transactionUtil.setInquirySystemResponseAndErrorCodeListVOForRest(errorCodeListVO, null, commonValidatorVO, PZResponseStatus.FAILED.name(), "Your record not found");
            return directKitResponseVO;
        }
        fromtype = GatewayAccountService.getGatewayAccount(accountId).getGateway();*/

        //select payment gateway for payment start
        /*if (QwipiPaymentGateway.GATEWAY_TYPE.equals(fromtype))
        {
            Hashtable dataHash = new Hashtable();

            dataHash = transaction.getTransactionDetails(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getOrderDesc(), "transaction_qwipi");
            if (!dataHash.equals("") && dataHash != null)
            {
                directKitResponseVO = transactionUtil.setInquirySystemResponseAndErrorCodeListVO(errorCodeListVO,null,commonValidatorVO,(String)dataHash.get("status"),"Your record is found");
            }
            else
            {
                directKitResponseVO = transactionUtil.setInquirySystemResponseAndErrorCodeListVO(errorCodeListVO, null, commonValidatorVO, PZResponseStatus.FAILED.name(), "Your record not found");
            }
        }*/

        /*else if (Functions.checkInquiryAPIGateways(fromtype))
        {*/
        Hashtable dataHash = null;

        Date date1 = new Date();
        transactionLogger.error("getTransactionDetails DataHash Start time 1#######" + date1.getTime());

        dataHash = transaction.getTransactionDetails(commonValidatorVO.getTrackingid(), commonValidatorVO.getTransDetailsVO().getOrderId(), "transaction_common");

        transactionLogger.error("getTransactionDetails DataHash end time 1 ######" + new Date().getTime());
        transactionLogger.error("getTransactionDetails DataHash diff time 1 ######" + (new Date().getTime() - date1.getTime()));
        if (null==dataHash || dataHash.size()==0)
        {
            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.REJECTED_RECORD_NOT_FOUND, ErrorMessages.INVALID_TRANSACTION_DATA));
            PZExceptionHandler.raiseConstraintViolationException(DirectTransactionManager.class.getName(), "processInquiry()", null, "Common", ErrorMessages.INVALID_TRACKINGID_MEMBERID, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.INVALID_TRACKINGID_MEMBERID, new Throwable(ErrorMessages.INVALID_TRACKINGID_MEMBERID));
        }

        if(functions.isValueNull(dataHash.get("ccnum").toString()))
        {
            cardDetailsVO.setCardNum(PaymentzEncryptor.decryptPAN(dataHash.get("ccnum").toString()));
            String expiryDate[] = PaymentzEncryptor.decryptExpiryDate(dataHash.get("expdate").toString()).split("/");
            cardDetailsVO.setExpMonth(expiryDate[0]);
            cardDetailsVO.setExpYear(expiryDate[1]);
            cardDetailsVO.setCardHolderName(dataHash.get("name").toString());
            commonValidatorVO.setCardDetailsVO(cardDetailsVO);
        }

        if (functions.isValueNull(commonValidatorVO.getMerchantDetailsVO().getMemberId()) && !dataHash.get("toid").equals(commonValidatorVO.getMerchantDetailsVO().getMemberId()))
        {
            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_INVALIDTRANSACTION_DATA, ErrorMessages.INVALID_TRANSACTION_DATA));
            PZExceptionHandler.raiseConstraintViolationException(DirectTransactionManager.class.getName(), "processInquiry()", null, "Common", ErrorMessages.INVALID_TRACKINGID_MEMBERID, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, ErrorMessages.INVALID_TRACKINGID_MEMBERID, new Throwable(ErrorMessages.INVALID_TRACKINGID_MEMBERID));
        }

        if(functions.isValueNull((String)dataHash.get("orderdescription")))
            commonValidatorVO.getTransDetailsVO().setOrderDesc(dataHash.get("orderdescription").toString());
        commonValidatorVO.getTransDetailsVO().setAmount(dataHash.get("amount").toString());

        if (!dataHash.equals("") && dataHash != null)
        {
            if (dataHash.get("cardtypeid") != null)
                commonValidatorVO.setPaymentBrand(transaction.getPaymentBrandForRest(dataHash.get("cardtypeid").toString()));
            if (dataHash.get("paymodeid") != null)
                commonValidatorVO.setPaymentMode(transaction.getPaymentModeForRest(dataHash.get("paymodeid").toString()));
            commonValidatorVO.getTransDetailsVO().setAmount(dataHash.get("amount").toString());
            if(functions.isValueNull((String) dataHash.get("refundamount")))
            {
                commonValidatorVO.getTransDetailsVO().setRefundAmount((String) dataHash.get("refundamount"));
            }
            if (functions.isValueNull((String) dataHash.get("payoutamount")))
            {
                commonValidatorVO.getTransDetailsVO().setPayoutAmount((String)dataHash.get("payoutamount"));
            }
            commonValidatorVO.getTransDetailsVO().setCurrency(dataHash.get("currency").toString());
            commonValidatorVO.getTransDetailsVO().setOrderId(dataHash.get("description").toString());
            commonValidatorVO.getAddressDetailsVO().setTmpl_amount(dataHash.get("templateamount").toString());
            commonValidatorVO.getAddressDetailsVO().setTmpl_currency(dataHash.get("templatecurrency").toString());
            commonValidatorVO.getAddressDetailsVO().setEmail("");//setting blank email as mercahnt email set in the VO
            if(functions.isValueNull((String) dataHash.get("emailaddr")))
                commonValidatorVO.getAddressDetailsVO().setEmail((String) dataHash.get("emailaddr"));
            if(functions.isValueNull((String) dataHash.get("firstname")))
                commonValidatorVO.getAddressDetailsVO().setFirstname((String) dataHash.get("firstname"));
            if(functions.isValueNull((String) dataHash.get("lastname")))
                commonValidatorVO.getAddressDetailsVO().setLastname((String) dataHash.get("lastname"));
            if(functions.isValueNull((String) dataHash.get("responsedescriptor")))
                commonValidatorVO.getTransDetailsVO().setBillingDiscriptor((String) dataHash.get("responsedescriptor"));
            if(functions.isValueNull((String) dataHash.get("eci")))
                commonValidatorVO.setEci((String) dataHash.get("eci"));
            if(functions.isValueNull((String) dataHash.get("errorName")))
                commonValidatorVO.setErrorName((String) dataHash.get("errorName"));

            if(functions.isValueNull((String) dataHash.get("toid")))
                commonValidatorVO.getMerchantDetailsVO().setMemberId((String) dataHash.get("toid"));

            commonValidatorVO.setTrackingid(dataHash.get("trackingid").toString());

            //CommCardDetailsVO commCardDetailsVO = new CommCardDetailsVO();
            Date date2 = new Date();
            transactionLogger.error("getExtentionDetails Start time 2#######" + date2.getTime());

            if(functions.isValueNull((String) dataHash.get("accountid")))
            {
                AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(commonValidatorVO.getTrackingid()), Integer.parseInt(dataHash.get("accountid").toString()));
                commonValidatorVO = paymentProcess.getExtentionDetails(commonValidatorVO);
            }
            transactionLogger.error("getExtentionDetails end time 2 ######"+new Date().getTime());
            transactionLogger.error("getExtentionDetails diff time 2 ######"+(new Date().getTime()-date2.getTime()));

            Date date3 = new Date();
            transactionLogger.error("setInquirySystemResponseAndErrorCodeListVOForRest Start time 3#######" + date3.getTime());

            directKitResponseVO = transactionUtil.setInquirySystemResponseAndErrorCodeListVOForRest(errorCodeListVO, null, commonValidatorVO, (String) dataHash.get("status"), (String) dataHash.get("remark"), "Your record is found");

            transactionLogger.error("setInquirySystemResponseAndErrorCodeListVOForRest end time 3 ######"+new Date().getTime());
            transactionLogger.error("setInquirySystemResponseAndErrorCodeListVOForRest diff time 3 ######"+(new Date().getTime()-date3.getTime()));

        }
        else
        {
            directKitResponseVO = transactionUtil.setInquirySystemResponseAndErrorCodeListVOForRest(errorCodeListVO, null, commonValidatorVO, PZResponseStatus.FAILED.name(), "Your record not found");
        }

        return directKitResponseVO;
    }

    public DirectKitResponseVO processDeleteRegisteredToken(CommonValidatorVO commonValidatorVO) throws PZDBViolationException, PZConstraintViolationException
    {
        transactionLogger.debug("Inside processDeleteToken :::");

        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        TokenManager tokenManager=new TokenManager();
        String status = "";
        Date date3 = new Date();


        if("Y".equals(commonValidatorVO.getPartnerDetailsVO().getIsMerchantRequiredForCardRegistration()))
            status = tokenManager.doMerchantRegisteredTokenInactive(commonValidatorVO.getMerchantDetailsVO().getMemberId(), commonValidatorVO.getToken());
        else if("N".equals(commonValidatorVO.getPartnerDetailsVO().getIsMerchantRequiredForCardRegistration()))
            status = tokenManager.doPartnerRegisteredTokenInactive(commonValidatorVO.getPartnerDetailsVO().getPartnerId(), commonValidatorVO.getToken());

        directKitResponseVO.setStatus(status);

        return directKitResponseVO;
    }

    private QwipiRequestVO getQRequestVO(CommonValidatorVO commonValidatorVO)throws PZTechnicalViolationException
    {
        QwipiRequestVO RequestDetail=null;
        GenericCardDetailsVO cardDetail= commonValidatorVO.getCardDetailsVO();
        QwipiAddressDetailsVO AddressDetail= new QwipiAddressDetailsVO();
        QwipiTransDetailsVO TransDetail = new QwipiTransDetailsVO();
        Transaction transaction=new Transaction();
        DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        Calendar calendar = Calendar.getInstance();
        String tredtime=dateFormat.format(calendar.getTime()) ;
        String MD5key=null;
        String isKsnUrlFlag=null;
        Hashtable midHash = null;

        String MD5INFO= null;
        try
        {
            midHash = transaction.getMidKeyForQwipi(commonValidatorVO.getMerchantDetailsVO().getAccountId());
            if(!midHash.isEmpty())
            {
                MD5key = (String) midHash.get("midkey");
                isKsnUrlFlag= (String) midHash.get("isksnurlflag");
            }
            MD5INFO = Functions.convertmd5(commonValidatorVO.getTransDetailsVO().getFromid().trim()+commonValidatorVO.getTransDetailsVO().getOrderId().trim()+commonValidatorVO.getTransDetailsVO().getCurrency().trim()+commonValidatorVO.getTransDetailsVO().getAmount().trim()+tredtime.trim()+MD5key.trim());
        }
        catch (NoSuchAlgorithmException e)
        {
            PZExceptionHandler.raiseTechnicalViolationException(RestDirectTransactionManager.class.getName(), "processTransaction()", null, "TransactionServices", "Internal error while placing transaction", PZTechnicalExceptionEnum.NOSUCH_ALGO_EXCEPTION, null, e.getMessage(), e.getCause());
        }
        catch (UnsupportedEncodingException e)
        {
            PZExceptionHandler.raiseTechnicalViolationException(RestDirectTransactionManager.class.getName(), "processTransaction()", null, "TransactionServices", "Internal error while placing transaction", PZTechnicalExceptionEnum.UNSUPPORTED_ENCOADING_EXCEPTION, null, e.getMessage(), e.getCause());
        }

        cardDetail.setCardNum(commonValidatorVO.getCardDetailsVO().getCardNum());
        cardDetail.setcVV(commonValidatorVO.getCardDetailsVO().getcVV());
        cardDetail.setExpMonth(commonValidatorVO.getCardDetailsVO().getExpMonth());
        cardDetail.setExpYear(commonValidatorVO.getCardDetailsVO().getExpYear().substring(2));

        AddressDetail.setMd5key(MD5key);
        AddressDetail.setTime(tredtime);
        AddressDetail.setFirstname(commonValidatorVO.getAddressDetailsVO().getFirstname());
        AddressDetail.setLastname(commonValidatorVO.getAddressDetailsVO().getLastname());
        AddressDetail.setLanguage(commonValidatorVO.getAddressDetailsVO().getLanguage());
        AddressDetail.setCity(commonValidatorVO.getAddressDetailsVO().getCity());
        AddressDetail.setCountry(commonValidatorVO.getAddressDetailsVO().getCountry());
        AddressDetail.setProducts(commonValidatorVO.getTransDetailsVO().getOrderDesc());
        AddressDetail.setState(commonValidatorVO.getAddressDetailsVO().getState());
        AddressDetail.setZipCode(commonValidatorVO.getAddressDetailsVO().getZipCode());
        AddressDetail.setStreet(commonValidatorVO.getAddressDetailsVO().getStreet());
        AddressDetail.setPhone(commonValidatorVO.getAddressDetailsVO().getPhone());
        AddressDetail.setEmail(commonValidatorVO.getAddressDetailsVO().getEmail());
        AddressDetail.setIp(commonValidatorVO.getAddressDetailsVO().getIp());
        AddressDetail.setMd5info(MD5INFO);
        AddressDetail.setBirthdate(commonValidatorVO.getAddressDetailsVO().getBirthdate());
        AddressDetail.setSsn(commonValidatorVO.getAddressDetailsVO().getSsn());

        TransDetail.setAmount(commonValidatorVO.getTransDetailsVO().getAmount());
        TransDetail.setCurrency(commonValidatorVO.getTransDetailsVO().getCurrency());
        TransDetail.setOrderId(commonValidatorVO.getTrackingid());
        TransDetail.setOrderDesc(commonValidatorVO.getTransDetailsVO().getOrderId());
        TransDetail.setMerNo(commonValidatorVO.getTransDetailsVO().getFromid());

        RequestDetail = new QwipiRequestVO(cardDetail,AddressDetail, TransDetail);
        RequestDetail.setKsnUrlFlag(isKsnUrlFlag);
        RequestDetail.setMd5Key(MD5key);
        RequestDetail.setMiddleName("");
        return RequestDetail;
    }

    private CommRequestVO getCommonRequestVO(CommonValidatorVO commonValidatorVO,CommTransactionDetailsVO transDetailsVO) throws PZDBViolationException
    {
        CommRequestVO commRequestVO = null;
        CommAddressDetailsVO addressDetailsVO = new CommAddressDetailsVO();
        CommCardDetailsVO cardDetailsVO = new CommCardDetailsVO();
        RecurringBillingVO recurringBillingVO = commonValidatorVO.getRecurringBillingVO();
        GatewayAccount account = GatewayAccountService.getGatewayAccount(commonValidatorVO.getMerchantDetailsVO().getAccountId());
        String merctId = account.getMerchantId();
        String alias = account.getAliasName();
        String username = account.getFRAUD_FTP_USERNAME();
        String password = account.getFRAUD_FTP_PASSWORD();
        String displayname = account.getDisplayName();
        ReserveField2VO reserveField2VO = new ReserveField2VO();

        if(functions.isValueNull(commonValidatorVO.getEci()) && functions.isValueNull(commonValidatorVO.getXid()) && functions.isValueNull(commonValidatorVO.getVerificationId()))
        {
            transDetailsVO.setEci(commonValidatorVO.getEci());
            transDetailsVO.setXid(commonValidatorVO.getXid());
            transDetailsVO.setVerificationId(commonValidatorVO.getVerificationId());
        }

        if(functions.isValueNull(commonValidatorVO.getCardDetailsVO().getCardNum()))
        {
            cardDetailsVO.setCardNum(commonValidatorVO.getCardDetailsVO().getCardNum());
            cardDetailsVO.setcVV(commonValidatorVO.getCardDetailsVO().getcVV());
            cardDetailsVO.setExpMonth(commonValidatorVO.getCardDetailsVO().getExpMonth());
            cardDetailsVO.setExpYear(commonValidatorVO.getCardDetailsVO().getExpYear());
            cardDetailsVO.setCardType(Functions.getCardType(commonValidatorVO.getCardDetailsVO().getCardNum()));
        }
        else if(functions.isValueNull(commonValidatorVO.getCardDetailsVO().getBIC()))
        {
            cardDetailsVO.setBIC(commonValidatorVO.getCardDetailsVO().getBIC());
            cardDetailsVO.setIBAN(commonValidatorVO.getCardDetailsVO().getIBAN());
            addressDetailsVO.setCountry(commonValidatorVO.getAddressDetailsVO().getCountry());
            cardDetailsVO.setMandateId(commonValidatorVO.getCardDetailsVO().getMandateId());
            cardDetailsVO.setCardHolderName(commonValidatorVO.getAddressDetailsVO().getFirstname()+ " " +commonValidatorVO.getAddressDetailsVO().getLastname());
        }
        else if(functions.isValueNull(commonValidatorVO.getCardDetailsVO().getAccountNumber()))
        {
            reserveField2VO.setAccountType(commonValidatorVO.getCardDetailsVO().getAccountType());
            reserveField2VO.setAccountNumber(commonValidatorVO.getCardDetailsVO().getAccountNumber());
            reserveField2VO.setRoutingNumber(commonValidatorVO.getCardDetailsVO().getRoutingNumber());
        }
        else if(functions.isValueNull(commonValidatorVO.getReserveField2VO().getRoutingNumber()))
        {
            reserveField2VO.setAccountNumber(commonValidatorVO.getReserveField2VO().getAccountNumber());
            reserveField2VO.setRoutingNumber(commonValidatorVO.getReserveField2VO().getRoutingNumber());
            reserveField2VO.setAccountType(commonValidatorVO.getReserveField2VO().getAccountType());
        }

        addressDetailsVO.setFirstname(commonValidatorVO.getAddressDetailsVO().getFirstname());
        addressDetailsVO.setLastname(commonValidatorVO.getAddressDetailsVO().getLastname());
        addressDetailsVO.setCity(commonValidatorVO.getAddressDetailsVO().getCity());
        addressDetailsVO.setCountry(commonValidatorVO.getAddressDetailsVO().getCountry());
        addressDetailsVO.setPhone(commonValidatorVO.getAddressDetailsVO().getPhone());
        addressDetailsVO.setEmail(commonValidatorVO.getAddressDetailsVO().getEmail());
        addressDetailsVO.setState(commonValidatorVO.getAddressDetailsVO().getState());
        addressDetailsVO.setStreet(commonValidatorVO.getAddressDetailsVO().getStreet());
        addressDetailsVO.setZipCode(commonValidatorVO.getAddressDetailsVO().getZipCode());
        addressDetailsVO.setBirthdate(commonValidatorVO.getAddressDetailsVO().getBirthdate());
        addressDetailsVO.setTelnocc(commonValidatorVO.getAddressDetailsVO().getTelnocc());
        addressDetailsVO.setCustomerid(commonValidatorVO.getCustomerId());
        addressDetailsVO.setCardHolderIpAddress(commonValidatorVO.getAddressDetailsVO().getCardHolderIpAddress());
        addressDetailsVO.setIp(commonValidatorVO.getAddressDetailsVO().getIp());
        addressDetailsVO.setTmpl_amount(commonValidatorVO.getAddressDetailsVO().getTmpl_amount());
        addressDetailsVO.setTmpl_currency(commonValidatorVO.getAddressDetailsVO().getTmpl_currency());

        transDetailsVO.setPaymentType(commonValidatorVO.getPaymentType());
        transDetailsVO.setCardType(commonValidatorVO.getCardType());

        transactionLogger.debug("paymentType------"+transDetailsVO.getPaymentType());
        transactionLogger.debug("cardType------"+transDetailsVO.getCardType());

        CommMerchantVO merchantAccountVO = new CommMerchantVO();
        merchantAccountVO.setMerchantId(merctId);
        merchantAccountVO.setPassword(password);
        merchantAccountVO.setMerchantUsername(username);
        merchantAccountVO.setDisplayName(displayname);
        merchantAccountVO.setAliasName(alias);
        merchantAccountVO.setAddress(commonValidatorVO.getMerchantDetailsVO().getAddress());
        merchantAccountVO.setBrandName(commonValidatorVO.getMerchantDetailsVO().getBrandName());

        merchantAccountVO.setZipCode(commonValidatorVO.getMerchantDetailsVO().getZip());
      //  merchantAccountVO.setAccountId(commonValidatorVO.getMerchantDetailsVO().getAccountId());
        String merchantTelNo = commonValidatorVO.getMerchantDetailsVO().getTelNo();
        String mPhone = "";

        if (functions.isValueNull(merchantTelNo) && merchantTelNo.contains("-"))
        {
            String[] phone = merchantTelNo.split("-");
            mPhone = phone[1];
        }
        else
        {
            mPhone = merchantTelNo;
        }
        if (functions.isValueNull(commonValidatorVO.getMerchantDetailsVO().getCompany_name()))
            merchantAccountVO.setMerchantOrganizationName(commonValidatorVO.getMerchantDetailsVO().getCompany_name());
        if (functions.isValueNull(mPhone))
            merchantAccountVO.setPartnerSupportContactNumber(mPhone);


        commRequestVO = PaymentProcessRequestVOFactory.getRequestVOInstance(Integer.parseInt(commonValidatorVO.getMerchantDetailsVO().getAccountId()));

        commRequestVO.setAddressDetailsVO(addressDetailsVO);
        commRequestVO.setCardDetailsVO(cardDetailsVO);
        commRequestVO.setCommMerchantVO(merchantAccountVO);
        commRequestVO.setTransDetailsVO(transDetailsVO);
        commRequestVO.setRecurringBillingVO(recurringBillingVO);
        commRequestVO.setReserveField2VO(reserveField2VO);
        if (functions.isValueNull(commonValidatorVO.getAttemptThreeD()))
            commRequestVO.setAttemptThreeD(commonValidatorVO.getAttemptThreeD());

        AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(commonValidatorVO.getTrackingid()),Integer.parseInt(commonValidatorVO.getMerchantDetailsVO().getAccountId()));
        paymentProcess.setTransactionVOExtension(commRequestVO, commonValidatorVO);

        return commRequestVO;
    }

    public String getTransactionstatus(String status,String remark)
    {
        String mailtransactionStatus="Failed";
        if(status.equalsIgnoreCase("capturesuccess") || status.equalsIgnoreCase("authsuccessful"))
        {
            if(remark!=null && !remark.equals(""))
            {
                mailtransactionStatus="Successful ("+remark+")";
            }
            else
            {
                mailtransactionStatus="Successful";
            }
        }
        else if(status.equalsIgnoreCase("authstarted"))
        {
            if(remark!=null && !remark.equals(""))
            {
                mailtransactionStatus = remark;
            }
        }
        else if(status.equalsIgnoreCase("authfailed"))
        {
            if(remark!=null && !remark.equals(""))
            {
                mailtransactionStatus = mailtransactionStatus +" ("+remark+")";
            }
        }
        return mailtransactionStatus;
    }

    public TokenResponseVO processTokenGeneration(TokenRequestVO tokenRequestVO) throws PZGenericConstraintViolationException
    {
        PartnerDetailsVO partnerDetailsVO = tokenRequestVO.getPartnerDetailsVO();
        MerchantDetailsVO merchantDetailsVO=tokenRequestVO.getMerchantDetailsVO();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();
        TokenManager tokenManager = new TokenManager();
        TokenResponseVO tokenResponseVO = new TokenResponseVO();
        BinResponseVO binResponseVO = new BinResponseVO();

        String cardNumber = tokenRequestVO.getCardDetailsVO().getCardNum();
        String status = "N";
        String remark = "";

        String firstSix = "";
        String paymentType = "1";//By default Payment Type will be Credit Card
        String cardType="";
        if (!tokenRequestVO.getCardDetailsVO().getCardNum().equals(""))
        {
            firstSix = functions.getFirstSix(tokenRequestVO.getCardDetailsVO().getCardNum());
        }
        binResponseVO = functions.getBinDetails(firstSix, tokenRequestVO.getMerchantDetailsVO().getCountry());
        cardType=Functions.getCardTypeFromCardNumber(tokenRequestVO.getCardDetailsVO().getCardNum());

        if(binResponseVO!=null && functions.isValueNull(binResponseVO.getCardcategory()) && functions.isValueNull(binResponseVO.getBrand()))
        {
            if("CREDIT".equalsIgnoreCase(binResponseVO.getCardcategory()))
                paymentType = "1";
            else if("DEBIT".equalsIgnoreCase(binResponseVO.getCardcategory()))
                paymentType = "4";
        }

        if("Y".equals(partnerDetailsVO.getIsMerchantRequiredForCardRegistration()) && "Y".equals(merchantDetailsVO.getIsTokenizationAllowed()))
        {
            tokenRequestVO.setMemberId(tokenRequestVO.getMerchantDetailsVO().getMemberId());
            Date date3 = new Date();
            transactionLogger.error("DirectTransaction.common.processTokenRegistration start #########" + date3.getTime());

            if (functions.isValueNull(cardNumber))
            {
                String existingTokenId = "";
                TokenDetailsVO tokenDetailsVO = new TokenDetailsVO();
                existingTokenId = tokenManager.isTokenAvailable(tokenRequestVO.getMemberId(), tokenRequestVO.getCardDetailsVO().getCardNum());
                if (functions.isValueNull(existingTokenId))
                {
                    tokenRequestVO.setTokenId(existingTokenId);
                    tokenRequestVO.setPaymentType(paymentType);
                    tokenRequestVO.setCardType(cardType);
                    tokenRequestVO.setCvv(tokenRequestVO.getCardDetailsVO().getcVV());
                    tokenDetailsVO = tokenManager.createNewTokenRegistrationByMember(tokenRequestVO);
                    tokenResponseVO.setStatus(tokenDetailsVO.getStatus());
                    tokenResponseVO.setTokenId(existingTokenId);
                    tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                }
                else
                {
                    String newTokenId = tokenManager.createTokenForRegistrationByMember(tokenRequestVO);
                    tokenRequestVO.setTokenId(newTokenId);
                    tokenRequestVO.setPaymentType(paymentType);
                    tokenRequestVO.setCardType(cardType);
                    tokenRequestVO.setCvv(tokenRequestVO.getCardDetailsVO().getcVV());
                    tokenDetailsVO = tokenManager.createNewTokenRegistrationByMember(tokenRequestVO);
                    tokenResponseVO.setStatus(tokenDetailsVO.getStatus());
                    tokenResponseVO.setTokenId(existingTokenId);
                    tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                }
            }
            else if((tokenRequestVO.getCardDetailsVO().getBIC() != null && tokenRequestVO.getCardDetailsVO().getIBAN() != null) || tokenRequestVO.getReserveField2VO().getAccountNumber() != null)
            {
                String existingTokenId = "";
                existingTokenId = tokenManager.isNewAccount(tokenRequestVO.getMemberId(), tokenRequestVO);
                TokenDetailsVO tokenDetailsVO = new TokenDetailsVO();

                if(functions.isValueNull(existingTokenId))
                {
                    tokenRequestVO.setTokenId(existingTokenId);
                    tokenRequestVO.setPaymentType(paymentType);
                    tokenRequestVO.setCardType(cardType);
                    tokenRequestVO.setCvv(tokenRequestVO.getCardDetailsVO().getcVV());
                    tokenDetailsVO = tokenManager.createNewTokenRegistrationByMember(tokenRequestVO);
                    tokenResponseVO.setStatus(tokenDetailsVO.getStatus());
                    tokenResponseVO.setTokenId(existingTokenId);
                    tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                }
                else
                {
                    String bankAccountId = tokenManager.insertBankAccountDetails(tokenRequestVO); //inserting bank account details
                    tokenRequestVO.setBankAccountId(bankAccountId);
                    String newTokenId = tokenManager.createTokenForRegistrationByMember(tokenRequestVO); //new token creation in token_master
                    tokenRequestVO.setTokenId(newTokenId);
                    tokenRequestVO.setPaymentType(paymentType);
                    tokenRequestVO.setCardType(cardType);
                    tokenRequestVO.setCvv(tokenRequestVO.getCardDetailsVO().getcVV());
                    tokenDetailsVO = tokenManager.createNewTokenRegistrationByMember(tokenRequestVO); //new registration in registration_master
                    tokenResponseVO.setStatus(tokenDetailsVO.getStatus());
                    tokenResponseVO.setTokenId(existingTokenId);
                    tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                }
            }

            transactionLogger.error("DirectTransaction.common.processTokenRegistration end #########" + new Date().getTime());
            transactionLogger.error("DirectTransaction.common.processTokenRegistration diff #########"+(new Date().getTime()-date3.getTime()));
            if(functions.isValueNull(tokenRequestVO.getCustomerId()))
                tokenResponseVO.setCustomerId(tokenRequestVO.getCustomerId());
            tokenResponseVO.setMemberId(tokenRequestVO.getMerchantDetailsVO().getMemberId());
        }
        else
        {
            if (functions.isValueNull(cardNumber))
            {
                String existingTokenId = "";
                TokenDetailsVO tokenDetailsVO = new TokenDetailsVO();
                existingTokenId = tokenManager.getExistingTokenByPartner(tokenRequestVO.getPartnerId(), tokenRequestVO.getCardDetailsVO().getCardNum());

                if (functions.isValueNull(existingTokenId))
                {
                    tokenRequestVO.setTokenId(existingTokenId);
                    tokenRequestVO.setPaymentType(paymentType);
                    tokenRequestVO.setCardType(cardType);
                    tokenRequestVO.setCvv(tokenRequestVO.getCardDetailsVO().getcVV());
                    tokenDetailsVO = tokenManager.createNewTokenRegistrationByPartner(tokenRequestVO);
                    tokenResponseVO.setStatus(tokenDetailsVO.getStatus());
                    tokenResponseVO.setTokenId(existingTokenId);
                    tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                }
                else
                {
                    String newTokenId = tokenManager.createTokenForRegistrationByMember(tokenRequestVO);
                    tokenRequestVO.setTokenId(newTokenId);
                    tokenRequestVO.setPaymentType(paymentType);
                    tokenRequestVO.setCardType(cardType);
                    tokenRequestVO.setCvv(tokenRequestVO.getCardDetailsVO().getcVV());
                    tokenDetailsVO = tokenManager.createNewTokenRegistrationByPartner(tokenRequestVO);
                    tokenResponseVO.setStatus(tokenDetailsVO.getStatus());
                    tokenResponseVO.setTokenId(existingTokenId);
                    tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                }
            }
            else if (tokenRequestVO.getCardDetailsVO().getBIC() != null || tokenRequestVO.getReserveField2VO().getAccountNumber() != null)
            {
                String existingTokenId = "";
                existingTokenId = tokenManager.isNewAccount(tokenRequestVO.getMemberId(), tokenRequestVO);
                TokenDetailsVO tokenDetailsVO = new TokenDetailsVO();

                if (functions.isValueNull(existingTokenId))
                {
                    tokenRequestVO.setTokenId(existingTokenId);
                    tokenRequestVO.setPaymentType(paymentType);
                    tokenRequestVO.setCardType(cardType);
                    tokenRequestVO.setCvv(tokenRequestVO.getCardDetailsVO().getcVV());
                    tokenDetailsVO = tokenManager.createNewTokenRegistrationByPartner(tokenRequestVO);
                    tokenResponseVO.setStatus(tokenDetailsVO.getStatus());
                    tokenResponseVO.setTokenId(existingTokenId);
                    tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                }
                else
                {
                    String bankAccountId = tokenManager.insertBankAccountDetails(tokenRequestVO); //inserting bank account details
                    tokenRequestVO.setBankAccountId(bankAccountId);
                    String newTokenId = tokenManager.createTokenWithAccount(bankAccountId,tokenRequestVO); //new token creation in token_master
                    tokenRequestVO.setTokenId(newTokenId);
                    tokenRequestVO.setPaymentType(paymentType);
                    tokenRequestVO.setCardType(cardType);
                    tokenRequestVO.setCvv(tokenRequestVO.getCardDetailsVO().getcVV());
                    tokenDetailsVO = tokenManager.createNewTokenRegistrationByPartner(tokenRequestVO); //new registration in registration_master
                    tokenResponseVO.setStatus(tokenDetailsVO.getStatus());
                    tokenResponseVO.setTokenId(existingTokenId);
                    tokenResponseVO.setRegistrationToken(tokenDetailsVO.getRegistrationToken());
                }
            }

            if(functions.isValueNull(tokenRequestVO.getCustomerId()))
                tokenResponseVO.setCustomerId(tokenRequestVO.getCustomerId());
            tokenResponseVO.setPartnerId(tokenRequestVO.getPartnerDetailsVO().getPartnerId()); //partnerId set in response parameter
        }
        if ("success".equals(tokenResponseVO.getStatus()))
        {
            remark = "Token Created Successfully";
            status = "Y";
        }
        else
        {
            remark = "Token can not created";
        }
        transactionUtil.setTokenSystemResponseAndErrorCodeListVO(directKitResponseVO,errorCodeListVO,null,tokenResponseVO,status,remark);
        return tokenResponseVO;
    }

    public Member addMerchant(Hashtable details) throws PZConstraintViolationException
    {
        Merchants merchants=new Merchants();
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();
        Member mem = null;
        try
        {
            User user = ESAPI.authenticator().createUser((String) details.get("login"), (String) details.get("passwd"), "merchant");
            mem = merchants.addMerchant_new(user.getAccountId(), details);

        }
        catch (Exception e)
        {
            transactionLogger.error("Add user throwing Authentication Exception ", e);
            logger.error("Add user throwing Authentication Exception ", e);

            if(e instanceof AuthenticationAccountsException)
            {
                String message=((AuthenticationAccountsException)e).getLogMessage();
                if(message.contains("Duplicate"))
                {
                    String error = "You cannot register token";
                    errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_TOKEN_ALLOWED, error));
                    PZExceptionHandler.raiseConstraintViolationException(RestDirectTransactionManager.class.getName(), "processTokenGeneration()", null, "Common", error, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, error, new Throwable(error));
                    //throw new SystemError("Error: " + message);
                }
            }

            try
            {
                merchants.DeleteBoth((String) details.get("login"));
            }
            catch(Exception e1)
            {
                transactionLogger.error("Exception while deletion of Details::",e1);
                logger.error("Exception while deletion of Details::",e1);
            }
        }

        //client mail
       /* MailService mailService=new MailService();
        HashMap merchantSignupMail=new HashMap();
        merchantSignupMail.put(MailPlaceHolder.USERNAME,details.get("login"));
        merchantSignupMail.put(MailPlaceHolder.NAME,details.get("contact_persons"));
        merchantSignupMail.put(MailPlaceHolder.TOID,String.valueOf(mem.memberid));
        mailService.sendMail(MailEventEnum.PARTNERS_MERCHANT_REGISTRATION,merchantSignupMail);*/
        return mem;
    }

    private boolean isOverCaptureRequest(String captureAmount,String authAmount)
    {
        boolean isOverCaptureRequest=false;
        if (new BigDecimal(captureAmount).compareTo(new BigDecimal(authAmount)) > 0)
        {
            isOverCaptureRequest=true;
        }
        return isOverCaptureRequest;
    }

    public List<TransactionVO> processGetTransactionList (TransactionVO transactionVO,CommonValidatorVO commonValidatorVO,List<TransactionVO> transDetailVOList) throws PZDBViolationException, PZConstraintViolationException
    {
        //InvoiceEntry invoiceEntry = new InvoiceEntry();
        List<TransactionVO> list = new ArrayList<TransactionVO>();
        Hashtable hash = new Hashtable();
        TransactionManager transactionManager = new TransactionManager();
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();


        String fdate = "";
        String fmonth = "";
        String fyear = "";
        String tdate = "";
        String tmonth = "";
        String tyear = "";

        if (functions.isValueNull(commonValidatorVO.getPaginationVO().getStartdate()))
        {
            String[] startDate = commonValidatorVO.getPaginationVO().getStartdate().split("/");
            fdate = startDate[0];
            fmonth = startDate[1];
            fyear = startDate[2];
        }

        if (functions.isValueNull(commonValidatorVO.getPaginationVO().getEnddate()))
        {
            String[] endDate = commonValidatorVO.getPaginationVO().getEnddate().split("/");
            tdate = endDate[0];
            tmonth = endDate[1];
            tyear = endDate[2];
        }

        String fdtstamp = Functions.converttomillisec(fmonth, fdate, fyear, "0", "0", "0");
        String tdtstamp = Functions.converttomillisec(tmonth, tdate, tyear, "23", "59", "59");

        list = transactionManager.getTransactionDetail(transactionVO,commonValidatorVO,transDetailVOList,fdtstamp,tdtstamp);

        if (list.isEmpty())
        {
            errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.VALIDATION_CURRENCY, ErrorMessages.INVALID_CURRENCY));
            PZExceptionHandler.raiseConstraintViolationException("RestDirectTransactionManager.class", "processDeleteRegisteredToken()", null, "Common", ErrorMessages.INVALID_CURRENCY, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, null, null);

        }


        return list;

    }

    public DirectKitResponseVO processPayout(CommonValidatorVO commonValidatorVO) throws PZDBViolationException, PZConstraintViolationException
    {
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        PZPayoutRequest pzPayoutRequest = new PZPayoutRequest();
        PZPayoutResponse pzPayoutResponse = new PZPayoutResponse();
        AbstractPaymentGateway pg = null;
        //CommonPaymentProcess commonPaymentProcess = new CommonPaymentProcess();
        GenericAddressDetailsVO addressDetailsVO = commonValidatorVO.getAddressDetailsVO();
        GenericTransDetailsVO transDetailsVO = commonValidatorVO.getTransDetailsVO();
        MerchantDetailsVO merchantDetailsVO = commonValidatorVO.getMerchantDetailsVO();
        CommCardDetailsVO commCardDetailsVO = new CommCardDetailsVO();
        PaymentManager paymentManager = new PaymentManager();
        AuditTrailVO auditTrailVO = new AuditTrailVO();
        String status = "";
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();
        String custAccount = "";
        custAccount = commonValidatorVO.getCustAccount();
        //System.out.println("custAccount-1--"+custAccount);

        AbstractPaymentProcess paymentProcess = null;

        if (functions.isValueNull(commonValidatorVO.getTrackingid()))
        {
            status = paymentManager.getStatusOfTransaction(commonValidatorVO.getTrackingid());

            transactionLogger.debug("status-----"+status+"------payoutType-----"+commonValidatorVO.getPayoutType());

            if(!"cancel".equalsIgnoreCase(commonValidatorVO.getPayoutType()))
            {
                if(!status.equals("authsuccessful") && !status.equals("capturesuccess") && !status.equals("setteled") && !status.equals("settled"))
                {
                    errorCodeListVO.addListOfError(transactionUtil.formSystemErrorCodeVO(ErrorName.SYS_INVALID_TRANSACTION, ErrorMessages.INVALID_TRANSACTION));
                    PZExceptionHandler.raiseConstraintViolationException("RestDirectTransactionManager.class", "processDeleteRegisteredToken()", null, "Common", ErrorMessages.INVALID_CURRENCY, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, errorCodeListVO, null, null);
                }
            }
            paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(Integer.parseInt(commonValidatorVO.getTrackingid()), Integer.parseInt(commonValidatorVO.getMerchantDetailsVO().getAccountId()));
            commonValidatorVO = paymentProcess.getExtentionDetails(commonValidatorVO);
            pzPayoutRequest.setTrackingId(Integer.parseInt(commonValidatorVO.getTrackingid()));
        }
        else
        {
            paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(0, Integer.parseInt(commonValidatorVO.getMerchantDetailsVO().getAccountId()));
        }

        //System.out.println("commvalidator----"+commonValidatorVO.getCustAccount());
        auditTrailVO.setActionExecutorId(merchantDetailsVO.getMemberId());
        auditTrailVO.setActionExecutorName("REST API");
        pzPayoutRequest.setOrderId(transDetailsVO.getOrderId());
        pzPayoutRequest.setPayoutAmount(transDetailsVO.getAmount());
        pzPayoutRequest.setOrderDescription(transDetailsVO.getOrderDesc());
        pzPayoutRequest.setNotificationUrl(transDetailsVO.getNotificationUrl());
        pzPayoutRequest.setCustomerAccount(commonValidatorVO.getCustAccount());
        pzPayoutRequest.setAccountId(Integer.parseInt(merchantDetailsVO.getAccountId()));
        pzPayoutRequest.setMemberId(Integer.parseInt(merchantDetailsVO.getMemberId()));
        pzPayoutRequest.setTerminalId(commonValidatorVO.getTerminalId());
        pzPayoutRequest.setAuditTrailVO(auditTrailVO);
        if(functions.isValueNull(commonValidatorVO.getCustEmail()))
            pzPayoutRequest.setCustomerEmail(commonValidatorVO.getCustEmail());
        else
            pzPayoutRequest.setCustomerEmail(commonValidatorVO.getAddressDetailsVO().getEmail());

        pzPayoutRequest.setExpDateOffset(merchantDetailsVO.getExpDateOffset());
        pzPayoutRequest.setPayoutCurrency(transDetailsVO.getCurrency());
        pzPayoutRequest.setTmpl_currency(addressDetailsVO.getTmpl_currency());
        pzPayoutRequest.setTmpl_amount(addressDetailsVO.getTmpl_amount());
        pzPayoutRequest.setCustomerId(commonValidatorVO.getCustomerId());
        pzPayoutRequest.setCustomerBankId(commonValidatorVO.getCustomerBankId());
        pzPayoutRequest.setWalletId(transDetailsVO.getWalletId());
        pzPayoutRequest.setWalletAmount(transDetailsVO.getWalletAmount());
        pzPayoutRequest.setWalletCurrency(transDetailsVO.getWalletCurrency());

        if(functions.isValueNull(commonValidatorVO.getPayoutType())){
            pzPayoutRequest.setPayoutType(commonValidatorVO.getPayoutType());
        }

        //System.out.println("custAccount  ()----"+pzPayoutRequest.getCustomerAccount());

        transactionLogger.error("from pz email---"+pzPayoutRequest.getCustomerEmail());
        transactionLogger.error("from pz id---"+pzPayoutRequest.getCustomerId());
        transactionLogger.error("from pz bankid---"+pzPayoutRequest.getCustomerBankId());
        transactionLogger.error("from pz bankid---"+pzPayoutRequest.getCustomerBankId());
        transactionLogger.error("from payout Type---"+pzPayoutRequest.getPayoutType());
        transactionLogger.error("from walletId---"+pzPayoutRequest.getWalletId());
        transactionLogger.error("from walletAmount ---"+pzPayoutRequest.getWalletAmount());
        transactionLogger.error("from walletCurrency ---"+pzPayoutRequest.getWalletCurrency());
        String mailTransactionStatus = "";

        pzPayoutResponse = paymentProcess.payout(pzPayoutRequest);
        logger.debug("status----" + pzPayoutResponse.getStatus());
        logger.error("newVoucherSerialNumber----" + pzPayoutResponse.getVoucherNumber());
        logger.error("Remark RestDireectManager----" + pzPayoutResponse.getRemark());
        logger.error("Commission RestDireectManager----" + pzPayoutResponse.getCommissionToPay());
        logger.error("Currency RestDireectManager----" + pzPayoutResponse.getCommissionCurrency());

        if (pzPayoutResponse.getStatus() != null)
            directKitResponseVO.setStatus(String.valueOf(pzPayoutResponse.getStatus()));
        if (pzPayoutResponse.getTrackingId() != null)
            directKitResponseVO.setTrackingId(pzPayoutResponse.getTrackingId());
        if (pzPayoutResponse.getVoucherNumber() != null)
            directKitResponseVO.setVoucherNumber(pzPayoutResponse.getVoucherNumber());
        if (pzPayoutResponse.getRemark() != null)
            directKitResponseVO.setRemark(pzPayoutResponse.getRemark());
        if (pzPayoutResponse.getTmpl_amount() != null)
            directKitResponseVO.setTmpl_amount(pzPayoutResponse.getTmpl_amount());
        if (pzPayoutResponse.getTmpl_currency() != null)
            directKitResponseVO.setTmpl_currency(pzPayoutResponse.getTmpl_currency());
        if (pzPayoutResponse.getPayoutAmount() != null)
            directKitResponseVO.setAmount(pzPayoutResponse.getPayoutAmount());
        if(functions.isValueNull(commonValidatorVO.getCustEmail()))
            directKitResponseVO.setEmail(commonValidatorVO.getCustEmail());
        else
            directKitResponseVO.setEmail(commonValidatorVO.getAddressDetailsVO().getEmail());
        directKitResponseVO.setCustId(commonValidatorVO.getCustomerId());
        directKitResponseVO.setCustBankId(commonValidatorVO.getCustomerBankId());
        directKitResponseVO.setCustAccount(commonValidatorVO.getCustAccount());

        //For VM response
        if(functions.isValueNull(pzPayoutResponse.getMerchantUsersCommission()))
            directKitResponseVO.setMerchantUsersCommission(pzPayoutResponse.getMerchantUsersCommission());
        if(functions.isValueNull(pzPayoutResponse.getCommissionCurrency()))
            directKitResponseVO.setCommissionCurrency(pzPayoutResponse.getCommissionCurrency());

        transactionLogger.error("from res email---"+directKitResponseVO.getEmail());
        transactionLogger.error("from res id---"+directKitResponseVO.getCustId());
        transactionLogger.error("from res bankid---"+directKitResponseVO.getCustBankId());

        if (pzPayoutResponse.getStatus().equals(PZResponseStatus.SUCCESS))
        {
            mailTransactionStatus = "success";
        }
        else if(pzPayoutResponse.getStatus().equals(PZResponseStatus.PENDING))
        {
            mailTransactionStatus = "pending";
        }
        else
        {
            mailTransactionStatus = "failed";
        }

        AsynchronousMailService asynchronousMailService = new AsynchronousMailService();
        asynchronousMailService.sendEmail(MailEventEnum.MERCHANT_PAYOUT_ALERT_MAIL, String.valueOf(directKitResponseVO.getTrackingId()), mailTransactionStatus, null,null);


        return directKitResponseVO;
    }

    private CommRequestVO getSkrillRequestVO(CommonValidatorVO commonValidatorVO)
    {
        CommRequestVO commRequestVO = null;
        CommAddressDetailsVO addressDetailsVO = new CommAddressDetailsVO();
        CommTransactionDetailsVO transDetailsVO = new CommTransactionDetailsVO();

        GatewayAccount account = GatewayAccountService.getGatewayAccount(commonValidatorVO.getMerchantDetailsVO().getAccountId());
        String merctId = account.getMerchantId();
        String username = account.getFRAUD_FTP_USERNAME();
        String password = account.getFRAUD_FTP_PASSWORD();
        addressDetailsVO.setEmail(commonValidatorVO.getAddressDetailsVO().getEmail());
        transDetailsVO.setRedirectUrl(commonValidatorVO.getTransDetailsVO().getRedirectUrl());
        transDetailsVO.setAmount(commonValidatorVO.getTransDetailsVO().getAmount()); //Amount * 100 according to the docs
        transDetailsVO.setCurrency(commonValidatorVO.getTransDetailsVO().getCurrency());
        transDetailsVO.setOrderId(commonValidatorVO.getTrackingid());
        transDetailsVO.setOrderDesc(commonValidatorVO.getTransDetailsVO().getOrderId());
        transDetailsVO.setPaymentType(commonValidatorVO.getPaymentType());
        transDetailsVO.setCardType(commonValidatorVO.getCardType());

        addressDetailsVO.setStreet(commonValidatorVO.getAddressDetailsVO().getStreet());
        addressDetailsVO.setCity(commonValidatorVO.getAddressDetailsVO().getCity());
        addressDetailsVO.setState(commonValidatorVO.getAddressDetailsVO().getState());
        addressDetailsVO.setCountry(commonValidatorVO.getAddressDetailsVO().getCountry());
        addressDetailsVO.setTmpl_amount(commonValidatorVO.getAddressDetailsVO().getTmpl_amount());
        addressDetailsVO.setTmpl_currency(commonValidatorVO.getAddressDetailsVO().getTmpl_currency());
        addressDetailsVO.setCustomerid(commonValidatorVO.getAddressDetailsVO().getCustomerid());
        addressDetailsVO.setPhone(commonValidatorVO.getAddressDetailsVO().getPhone());
        addressDetailsVO.setTelnocc(commonValidatorVO.getAddressDetailsVO().getTelnocc());
        addressDetailsVO.setBirthdate(commonValidatorVO.getAddressDetailsVO().getBirthdate());
        addressDetailsVO.setIp(commonValidatorVO.getAddressDetailsVO().getIp());
        addressDetailsVO.setCardHolderIpAddress(commonValidatorVO.getAddressDetailsVO().getCardHolderIpAddress());

        CommMerchantVO merchantAccountVO = new CommMerchantVO();
        merchantAccountVO.setMerchantId(merctId);
        merchantAccountVO.setPassword(password);
        merchantAccountVO.setMerchantUsername(username);
        merchantAccountVO.setDisplayName(commonValidatorVO.getMerchantDetailsVO().getMemberId());
        merchantAccountVO.setAliasName(commonValidatorVO.getMerchantDetailsVO().getSiteName());

        commRequestVO = PaymentProcessRequestVOFactory.getRequestVOInstance(Integer.parseInt(commonValidatorVO.getMerchantDetailsVO().getAccountId()));

        commRequestVO.setAddressDetailsVO(addressDetailsVO);
        commRequestVO.setCommMerchantVO(merchantAccountVO);
        commRequestVO.setTransDetailsVO(transDetailsVO);

        return commRequestVO;
    }

    private CommRequestVO getPaySafeRequestVO(CommonValidatorVO commonValidatorVO)
    {
        CommRequestVO commRequestVO = null;
        CommAddressDetailsVO addressDetailsVO = new CommAddressDetailsVO();
        CommTransactionDetailsVO transDetailsVO = new CommTransactionDetailsVO();

        GatewayAccount account = GatewayAccountService.getGatewayAccount(commonValidatorVO.getMerchantDetailsVO().getAccountId());
        String merctId = account.getMerchantId();
        String username = account.getFRAUD_FTP_USERNAME();
        String password = account.getFRAUD_FTP_PASSWORD();
        addressDetailsVO.setEmail(commonValidatorVO.getAddressDetailsVO().getEmail());
        transDetailsVO.setRedirectUrl(commonValidatorVO.getTransDetailsVO().getRedirectUrl());
        transDetailsVO.setAmount(commonValidatorVO.getTransDetailsVO().getAmount()); //Amount * 100 according to the docs
        transDetailsVO.setCurrency(commonValidatorVO.getTransDetailsVO().getCurrency());
        transDetailsVO.setOrderId(commonValidatorVO.getTrackingid());
        transDetailsVO.setOrderDesc(commonValidatorVO.getTransDetailsVO().getOrderId());

        CommMerchantVO merchantAccountVO = new CommMerchantVO();
        merchantAccountVO.setMerchantId(merctId);
        merchantAccountVO.setPassword(password);
        merchantAccountVO.setMerchantUsername(username);
        merchantAccountVO.setDisplayName(commonValidatorVO.getMerchantDetailsVO().getMemberId());
        merchantAccountVO.setAliasName(commonValidatorVO.getMerchantDetailsVO().getSiteName());

        commRequestVO = PaymentProcessRequestVOFactory.getRequestVOInstance(Integer.parseInt(commonValidatorVO.getMerchantDetailsVO().getAccountId()));

        commRequestVO.setAddressDetailsVO(addressDetailsVO);
        commRequestVO.setCommMerchantVO(merchantAccountVO);
        commRequestVO.setTransDetailsVO(transDetailsVO);

        return commRequestVO;
    }


    public DirectKitResponseVO processVerifyWalletDetials(CommonValidatorVO commonValidatorVO) throws PZDBViolationException, PZConstraintViolationException
    {
        transactionLogger.error("INSIDE processVerifyWalletDetials");
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();
        TransactionManager transactionManager=new TransactionManager();
        TerminalManager terminalManager = new TerminalManager();
        PaymentManager paymentManager=new PaymentManager();

        String trackingid = commonValidatorVO.getTrackingid();
        String currency = commonValidatorVO.getTransDetailsVO().getCurrency();

        transactionLogger.error("in processVerifyWalletDetials ------- trackingid -----"+trackingid);
        transactionLogger.error("in processVerifyWalletDetials ------- currency ------"+currency);
        try
        {
            TransactionDetailsVO transactionDetailsVO = transactionManager.getTransDetailFromCommonForAuthStarted(trackingid);
            String memberid = transactionDetailsVO.getToid();
            List<TerminalVO> accountList=new ArrayList<TerminalVO>();
            accountList = terminalManager.getMemberandTerminalList(memberid,currency);

            transactionLogger.error("IN processVerifyWalletDetials ------ memberid ------ "+memberid);

            String terminalId = "";
            String paymodeid = "";
            String cardtypeid = "";
            String accountId = "";

            for(TerminalVO terminalVO : accountList)
            {
                terminalId = terminalVO.getTerminalId();
                paymodeid = terminalVO.getPaymodeId();
                cardtypeid = terminalVO.getCardTypeId();
                accountId = terminalVO.getAccountId();
            }

            if(functions.isValueNull(terminalId))
                commonValidatorVO.setTerminalId(terminalId);
            if(functions.isValueNull(paymodeid))
                commonValidatorVO.setPayoutType(paymodeid);
            if(functions.isValueNull(cardtypeid))
                commonValidatorVO.setCardType(cardtypeid);

            paymentManager.updateAuthSuccessfulTransactionForWallet(commonValidatorVO, trackingid);

            String walletAddress = GatewayAccountService.getGatewayAccount(accountId).getFRAUD_FTP_PASSWORD();

            transactionLogger.error(" IN processVerifyWalletDetials ------ Wallet addresss ------ "+walletAddress);

            directKitResponseVO.setWalletAddress(walletAddress);
        }
        catch (Exception e)
        {
            transactionLogger.error("Exception in processVerifyWalletDetials---", e);
        }
        return directKitResponseVO;
    }


    public DirectKitResponseVO processQRTransaction(CommonValidatorVO commonValidatorVO)throws PZConstraintViolationException,PZGenericConstraintViolationException
    {
        transactionLogger.error("------ in RestDirectTransactionManager processQRTransaction ---------");
        PaymentManager paymentManager = new PaymentManager();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        int trackingid = 0;
        AuditTrailVO auditTrailVO = new AuditTrailVO();

        auditTrailVO.setActionExecutorId(commonValidatorVO.getMerchantDetailsVO().getMemberId());

        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();

        CommRequestVO commRequestVO = null;
        AbstractPaymentGateway pg = null;

        if ("PA".equalsIgnoreCase(commonValidatorVO.getTransactionType()))
        {
            auditTrailVO.setActionExecutorName("Wallet Owner DynamicVerify");
            trackingid = Integer.parseInt(commonValidatorVO.getTrackingid());

            //commonValidatorVO.getAddressDetailsVO().setTmpl_amount(commonValidatorVO.getTransDetailsVO().getAmount());
            //commonValidatorVO.getAddressDetailsVO().setTmpl_currency(commonValidatorVO.getTransDetailsVO().getCurrency());
//            commonValidatorVO.getTransDetailsVO().setAmount(commonValidatorVO.getTransDetailsVO().getAmount());
//            commonValidatorVO.getTransDetailsVO().setCurrency(commonValidatorVO.getTransDetailsVO().getCurrency());
//            commonValidatorVO.getTransDetailsVO().setWalletAmount(commonValidatorVO.getTransDetailsVO().getWalletAmount());
//            commonValidatorVO.getTransDetailsVO().setWalletCurrency(commonValidatorVO.getTransDetailsVO().getWalletCurrency());
            transactionLogger.error("before uppdate wallet amount = "+commonValidatorVO.getTransDetailsVO().getWalletAmount());
            transactionLogger.error("before uppdate wallet currency = "+commonValidatorVO.getTransDetailsVO().getWalletCurrency());

            paymentManager.updateAuthStartedTransactionEntryForDynamicQR(commonValidatorVO, commonValidatorVO.getTrackingid(), auditTrailVO);
        }
        else if ("DB".equalsIgnoreCase(commonValidatorVO.getTransactionType()))
        {
            auditTrailVO.setActionExecutorName("Wallet Owner StaticVerify");

            commonValidatorVO.getAddressDetailsVO().setTmpl_amount(commonValidatorVO.getTransDetailsVO().getWalletAmount());
            commonValidatorVO.getAddressDetailsVO().setTmpl_currency(commonValidatorVO.getTransDetailsVO().getWalletCurrency());
            commonValidatorVO.getTransDetailsVO().setAmount(commonValidatorVO.getTransDetailsVO().getWalletAmount());
            commonValidatorVO.getTransDetailsVO().setCurrency(commonValidatorVO.getTransDetailsVO().getWalletCurrency());
            commonValidatorVO.getTransDetailsVO().setTotype(commonValidatorVO.getMerchantDetailsVO().getPartnerName());
            commonValidatorVO.getTransDetailsVO().setRedirectUrl("https://ife.paymentz.com/TestApp/redirecturl.jsp");

            trackingid = paymentManager.insertCaptureStartedTransactionEntryForStaticQR(commonValidatorVO,auditTrailVO);

        }
        commonValidatorVO.setTrackingid(String.valueOf(trackingid));
        directKitResponseVO.setTrackingId(String.valueOf(trackingid));


        transactionLogger.error(" ---- in processQRTransaction Manager tracking id -----"+commonValidatorVO.getTrackingid());


        try
        {
            pg = AbstractPaymentGateway.getGateway(commonValidatorVO.getMerchantDetailsVO().getAccountId());

            if (commonValidatorVO.getPaymentMode().equalsIgnoreCase("EW"))
            {
                commonValidatorVO.getAddressDetailsVO().setTmpl_currency(commonValidatorVO.getTransDetailsVO().getCurrency());
                //commonValidatorVO.setCustomerId("24532");
                if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("QR"))
                {
                    CommResponseVO transRespDetails = null;
                    PLMPUtils plmpUtils = new PLMPUtils();
                    commRequestVO = plmpUtils.getPLMPRequestVO(commonValidatorVO);

                    if ("PA".equalsIgnoreCase(commonValidatorVO.getTransactionType())) //Dynamic
                    {
                        transRespDetails = (CommResponseVO) pg.processAuthentication(String.valueOf(trackingid), commRequestVO);
                    }
                    else//DB = Static
                    {
                        transRespDetails = (CommResponseVO) pg.processSale(String.valueOf(trackingid), commRequestVO);
                    }

                    if (transRespDetails != null)
                    {
                        if ("success".equalsIgnoreCase(transRespDetails.getStatus().trim()))
                        {
                            //paymentManager.updateTransactionForCommon(transRespDetails, "authfailed", String.valueOf(trackingid), auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
                            directKitResponseVO.setStatus("success");
                            directKitResponseVO.setWalletAddress(transRespDetails.getWalletId());
                        }
                        else
                        {
                            //paymentManager.updateTransactionForCommon(transRespDetails, "authfailed", String.valueOf(trackingid), auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
                            directKitResponseVO.setStatus("failed");
                        }
                    }
                }
            }
        }
        catch (SystemError se)
        {
            logger.error("SystemError in RestDirectTransactionManager---", se);
        }
        //AbstractPaymentProcess paymentProcess = PaymentProcessFactory.getPaymentProcessInstance(trackingid, Integer.parseInt(commonValidatorVO.getMerchantDetailsVO().getAccountId()));
        //directKitResponseVO = paymentProcess.setNBResponseVO(directKitResponseVO, commonValidatorVO);

        return directKitResponseVO;
    }


    public DirectKitResponseVO processQRCheckout(CommonValidatorVO commonValidatorVO)throws PZConstraintViolationException,PZGenericConstraintViolationException
    {
        transactionLogger.error("------ in RestDirectTransactionManager processQRCheckout ---------");
        PaymentManager paymentManager = new PaymentManager();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        int trackingid = 0;
        AuditTrailVO auditTrailVO = new AuditTrailVO();

        auditTrailVO.setActionExecutorId(commonValidatorVO.getMerchantDetailsVO().getMemberId());
        auditTrailVO.setActionExecutorName("Customer QR Checkout");

        CommRequestVO commRequestVO = null;
        AbstractPaymentGateway pg = null;

        transactionLogger.error("tptype -----------"+commonValidatorVO.getMerchantDetailsVO().getPartnerName());
        commonValidatorVO.getTransDetailsVO().setTotype(commonValidatorVO.getMerchantDetailsVO().getPartnerName());
        commonValidatorVO.getTransDetailsVO().setRedirectUrl("https://ife.paymentz.com/TestApp/redirecturl.jsp");

        trackingid = paymentManager.insertBegunTransactionEntryForQRCheckout(commonValidatorVO,auditTrailVO);

        transactionLogger.error("tracking id --------- "+trackingid);
        commonValidatorVO.setTrackingid(String.valueOf(trackingid));
        directKitResponseVO.setTrackingId(String.valueOf(trackingid));

        transactionLogger.error(" ---- in processQRTransaction Manager tracking id -----"+commonValidatorVO.getTrackingid());


        if(functions.isValueNull(String.valueOf(trackingid))){
            directKitResponseVO.setStatus("success");
        }
        else{
            directKitResponseVO.setStatus("failed");
        }

/*        try
        {
            pg = AbstractPaymentGateway.getGateway(commonValidatorVO.getMerchantDetailsVO().getAccountId());

            if (commonValidatorVO.getPaymentMode().equalsIgnoreCase("EW"))
            {
                commonValidatorVO.getAddressDetailsVO().setTmpl_currency(commonValidatorVO.getTransDetailsVO().getCurrency());

                if (commonValidatorVO.getPaymentBrand().equalsIgnoreCase("QR"))
                {
                    CommResponseVO transRespDetails = null;
                    VoucherMoneyUtils voucherMoneyUtils = new VoucherMoneyUtils();
                    commRequestVO = voucherMoneyUtils.getVoucherMoneyRequestVO(commonValidatorVO);

                    if (commonValidatorVO.getMerchantDetailsVO().getIsService().equalsIgnoreCase("N"))
                    {
                        transRespDetails = (CommResponseVO) pg.processAuthentication(String.valueOf(trackingid), commRequestVO);
                    }
                    else
                    {
                        transRespDetails = (CommResponseVO) pg.processSale(String.valueOf(trackingid), commRequestVO);
                    }

                    if (transRespDetails != null)
                    {
                        if ("success".equalsIgnoreCase(transRespDetails.getStatus().trim()))
                        {
                            directKitResponseVO.setStatus("success");
                        }
                        else
                        {
                            directKitResponseVO.setStatus("failed");
                        }
                    }
                }
            }
        }
        catch (SystemError se)
        {
            logger.error("SystemError in RestDirectTransactionManager---", se);
        }*/

        return directKitResponseVO;
    }


    public DirectKitResponseVO processQRConfirmation (CommonValidatorVO commonValidatorVO,String status,String captureAmount)throws PZConstraintViolationException,PZGenericConstraintViolationException
    {
        transactionLogger.error("------ in RestDirectTransactionManager processQRConfirmation ---------");
        PaymentManager paymentManager = new PaymentManager();
        DirectKitResponseVO directKitResponseVO = new DirectKitResponseVO();
        int trackingid = 0;
        AuditTrailVO auditTrailVO = new AuditTrailVO();

        auditTrailVO.setActionExecutorId(commonValidatorVO.getMerchantDetailsVO().getMemberId());
        auditTrailVO.setActionExecutorName("Wallet Owner Confirm");
        ErrorCodeListVO errorCodeListVO = new ErrorCodeListVO();

        CommRequestVO commRequestVO = null;
        AbstractPaymentGateway pg = null;

        trackingid = Integer.parseInt(commonValidatorVO.getTrackingid());

        commonValidatorVO.setTrackingid(String.valueOf(trackingid));
        directKitResponseVO.setTrackingId(String.valueOf(trackingid));


        transactionLogger.error(" ---- in processQRConfirmation Manager tracking id -----" + commonValidatorVO.getTrackingid());
        transactionLogger.error(" ---- in processQRConfirmation Manager status -----" + status);


        try
        {
            paymentManager.updateConfirmationStatusQR(commonValidatorVO, status, commonValidatorVO.getTrackingid(), auditTrailVO,captureAmount);
        }
        catch (Exception se)
        {
            logger.error("SystemError in RestDirectTransactionManager---", se);
        }

        return directKitResponseVO;

    }
    public DirectKitResponseVO processGetEmiCount(CommonValidatorVO commonValidatorVO) throws  PZGenericConstraintViolationException, PZConstraintViolationException
    {
        DirectKitResponseVO directKitResponseVO = null;
        TokenManager tokenManager =new TokenManager();
        EmiVO emiVO=new EmiVO();

        emiVO=tokenManager.getEmiCountWithTerminalId(commonValidatorVO);
        if(emiVO!= null)
        {
            directKitResponseVO=new DirectKitResponseVO();
            directKitResponseVO.setStartDate(emiVO.getStartDate());
            directKitResponseVO.setEndDate(emiVO.getEndDate());
            directKitResponseVO.setEmiPeriod(emiVO.getEmiPeriod());
        }

        return directKitResponseVO;
    }

    public DirectKitResponseVO processInitiateAuthentication(CommonValidatorVO commonValidatorVO)throws PZDBViolationException
    {
        AbstractPaymentGateway pg=null;
        AuditTrailVO auditTrailVO=new AuditTrailVO();
        PaymentManager paymentManager=new PaymentManager();
        DirectKitResponseVO directKitResponseVO=null;

        String toid=commonValidatorVO.getMerchantDetailsVO().getMemberId();
        String accountId=commonValidatorVO.getMerchantDetailsVO().getAccountId();
        int trackingId= 0 ;

        transactionLogger.error("Toid---"+toid+"---accountid----"+accountId);

        String fromtype=GatewayAccountService.getGatewayAccount(accountId).getGateway();
        GatewayAccount account = GatewayAccountService.getGatewayAccount(String.valueOf(accountId));
        GatewayType gatewayType = GatewayTypeService.getGatewayType(account.getPgTypeId());
        String tableName = Database.getTableName(gatewayType.getGateway());

        transactionLogger.error("Inside fromtype----"+fromtype);

        CommRequestVO commRequestVO=new CommRequestVO();
        CommTransactionDetailsVO transactionDetailsVO=new CommTransactionDetailsVO();

        transactionDetailsVO.setCurrency(commonValidatorVO.getTransDetailsVO().getCurrency());
        transactionDetailsVO.setCardType(commonValidatorVO.getTransDetailsVO().getCardType());
        transactionDetailsVO.setPaymentType(commonValidatorVO.getTransDetailsVO().getPaymentType());
        transactionDetailsVO.setOrderId(commonValidatorVO.getTransDetailsVO().getOrderId());
        transactionDetailsVO.setAmount(commonValidatorVO.getTransDetailsVO().getAmount());
        commRequestVO.setTransDetailsVO(transactionDetailsVO);

        if(functions.isValueNull(commonValidatorVO.getMerchantDetailsVO().getMemberId()))
        {
            trackingId = paymentManager.insertInitAuthTransactionEntry(commonValidatorVO, auditTrailVO, commRequestVO, tableName);
        }

        commonValidatorVO.setTrackingid(String.valueOf(trackingId));

        transactionLogger.error("Tracking id------"+trackingId);

        try
        {
            pg = AbstractPaymentGateway.getGateway(accountId);

            if (Functions.checkAPIGateways(fromtype))
            {
                CommResponseVO commResponseVO = null;

                commResponseVO = (CommResponseVO) pg.processInitiateAuthentication(String.valueOf(trackingId), commRequestVO);

                Gson gson = new Gson();
                String comResponse1 = gson.toJson(commResponseVO);
                transactionLogger.error("commresponse-----" + comResponse1);

                directKitResponseVO = new DirectKitResponseVO();

                directKitResponseVO.setInitToken(commResponseVO.getResponseHashInfo());
                directKitResponseVO.setTrackingId(String.valueOf(trackingId));
                directKitResponseVO.setReferenceId(commResponseVO.getTransactionId());
                directKitResponseVO.setRemark(commResponseVO.getDescription());

            }

        }
        catch (Exception e)
        {
            transactionLogger.error("Exception in InitiateAuth----",e);
        }
        return directKitResponseVO;
    }

    public DirectKitResponseVO processAuthenticate(CommonValidatorVO commonValidatorVO)
    {
        AbstractPaymentGateway pg=null;
        DirectKitResponseVO directKitResponseVO=null;
        String memberid=commonValidatorVO.getMerchantDetailsVO().getMemberId();
        String accountId=commonValidatorVO.getMerchantDetailsVO().getAccountId();
        String trackingId="";

        transactionLogger.error("memberid-----"+memberid);

        transactionLogger.error("Accountid----"+accountId);

        String fromtype=GatewayAccountService.getGatewayAccount(accountId).getGateway();
        transactionLogger.error("Fromtype-----"+fromtype);

        CommRequestVO commRequestVO=new CommRequestVO();

        CommTransactionDetailsVO transactionDetailsVO=new CommTransactionDetailsVO();
        transactionDetailsVO.setCurrency(commonValidatorVO.getTransDetailsVO().getCurrency());
        transactionDetailsVO.setCardType(commonValidatorVO.getTransDetailsVO().getCardType());
        transactionDetailsVO.setPaymentType(commonValidatorVO.getTransDetailsVO().getPaymentType());
        transactionDetailsVO.setOrderId(commonValidatorVO.getTransDetailsVO().getOrderId());
        transactionDetailsVO.setAmount(commonValidatorVO.getTransDetailsVO().getAmount());
        transactionDetailsVO.setResponseOrderNumber(commonValidatorVO.getTransDetailsVO().getResponseOrderNumber());
        commRequestVO.setTransDetailsVO(transactionDetailsVO);

        CommCardDetailsVO cardDetailsVO=new CommCardDetailsVO();
        cardDetailsVO.setCardNum(commonValidatorVO.getCardDetailsVO().getCardNum());
        cardDetailsVO.setExpMonth(commonValidatorVO.getCardDetailsVO().getExpMonth());
        cardDetailsVO.setExpYear(commonValidatorVO.getCardDetailsVO().getExpYear());
        commRequestVO.setCardDetailsVO(cardDetailsVO);

        CommAddressDetailsVO addressDetailsVO=new CommAddressDetailsVO();
        addressDetailsVO.setFirstname(commonValidatorVO.getAddressDetailsVO().getFirstname());
        addressDetailsVO.setLastname(commonValidatorVO.getAddressDetailsVO().getLastname());
        addressDetailsVO.setPhone(commonValidatorVO.getAddressDetailsVO().getPhone());
        addressDetailsVO.setTelnocc(commonValidatorVO.getAddressDetailsVO().getTelnocc());
        addressDetailsVO.setEmail(commonValidatorVO.getAddressDetailsVO().getEmail());
        addressDetailsVO.setStreet(commonValidatorVO.getAddressDetailsVO().getStreet());
        addressDetailsVO.setCountry(commonValidatorVO.getAddressDetailsVO().getCountry());
        addressDetailsVO.setCity(commonValidatorVO.getAddressDetailsVO().getCity());
        addressDetailsVO.setCardHolderIpAddress(commonValidatorVO.getAddressDetailsVO().getCardHolderIpAddress());
        addressDetailsVO.setState(commonValidatorVO.getAddressDetailsVO().getState());
        addressDetailsVO.setZipCode(commonValidatorVO.getAddressDetailsVO().getZipCode());
        commRequestVO.setAddressDetailsVO(addressDetailsVO);

        trackingId=commonValidatorVO.getTrackingid();


        try
        {
            pg = AbstractPaymentGateway.getGateway(accountId);

            if (Functions.checkAPIGateways(fromtype))
            {
                CommResponseVO commResponseVO = null;
                commResponseVO = (CommResponseVO) pg.processAuthenticate(trackingId, commRequestVO);

                Gson gson = new Gson();
                String comResponse1 = gson.toJson(commResponseVO);
                transactionLogger.error("commresponse-----" + comResponse1);

                directKitResponseVO = new DirectKitResponseVO();
                directKitResponseVO.setStatus(commResponseVO.getStatus());
                directKitResponseVO.setRemark(commResponseVO.getDescription());
                transactionLogger.error("REMARK-----"+directKitResponseVO.getRemark());
            }

        }
        catch (Exception e)
        {
            transactionLogger.error("Exception in Authenticate-----",e);
        }

        return directKitResponseVO;
    }
    public DirectKitResponseVO processSendSmsCode(CommonValidatorVO commonValidatorVO)
    {
        transactionLogger.debug("Inside processSendSmsCode -------------");
        DirectKitResponseVO directKitResponseVO=new DirectKitResponseVO();
        TransactionDetailsVO transactionDetailsVO=commonValidatorVO.getTransactionDetailsVO();
        CommCardDetailsVO commCardDetailsVO=new CommCardDetailsVO();

        commCardDetailsVO.setCardNum(commonValidatorVO.getCardDetailsVO().getCardNum());
        commCardDetailsVO.setExpMonth(commonValidatorVO.getCardDetailsVO().getExpMonth());
        commCardDetailsVO.setExpYear(commonValidatorVO.getCardDetailsVO().getExpYear());
        commCardDetailsVO.setcVV(commonValidatorVO.getCardDetailsVO().getcVV());

        CommAddressDetailsVO commAddressDetailsVO=new CommAddressDetailsVO();
        commAddressDetailsVO.setTmpl_amount(commonValidatorVO.getTransactionDetailsVO().getTemplateamount());
        commAddressDetailsVO.setTmpl_currency(commonValidatorVO.getTransactionDetailsVO().getTemplatecurrency());
        commAddressDetailsVO.setFirstname(transactionDetailsVO.getFirstName());
        commAddressDetailsVO.setLastname(transactionDetailsVO.getLastName());
        commonValidatorVO.setAddressDetailsVO(commAddressDetailsVO);

        GenericTransDetailsVO transDetailsVO=new GenericTransDetailsVO();
        if (functions.isValueNull(commonValidatorVO.getTransactionDetailsVO().getCurrency()))
                transDetailsVO.setCurrency(commonValidatorVO.getTransactionDetailsVO().getCurrency());
        if (functions.isValueNull(commonValidatorVO.getTransactionDetailsVO().getAmount()))
            transDetailsVO.setAmount(commonValidatorVO.getTransactionDetailsVO().getAmount());
        commonValidatorVO.setTransDetailsVO(transDetailsVO);

        UnionPayInternationalResponseVO UnionPayInternationalResponseVO1=new UnionPayInternationalResponseVO();
        UnionPayInternationalRequestVO unionPayInternationalRequestVO=new UnionPayInternationalRequestVO();
        UnionPayInternationalPaymentGateway unionPayInternationalPaymentGateway=new UnionPayInternationalPaymentGateway(transactionDetailsVO.getAccountId());
        PaymentManager paymentManager=new PaymentManager();
        AuditTrailVO auditTrailVO=new AuditTrailVO();
        CommResponseVO transRespDetails=new CommResponseVO();
        String trackingid=commonValidatorVO.getTrackingid();
        transactionLogger.debug("trackingid --------------"+trackingid);
        String customerIp="";
        String phoneno=commonValidatorVO.getTransactionDetailsVO().getTelno();
        String phoneCC=commonValidatorVO.getTransactionDetailsVO().getTelcc();
        String phoneNoNew=phoneCC+"-"+phoneno;
        transactionLogger.debug("tel cc ----"+commonValidatorVO.getTransactionDetailsVO().getTelcc());
        transactionLogger.debug("tel no ----"+commonValidatorVO.getTransactionDetailsVO().getTelno());
        transactionLogger.debug("phoneno in processSendSmsCode------------"+phoneno);
        transactionLogger.debug("phoneNoNew in processSendSmsCode------------"+phoneNoNew);
        String status="";
        AbstractPaymentGateway pg = null;
        int detailId= 0;
        transactionLogger.error("db status -----------------"+transactionDetailsVO.getStatus());
       // transactionLogger.error("db status -----------------"+commonValidatorVO.getTransactionDetailsVO().getCurrency());
      //  transactionLogger.error("db status -----------------"+commonValidatorVO.getTransactionDetailsVO().getCurrency());
      //  commonValidatorVO.getTransDetailsVO().setCurrency(commonValidatorVO.getTransactionDetailsVO().getCurrency());
        try
        {
            transactionLogger.debug("Inside this before smsstarted--");
            if("smsstarted".equalsIgnoreCase(transactionDetailsVO.getStatus()))
            {
                transactionLogger.debug("Inside SMS Started status ------------");
                UnionPayInternationalUtils unionPayInternationalUtils=new UnionPayInternationalUtils();
                UnionPayInternationalUtility unionPayInternationalUtility=new UnionPayInternationalUtility();
                unionPayInternationalRequestVO=unionPayInternationalUtility.getUnionPayRequestVO(transactionDetailsVO,commCardDetailsVO,commAddressDetailsVO,phoneNoNew);
                transactionLogger.debug("phone before enrollment call -----------------"+unionPayInternationalRequestVO.getPhone());

                //smsstared entry
                transactionLogger.debug("trackingid --------------"+trackingid);
                paymentManager.insertEnrollmentStartedTransactionEntryForCupUPI(commonValidatorVO, trackingid, auditTrailVO, "enrollmentstarted");
                transactionLogger.debug("after enrollmentstarted   entry ----------------------- ");
                UnionPayInternationalResponseVO1 = (UnionPayInternationalResponseVO) unionPayInternationalPaymentGateway.processEasyEnrollment(trackingid, unionPayInternationalRequestVO, commonValidatorVO.getSmsCode());
                transactionLogger.debug("after processEasyEnrollment--------------- ");
                transactionLogger.error("after UnionPayInternationalResponseVO1 --- " + UnionPayInternationalResponseVO1.getStatus());
                pg = AbstractPaymentGateway.getGateway(transactionDetailsVO.getAccountId());
                System.out.println("pg ---------" + pg);
                String responseStatus="";
                if (UnionPayInternationalResponseVO1.getStatus().equalsIgnoreCase("success"))
                {
                    // Insert this card into upi_bin_card for next time use.
                    String queryResult = UnionPayInternationalUtils.insertCardForEnrollment(unionPayInternationalRequestVO.getCardDetailsVO().getCardNum(), unionPayInternationalRequestVO.getAddressDetailsVO().getPhone());
                    transactionLogger.error("queryResult ----------" + queryResult);
                   // System.out.println("queryResult in CupUpi SMS ------------" + queryResult);
                    // procee auth started
                     paymentManager.insertEnrollmentStartedTransactionEntryForCupUPI(commonValidatorVO, trackingid, auditTrailVO, "authstarted");
                    //  detailId=paymentManager.insertAuthStartedTransactionEntryForCupUPI(commonValidatorVO, trackingid, auditTrailVO);

                    if ("N".equalsIgnoreCase(commonValidatorVO.getMerchantDetailsVO().getIsService()))
                    {
                        transRespDetails = (CommResponseVO) pg.processAuthentication(trackingid, unionPayInternationalRequestVO);
                        responseStatus="authsuccessful";
                    }
                    else
                    {
                         transRespDetails = (CommResponseVO) pg.processSale(trackingid, unionPayInternationalRequestVO);
                         responseStatus="capturesuccess";
                    }
                   // String responseStatus="";
                    if (transRespDetails.getStatus().equalsIgnoreCase("success"))
                    {
                        transactionLogger.debug("process sale success -------------");
                      //  System.out.println("--inside success if--");
                        status = "success";
                      //  paymentManager.updateTransactionForCommon(transRespDetails, responseStatus, trackingid, auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
                    }
                    else
                    {
                         responseStatus="authfailed";
                      //  System.out.println("--inside failed else--");
                        transactionLogger.debug("process sale fail -------------");
                        status = "failed";
                       // paymentManager.updateTransactionForCupUpi(transRespDetails, "authfailed", trackingid, auditTrailVO, "transaction_common", customerIp); // have to set value for audit trail and ip
                    }
                   // paymentManager.updateTransactionForCommon(transRespDetails, responseStatus, trackingid, auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
                }
                else
                {
                    responseStatus="authfailed";
                    System.out.println("--inside SMS Started else--");
                    status = "failed";
                    transRespDetails.setStatus("fail");
                    transactionLogger.debug("Inside This enroolllme fail");
                  //  paymentManager.updateTransactionForCupUpi(transRespDetails, "authfailed", trackingid, auditTrailVO, "transaction_common", customerIp); // have to set value for audit trail and ip
                }
                paymentManager.updateTransactionForCommon(transRespDetails, responseStatus, trackingid, auditTrailVO, "transaction_common", "", transRespDetails.getTransactionId(), transRespDetails.getResponseTime(), transRespDetails.getRemark());
            }
            else
            {
                status="failed";
            }
            directKitResponseVO.setStatus(status);
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (PZDBViolationException e)
        {
            e.printStackTrace();
        }
        catch (SystemError systemError)
        {
            systemError.printStackTrace();
        }
        catch (PZGenericConstraintViolationException e)
        {
            e.printStackTrace();
        }

        return directKitResponseVO;
    }
}