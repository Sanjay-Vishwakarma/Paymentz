package net.partner;

import com.directi.pg.*;
import com.manager.dao.WhiteListDAO;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.validators.InputFields;
import com.payment.validators.InputValidator;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.User;
import org.owasp.esapi.ValidationErrorList;
import org.owasp.esapi.errors.ValidationException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Ajit on 22/10/2018.
 */
public class WhiteListCard extends HttpServlet
{
    private static Logger logger = new Logger(WhiteListCard.class.getName());

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request, response);
    }

    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        Functions functions = new Functions();
        StringBuffer stringBuffer = new StringBuffer();
        String msg = "";
        WhiteListDAO whiteListDAO = new WhiteListDAO();
        List<WhitelistingDetailsVO> listOfCard = null;
        PartnerFunctions partnerFunctions = new PartnerFunctions();
        Connection conn = null;
        String errormsg = "";
        String error = "";
        String EOL = "<BR>";

        HttpSession session = Functions.getNewSession(req);
        if (!partnerFunctions.isLoggedInPartner(session))
        {
            res.sendRedirect("/partner/logout.jsp");
            return;
        }
        User user = (User) session.getAttribute("ESAPIUserSessionKey");
        RequestDispatcher rd = req.getRequestDispatcher("/whitelist.jsp?ctoken=" + user.getCSRFToken());

        errormsg = errormsg + validateParameters(req);
        if (functions.isValueNull(errormsg))
        {
            req.setAttribute("error", errormsg);
            rd.forward(req, res);
            return;
        }

        try
        {
            InputValidator inputValidator = new InputValidator();
            List<InputFields> inputFieldsListMandatory = new ArrayList<InputFields>();
            inputFieldsListMandatory.add(InputFields.PAGENO);
            inputFieldsListMandatory.add(InputFields.RECORDS);
            inputValidator.InputValidations(req,inputFieldsListMandatory,true);
            if(!error.isEmpty())
            {
                req.setAttribute("error",error);
                rd.forward(req,res);
                return;
            }
        }
        catch (ValidationException e)
        {
            logger.error("Enter valid input",e);
            errormsg += "<center><font class=\"text\" face=\"arial\"><b>"+ errormsg + e.getMessage() + EOL + "</b></font></center>";
            req.setAttribute("error",errormsg);
            rd.forward(req, res);
            return;
        }

        String memberid = req.getParameter("memberid");
        String action = req.getParameter("upload");
        String accountID = req.getParameter("accountid");
        String firstSix = req.getParameter("firstsix");
        String lastFour = req.getParameter("lastfour");
        String emailAddress = req.getParameter("emailAddr");
        String partnerid = session.getAttribute("partnerId").toString();
        System.out.println("PartnerID:::::"+partnerid);
        int records=15;
        int pageno=1;
        int start = 0;
        int end = 0;
        boolean isRecordAvailable = false;

        boolean isValid = true;
        if ("upload".equalsIgnoreCase(action))
            isValid = false;

        if (!ESAPI.validator().isValidInput("accountid", accountID, "Numbers", 50, isValid))
        {
            logger.debug("Invalid AccountId");
            stringBuffer.append("Invalid accountID or accountID should not be empty" + EOL);
        }

        if (!ESAPI.validator().isValidInput("firstsix", firstSix, "FirstSixcc", 6, isValid))
        {
            logger.debug("Invalid firstsix");
            stringBuffer.append("Invalid card number firstsix or firstsix should not be empty" + EOL);
        }
        if (!ESAPI.validator().isValidInput("lastfour", lastFour, "LastFourcc", 4, isValid))
        {
            logger.debug("Invalid lastfour");
            stringBuffer.append("Invalid card number lastfour or lastfour should not be empty" + EOL);
        }
        if (functions.isValueNull(emailAddress))
        {
            if (!ESAPI.validator().isValidInput("emailaddr", emailAddress, "Email", 50, isValid))
            {
                logger.debug("Invalid email address");
                stringBuffer.append("Invalid Email or Email should not be empty" + EOL);
            }
        }
        if (stringBuffer.length() > 0)
        {
            req.setAttribute("error", stringBuffer.toString());
            //RequestDispatcher rd1 = req.getRequestDispatcher("/whitelist.jsp?ctoken=" + user.getCSRFToken());
            rd.forward(req, res);
            return;
        }
        try
        {
            pageno = Functions.convertStringtoInt(ESAPI.validator().getValidInput("SPageno",req.getParameter("SPageno"),"Numbers",5,true), 1);
            records = Functions.convertStringtoInt(ESAPI.validator().getValidInput("SRecords",req.getParameter("SRecords"),"Numbers",5,true), 15);
        }
        catch(ValidationException e)
        {
            logger.error("Invalid page no or records",e);
            pageno = 1;
            records = 15;
        }
        try
        {
            if (partnerFunctions.isPartnerMemberMapped(memberid, partnerid))
            {
                if ("upload".equalsIgnoreCase(action))
                {
                    try
                    {
                        {
                            isRecordAvailable = whiteListDAO.isRecordAvailableForMembers(memberid, accountID, firstSix, lastFour);
                            if (!isRecordAvailable)
                            {
                                whiteListDAO.addCard(firstSix, lastFour, emailAddress, accountID, memberid);
                                msg = "Records Uploaded Successfully.";
                            }
                            else
                            {
                                msg = "Records already Uploaded";
                            }
                        }
                    }
                    catch (PZDBViolationException e)
                    {
                        logger.debug("PZDBViolationException:::::"+e);
                    }
                }
                listOfCard = whiteListDAO.getWhiteListCardForPartner(firstSix, lastFour, emailAddress, accountID, memberid, records, pageno, req);
            }
        }
        catch (PZDBViolationException e)
        {
            logger.debug("PZDBViolationException::::" + e);
        }
        catch (Exception e)
        {
            logger.debug("Exception::::::" + e);
        }
        finally
        {
            Database.closeConnection(conn);
        }
        req.setAttribute("error", error);
        req.setAttribute("error", stringBuffer.toString());
        req.setAttribute("msg", msg);
        req.setAttribute("listofcard", listOfCard);
        //RequestDispatcher rd = req.getRequestDispatcher("/whitelist.jsp?ctoken=" + user.getCSRFToken());
        rd.forward(req, res);
        return;
    }

    private String validateParameters(HttpServletRequest req)
    {
        InputValidator inputValidator = new InputValidator();
        String error = "";
        List<InputFields> inputFieldsListOptional = new ArrayList<InputFields>();
        inputFieldsListOptional.add(InputFields.MEMBERID);


        ValidationErrorList errorList = new ValidationErrorList();
        inputValidator.InputValidations(req, inputFieldsListOptional, errorList, false);

        if (!errorList.isEmpty())
        {
            for (InputFields inputFields : inputFieldsListOptional)
            {
                if (errorList.getError(inputFields.toString()) != null)
                {
                    logger.debug(errorList.getError(inputFields.toString()).getLogMessage());
                    error = error.concat(errorList.getError(inputFields.toString()).getMessage());
                }
            }
        }
        return error;
    }
}

