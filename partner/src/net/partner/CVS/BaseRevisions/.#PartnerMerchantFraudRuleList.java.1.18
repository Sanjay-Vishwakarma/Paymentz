package net.partner;

import com.directi.pg.Functions;
import com.directi.pg.LoadProperties;
import com.directi.pg.Logger;
import com.manager.FraudRuleManager;
import com.manager.dao.MerchantDAO;
import com.manager.vo.MerchantDetailsVO;
import com.manager.vo.PaginationVO;
import com.manager.vo.fraudruleconfVOs.FraudSystemSubAccountVO;
import com.manager.vo.fraudruleconfVOs.MerchantFraudAccountVO;
import com.manager.vo.fraudruleconfVOs.RuleMasterVO;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.validators.InputFields;
import com.payment.validators.InputValidator;
import org.apache.commons.lang.StringUtils;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.User;
import org.owasp.esapi.errors.ValidationException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

/**
 * Created with IntelliJ IDEA.
 * User: sandip
 * Date:7/15/15
 * Time: 4:15 PM
 * To change this template use File | Settings | File Templates.
 */
public class PartnerMerchantFraudRuleList extends HttpServlet
{
    Logger logger=new Logger(PartnerMerchantFraudRuleList.class.getName());
    public void doGet(HttpServletRequest request,HttpServletResponse response)throws ServletException,IOException
    {
        doPost(request, response);
    }
    public void doPost(HttpServletRequest request,HttpServletResponse response)throws ServletException,IOException
    {
        doProcess(request, response);
    }
    public void doProcess(HttpServletRequest request,HttpServletResponse response)throws ServletException,IOException
    {
        HttpSession session = request.getSession();
        PartnerFunctions partner=new PartnerFunctions();
        if (!partner.isLoggedInPartner(session)){
            response.sendRedirect("/partner/Logout.jsp");
            return;
        }

        User user =  (User)session.getAttribute("ESAPIUserSessionKey");
        ResourceBundle rb1 = null;
        String language_property1 = (String) session.getAttribute("language_property");
        rb1 = LoadProperties.getProperty(language_property1);
        String PartnerMerchantFraudRuleList_partnerid_errormsg = StringUtils.isNotEmpty(rb1.getString("PartnerMerchantFraudRuleList_partnerid_errormsg")) ? rb1.getString("PartnerMerchantFraudRuleList_partnerid_errormsg") : "Invalid Partner ID.";
        String PartnerMerchantFraudRuleList_partnermember_errormsg = StringUtils.isNotEmpty(rb1.getString("PartnerMerchantFraudRuleList_partnermember_errormsg")) ? rb1.getString("PartnerMerchantFraudRuleList_partnermember_errormsg") : "Invalid Partner Member Configuration";
        String PartnerMerchantFraudRuleList_not_errormsg = StringUtils.isNotEmpty(rb1.getString("PartnerMerchantFraudRuleList_not_errormsg")) ? rb1.getString("PartnerMerchantFraudRuleList_not_errormsg") : "PartnerId Not Found";
        String PartnerMerchantFraudRuleList_successfully_errormsg = StringUtils.isNotEmpty(rb1.getString("PartnerMerchantFraudRuleList_successfully_errormsg")) ? rb1.getString("PartnerMerchantFraudRuleList_successfully_errormsg") : "Rules updated successfully for PZ Fraud Rule";
        String PartnerMerchantFraudRuleList_failed_errormsg = StringUtils.isNotEmpty(rb1.getString("PartnerMerchantFraudRuleList_failed_errormsg")) ? rb1.getString("PartnerMerchantFraudRuleList_failed_errormsg") : "Rules updating failed for PZ Fraud Rule";
        String PartnerMerchantFraudRuleList_rules_errormsg = StringUtils.isNotEmpty(rb1.getString("PartnerMerchantFraudRuleList_rules_errormsg")) ? rb1.getString("PartnerMerchantFraudRuleList_rules_errormsg") : "No valid rules to update";
        String PartnerMerchantFraudRuleList_no_rules_errormsg = StringUtils.isNotEmpty(rb1.getString("PartnerMerchantFraudRuleList_no_rules_errormsg")) ? rb1.getString("PartnerMerchantFraudRuleList_no_rules_errormsg") : "No Rules Mapped At SubAccount Level";

        StringBuffer  statusMsg=new StringBuffer();
        Functions functions=new Functions();
        String ruleid = request.getParameter("ruleid");
        String merchantid = request.getParameter("memberid");
        String partnerid = "";

        PaginationVO paginationVO = new PaginationVO();
        MerchantDAO merchantDAO=new MerchantDAO();
        FraudRuleManager ruleManager = new FraudRuleManager();
        StringBuffer errormsg = new StringBuffer();

        String error = "";
        String EOL = "<BR>";
        RequestDispatcher rd;
        if (!ESAPI.validator().isValidInput("pid", request.getParameter("pid"), "Numbers", 10, true))
        {
            error =  PartnerMerchantFraudRuleList_partnerid_errormsg + EOL ;
        }

        try
        {
            validateMandatoryParameter(request);
        }
        catch (ValidationException e)
        {
            error=error + e.getMessage() + EOL;

        }
        try
        {
            validateOptionalParameter(request);
        }
        catch (ValidationException e)
        {
            error=error + e.getMessage() + EOL;
        }


        if(functions.isValueNull(error)){
            request.setAttribute("errormsg",error );
            rd = request.getRequestDispatcher("/partnerMerchantFraudRule.jsp?ctoken="+user.getCSRFToken());
            rd.forward(request, response);
            return;
        }

        if(!functions.isValueNull(error)){
            try
            {
                if (functions.isValueNull(request.getParameter("pid")) && partner.isPartnerMemberMapped(merchantid, request.getParameter("pid")))
                {
                    partnerid = request.getParameter("pid");
                }
                else if (!functions.isValueNull(request.getParameter("pid")) && partner.isPartnerSuperpartnerMembersMapped(merchantid, request.getParameter("partnerid")))
                {
                    partnerid = request.getParameter("partnerid");
                }
                else{
                    request.setAttribute("errormsg",PartnerMerchantFraudRuleList_partnermember_errormsg);
                    rd = request.getRequestDispatcher("/partnerMerchantFraudRule.jsp?ctoken="+user.getCSRFToken());
                    rd.forward(request, response);
                    return;
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }



        String action=request.getParameter("action");
        String fsAccountId=request.getParameter("fsaccountid");
        String fsSubAccountId=request.getParameter("fssubaccountid");

        String score = null;
        String status = null;
        String ruleName= null;
        String value = null;

        if ("update".equals(action))
        {
            try
            {
                MerchantDetailsVO merchantDetailsVO=merchantDAO.getMemberDetails(merchantid);
                if(merchantDetailsVO.getPartnerId()==null)
                {
                    request.setAttribute("updateMsg",PartnerMerchantFraudRuleList_not_errormsg);
                    rd = request.getRequestDispatcher("/partnerMerchantFraudRule.jsp?ctoken=" + user.getCSRFToken());
                    rd.forward(request,response);
                    return;
                }

                partnerid=merchantDetailsVO.getPartnerId();

                List<RuleMasterVO> rulelist = new ArrayList<>();
                String[] ruleIds = request.getParameterValues("ruleid1");
                RuleMasterVO ruleMasterVO = null;

                for (String ruleId : ruleIds)
                {
                    score = request.getParameter("score_" + ruleId);
                    value = request.getParameter("value_" + ruleId);
                    status = request.getParameter("status_" + ruleId);
                    ruleName = request.getParameter("name_" + ruleId);
                    int count=0;

                    if (!ESAPI.validator().isValidInput("score",score,"Numbers",2,false))
                    {
                        errormsg.append(ruleId + "-" + "Invalid Rule Score" + " ");
                        count++;
                    }
                    if(functions.isValueNull(value))
                    {
                        if(!"Block_Card_By_Usage".equalsIgnoreCase(ruleName) && !"Block_Card_By_Type".equalsIgnoreCase(ruleName))
                        {
                            if (!ESAPI.validator().isValidInput("value", value, "Numbers", 10, false))
                            {
                                errormsg.append(ruleId + "-" + "Invalid Rule Limit");
                                count++;
                            }
                        }else if("Block_Card_By_Usage".equalsIgnoreCase(ruleName))
                        {
                            if (!ESAPI.validator().isValidInput("value", value, "CardByUsages", 30, false))
                            {
                                errormsg.append(ruleId + "-" + "Invalid Rule Limit");
                                count++;
                            }
                        }else if("Block_Card_By_Type".equalsIgnoreCase(ruleName))
                        {
                            if (!ESAPI.validator().isValidInput("value", value, "CardByType", 30, false))
                            {
                                errormsg.append(ruleId + "-" + "Invalid Rule Limit");
                                count++;
                            }
                        }
                    }

                    if (count > 0)
                    {
                        errormsg.append(EOL);
                    }


                    if (functions.isNumericVal(score))
                    {
                        ruleMasterVO = new RuleMasterVO();
                        ruleMasterVO.setRuleId(ruleId);
                        ruleMasterVO.setDefaultScore(score);
                        ruleMasterVO.setDefaultValue(value);
                        ruleMasterVO.setDefaultStatus(status);
                        rulelist.add(ruleMasterVO);
                    }
                    else
                    {
                        statusMsg.append(ruleId);
                    }
                }
                if (errormsg.length() > 0)
                {
                    request.setAttribute("errormsg", errormsg);
                }
                else
                {
                    if (rulelist.size() > 0 )
                    {
                        String Status = ruleManager.getUpdateInternalSubAccountLevelRiskRuleList(rulelist, merchantid);

                        if ("success".equals(Status))
                        {
                            statusMsg.append(PartnerMerchantFraudRuleList_successfully_errormsg);
                        }
                        else
                        {
                            errormsg.append(PartnerMerchantFraudRuleList_failed_errormsg);
                        }
                    }
                    else
                    {
                        errormsg.append(PartnerMerchantFraudRuleList_rules_errormsg);
                    }
                }
            }
            catch (Exception e){
                e.printStackTrace();
            }
        }

        try
        {
            paginationVO.setInputs("ruleid=" +ruleid+ "&partnerid="+ partnerid+"&memberid=" +merchantid);
            paginationVO.setPageNo(Functions.convertStringtoInt(request.getParameter("SPageno"), 1));
            paginationVO.setPage(PartnerMerchantFraudRuleList.class.getName());
            paginationVO.setCurrentBlock(Functions.convertStringtoInt(request.getParameter("currentblock"), 1));
            paginationVO.setRecordsPerPage(Functions.convertStringtoInt(request.getParameter("SRecords"), 15));


                MerchantFraudAccountVO fraudAccountVO = merchantDAO.getMerchantFraudServiceConfigurationDetails(merchantid);
                if (fraudAccountVO != null)
                {
                    FraudSystemSubAccountVO subAccountVO = ruleManager.getFraudServiceSubAccountDetails(fraudAccountVO.getFsSubAccountId());

                    //List<RuleMasterVO> internalLevelRuleMapping = ruleManager.getPartnerInternalLevelRiskRuleList(subAccountVO.getFraudSystemSubAccountId());
                    List<RuleMasterVO> internalLevelRuleMapping = ruleManager.getPartnerInternalLevelRiskRuleList(merchantid);
                    List<RuleMasterVO> accountLevelRuleMapping = ruleManager.getAccountLevelRiskRuleList(subAccountVO.getFraudSystemAccountId());
                    List<RuleMasterVO> subAccountLevelRuleMapping = ruleManager.getSuBAccountLevelRiskRuleList(subAccountVO.getFraudSystemSubAccountId(), paginationVO);

                    request.setAttribute("paginationVO", paginationVO);
                    request.setAttribute("fraudAccountVO", fraudAccountVO);
                    request.setAttribute("subAccountVO", subAccountVO);
                    request.setAttribute("internalLevelRuleMapping", internalLevelRuleMapping);
                    request.setAttribute("accountLevelRuleMapping", accountLevelRuleMapping);
                    request.setAttribute("subAccountLevelRuleMapping", subAccountLevelRuleMapping);
                }
                else
                {
                    statusMsg.append(PartnerMerchantFraudRuleList_no_rules_errormsg);
                }
        }
        catch (PZDBViolationException e)
        {
            logger.error("Error while performing db operation in ::::"+ e);
            Functions.ShowMessage("Error", "Internal System Error while getting list of Transactions");
        }
        catch (Exception e)
        {
            logger.error("Error while performing db operation in ::::"+ e);
            Functions.ShowMessage("Error", "Internal System Error while getting list of Transactions");
        }
        request.setAttribute("statusMsg", statusMsg.toString());
        request.setAttribute("errormsg", errormsg);
        rd = request.getRequestDispatcher("/partnerMerchantFraudRule.jsp?ctoken="+user.getCSRFToken());
        rd.forward(request, response);
        return;
    }

    private void validateOptionalParameter(HttpServletRequest req) throws ValidationException
    {
        InputValidator inputValidator = new InputValidator();
        List<InputFields> inputFieldsListMandatory = new ArrayList<InputFields>();
        inputFieldsListMandatory.add(InputFields.PAGENO);
        inputFieldsListMandatory.add(InputFields.RECORDS);
        inputValidator.InputValidations(req,inputFieldsListMandatory,true);
    }
    private void validateMandatoryParameter(HttpServletRequest req) throws ValidationException
    {
        InputValidator inputValidator = new InputValidator();
        List<InputFields> inputFieldsListMandatory = new ArrayList();
        List<InputFields> inputFields = new ArrayList();
        inputFieldsListMandatory.add(InputFields.MEMBERID);
        inputFields.add(InputFields.PID);
        inputValidator.InputValidations(req,inputFieldsListMandatory,false);
        inputValidator.InputValidations(req,inputFields,true);
    }
}
