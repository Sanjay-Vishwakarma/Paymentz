package net.partner;
import com.directi.pg.Functions;
import com.directi.pg.Logger;
import com.manager.ChargebackManager;
import com.manager.vo.BinDetailsVO;
import com.manager.vo.InputDateVO;
import com.manager.vo.PaginationVO;
import com.manager.vo.TransactionVO;
import com.payment.exceptionHandler.PZConstraintViolationException;
import com.payment.exceptionHandler.PZDBViolationException;
import com.payment.exceptionHandler.PZExceptionHandler;
import com.payment.exceptionHandler.constraintType.PZConstraintExceptionEnum;
import com.payment.validators.InputFields;
import com.payment.validators.InputValidator;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.User;
import org.owasp.esapi.ValidationErrorList;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by Ajit on 27/11/2018.
 */
public class PartnerMarkFraudTransaction extends HttpServlet
{
    private static Logger log = new Logger(PartnerMarkFraudTransaction.class.getName());
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        doPost(request, response);
    }
    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        HttpSession session = req.getSession();
        User user =  (User)session.getAttribute("ESAPIUserSessionKey");
        PartnerFunctions partnerFunctions = new PartnerFunctions();
        RequestDispatcher rd = req.getRequestDispatcher("/markFraudTransaction.jsp?ctoken="+user.getCSRFToken());

        if (!partnerFunctions.isLoggedInPartner(session))
        {
            res.sendRedirect("/partner/logout.jsp");
            return;
        }

        ChargebackManager chargebackManager = new ChargebackManager();
        TransactionVO transactionVO = new TransactionVO();
        BinDetailsVO binDetailsVO=new BinDetailsVO();
        PaginationVO paginationVO = new PaginationVO();
        InputDateVO inputDateVO = new InputDateVO();
        List<TransactionVO> cbVOList = null;
        List<TransactionVO> reasonList = null;
        Functions functions = new Functions();
        String error= "";
        String fdate=null;
        String tdate=null;
        String fmonth=null;
        String tmonth=null;
        String fyear=null;
        String tyear=null;
        String fdtstamp = null;
        String tdtstamp = null;

        try
        {
            error = error + validateOptionalParameters(req);
            if(functions.isValueNull(error))
            {
                PZExceptionHandler.raiseConstraintViolationException("MarkFraudTransaction.java", "doPost()", null, "icici", error, PZConstraintExceptionEnum.INVALID_PARAMETER_ENTERED, null, null, null);
                req.setAttribute("error",error);
                rd.forward(req, res);
                return;
            }

            String trackingId= req.getParameter("STrackingid");
            String paymentId= req.getParameter("paymentid");
            String firstSix = req.getParameter("firstsix");
            String lastFour = req.getParameter("lastfour");
            String emailAddr = req.getParameter("emailaddr");
            String name = req.getParameter("name");
            String accountId=req.getParameter("accountid");
            String paymodeId=req.getParameter("paymodeid");
            String cardTypeId=req.getParameter("cardtypeid");
            String status=req.getParameter("status");
            String description=req.getParameter("description");
            String firstName=req.getParameter("firstname");
            String lastName=req.getParameter("lastname");
            String pgtypeid = req.getParameter("pgtypeid");
            String fromdate = req.getParameter("fromdate");
            String todate = req.getParameter("todate");
            String partnerid = req.getParameter("partnerid");
            String partnername = (String)session.getAttribute("partnername");
            String memberId = "";
            String currency ="";
            String gateway = "";
            String gateway_name = "";
            StringBuffer trackingIds = new StringBuffer();
            if (functions.isValueNull(trackingId))
            {
                List<String> trackingidList=null;
                if(trackingId.contains(","))
                {
                    trackingidList  = Arrays.asList(trackingId.split(","));
                }
                else
                {
                    trackingidList= Arrays.asList(trackingId.split(" "));
                }

                int i = 0;
                Iterator itr = trackingidList.iterator();
                while (itr.hasNext())
                {
                    if (i != 0)
                    {
                        trackingIds.append(",");
                    }
                    trackingIds.append("" + itr.next() + "");
                    i++;
                }
            }

            if (!ESAPI.validator().isValidInput("STrackingid",req.getParameter("STrackingid"),"Numbers",100,true))
            {
                log.error("Invalid TrackingID.");
                error="Invalid TrackingID.";
                req.setAttribute("error",error);
                rd = req.getRequestDispatcher("/markFraudTransaction.jsp?ctoken=" + user.getCSRFToken());
                rd.forward(req,res);
                return;
            }
            else
            {
                trackingId= req.getParameter("STrackingid");
            }

            if (req.getParameter("pgtypeid")!=null && req.getParameter("pgtypeid").split("-").length == 3 && !req.getParameter("pgtypeid").equalsIgnoreCase(""))
            {
                gateway = req.getParameter("pgtypeid").split("-")[2];
                currency = req.getParameter("pgtypeid").split("-")[1];
                gateway_name = req.getParameter("pgtypeid").split("-")[0];
            }
            if (!(req.getParameter("pgtypeid").split("-").length == 3))
            {
                gateway_name = req.getParameter("pgtypeid");
            }

            /*if(!functions.isValueNull(gateway_name))
            {
                req.setAttribute("errorMsg","Kindly Provide Bank Name.");
                rd.forward(req, res);
                return;
            }*/

            String toidList = null;
            String pid = req.getParameter("pid");
            String partnerId = String.valueOf(session.getAttribute("partnerId"));
            String partner;
            if(functions.isValueNull(pid) && partnerFunctions.isPartnerSuperpartnerMapped(pid,partnerId)){
                partner = pid;
            }else if(!functions.isValueNull(pid)){
                partner = partnerId;
            }
            else
            {
                error="Invalid Partner Mapping.";
                req.setAttribute("error",error);
                rd.forward(req, res);
                return;
            }

            try
            {
                if (functions.isValueNull(req.getParameter("toid")))
                {
                    if(functions.isValueNull(pid)&& partnerFunctions.isPartnerMemberMapped(req.getParameter("toid"), pid)){
                        toidList = req.getParameter("toid");
                    }else if(!functions.isValueNull(pid) && partnerFunctions.isPartnerSuperpartnerMembersMapped(req.getParameter("toid"), partnerid)){
                        toidList = req.getParameter("toid");
                    }
                    else
                    {
                        error="Invalid Partner Member configuration.";
                        req.setAttribute("error",error);
                        rd.forward(req, res);
                        return;
                    }
                }
                else
                {
                    if(functions.isValueNull(pid)){
                        toidList = partnerFunctions.getPartnerMemberRS(pid);
                    }else{
                        toidList = partnerFunctions.getSuperpartnersMemberRS(String.valueOf(session.getAttribute("partnerId")));
                    }
                }
            }
            catch (Exception e)
            {
                log.debug("Exception::::" + e);
            }

            transactionVO.setTrackingId(trackingIds.toString());
            transactionVO.setPaymentId(paymentId);
            transactionVO.setFirstSix(firstSix);
            transactionVO.setLastFour(lastFour);
            transactionVO.setToid(toidList);
            transactionVO.setEmailAddr(emailAddr);
            transactionVO.setCustFirstName(firstName);
            transactionVO.setCustLastName(lastName);
            transactionVO.setAccountId(accountId);
            transactionVO.setStatus(status);
            transactionVO.setOrderDesc(description);
            transactionVO.setGatewayName(gateway_name);
            transactionVO.setCurrency(currency);
            transactionVO.setName(name);

            Calendar cal= Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

            Date date= null;
            try
            {
                if(functions.isFutureDateComparisonWithFromAndToDate(fromdate, todate, "dd/MM/yyyy"))
                {
                    req.setAttribute("catchError","Invalid From & To date");
                    rd.forward(req, res);
                    return;
                }

                date = sdf.parse(fromdate);
                cal.setTime(date);
                fdate = String.valueOf(cal.get(Calendar.DATE));
                fmonth = String.valueOf(cal.get(Calendar.MONTH));
                fyear = String.valueOf(cal.get(Calendar.YEAR));

                //to Date
                date = sdf.parse(todate);
                cal.setTime(date);
                tdate = String.valueOf(cal.get(Calendar.DATE));
                tmonth = String.valueOf(cal.get(Calendar.MONTH));
                tyear = String.valueOf(cal.get(Calendar.YEAR));

                log.debug("From date dd::" + fdate + " MM;;" + fmonth + " YY::" + fyear + " To date dd::" + tdate + " MM::" + tmonth + " YY::" + tyear);
                fdtstamp = Functions.converttomillisec(fmonth, fdate, fyear, "0", "0", "0");
                tdtstamp = Functions.converttomillisec(tmonth, tdate, tyear, "23", "59", "59");
            }
            catch (Exception e)
            {
                log.debug("Exception:::"+e);
            }

            inputDateVO.setFdtstamp(fdtstamp);
            inputDateVO.setTdtstamp(tdtstamp);

            paginationVO.setInputs("paymentid="+paymentId+"&STrackingid=" + transactionVO.getTrackingId()+"&firstsix="+binDetailsVO.getFirst_six()+"&lastfour="+binDetailsVO.getLast_four()+"&emailaddr="+transactionVO.getEmailAddr()+"&ipaddress="+transactionVO.getIpAddress()+"&toid="+transactionVO.getToid()+"&accountid="+transactionVO.getAccountId()+"&status="+transactionVO.getStatus()+"&description="+transactionVO.getOrderDesc() +"&firstname="+transactionVO.getCustFirstName()+"&lastname="+transactionVO.getCustLastName()+"&pgtypeid="+pgtypeid+"&currency="+currency+"&name="+transactionVO.getName()+"&fdate=" + fdate + "&fmonth=" + fmonth + "&fyear=" + fyear + "&tdate=" + tdate + "&tmonth=" + tmonth + "&tyear=" + tyear  + "&pid=" + pid);
            paginationVO.setPageNo(Functions.convertStringtoInt(req.getParameter("SPageno"), 1));
            paginationVO.setPage(PartnerMarkFraudTransaction.class.getName());
            paginationVO.setCurrentBlock(Functions.convertStringtoInt(req.getParameter("currentblock"),1));
            paginationVO.setRecordsPerPage(Functions.convertStringtoInt(req.getParameter("SRecords"),30));

            cbVOList = chargebackManager.getMarkFraudTransactions(transactionVO, toidList, inputDateVO, paginationVO, partnername);
            reasonList = chargebackManager.getFraudReason();
            req.setAttribute("cbVO",cbVOList);
            req.setAttribute("paginationVO",paginationVO);
            req.setAttribute("error",error);
            req.setAttribute("reasonList",reasonList);

            rd.forward(req, res);
        }

        catch (PZConstraintViolationException cve)
        {

            log.error("PZConstraintViolationException:::::",cve);
            req.setAttribute("error",cve.getPzConstraint().getMessage());
            rd.forward(req, res);
            return;
        }
        catch (PZDBViolationException dbe)
        {
         
            log.error("PZDBViolationException:::::", dbe);
            req.setAttribute("error","Invalid tracking id");
            rd.forward(req, res);
            return;
        }
    }
    private String validateOptionalParameters(HttpServletRequest req)
    {
        InputValidator inputValidator = new InputValidator();
        String error = "";
        String EOL = "<BR>";
        List<InputFields>  inputFieldsListOptional = new ArrayList<InputFields>();
        //inputFieldsListOptional.add(InputFields.TRACKINGID_SMALL);
        inputFieldsListOptional.add(InputFields.COMMASEPRATED_TRACKINGID_TRA);
        inputFieldsListOptional.add(InputFields.PAYMENTID);
        inputFieldsListOptional.add(InputFields.FIRST_SIX);
        inputFieldsListOptional.add(InputFields.LAST_FOUR);
        inputFieldsListOptional.add(InputFields.EMAILADDR);
        inputFieldsListOptional.add(InputFields.IPADDRESS);
        inputFieldsListOptional.add(InputFields.CUSTNAME);
        inputFieldsListOptional.add(InputFields.TOID);
        inputFieldsListOptional.add(InputFields.ACCOUNTID_SMALL);
        inputFieldsListOptional.add(InputFields.PAYMODE);
        inputFieldsListOptional.add(InputFields.CARDTYPE);
        inputFieldsListOptional.add(InputFields.DESC);
        inputFieldsListOptional.add(InputFields.ORDERDESC);
        inputFieldsListOptional.add(InputFields.FROMDATE);
        inputFieldsListOptional.add(InputFields.TODATE);
        inputFieldsListOptional.add(InputFields.FROMMONTH);
        inputFieldsListOptional.add(InputFields.TOMONTH);
        inputFieldsListOptional.add(InputFields.FROMYEAR);
        inputFieldsListOptional.add(InputFields.TOYEAR);
        inputFieldsListOptional.add(InputFields.STARTTIME);
        inputFieldsListOptional.add(InputFields.ENDTIME);
        inputFieldsListOptional.add(InputFields.PAGENO);
        inputFieldsListOptional.add(InputFields.RECORDS);
        inputFieldsListOptional.add(InputFields.PID);

        ValidationErrorList errorList = new ValidationErrorList();
        inputValidator.InputValidations(req, inputFieldsListOptional, errorList, true);

        if(!errorList.isEmpty())
        {
            for(InputFields inputFields :inputFieldsListOptional)
            {
                if(errorList.getError(inputFields.toString())!=null)
                {
                    log.debug(errorList.getError(inputFields.toString()).getLogMessage());
                    error = error+errorList.getError(inputFields.toString()).getMessage()+EOL;
                }
            }
        }
        return error;
    }

}